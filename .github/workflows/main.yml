name: Persistent VPS with Complete System Backup

on:
  workflow_dispatch:
    inputs:
      skip_restore:
        description: 'Skip restoration from backup (fresh start)'
        required: false
        default: 'false'
        type: boolean
      session_timeout:
        description: 'Session timeout (e.g., 1h, 2h, 6h)'
        required: false
        default: '6h'
        type: string
  workflow_call:

env:
  VPS_USER: jacky
  VPS_PASSWORD: ${{ secrets.VPS_PASSWORD || 'ChangeMe123!' }}
  VPS_HOSTNAME: github-vps
  SESSION_TIMEOUT: ${{ inputs.session_timeout || '6h' }}
  BACKUP_RETENTION_DAYS: 30
  MAX_RETRIES: 3

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # ===== INITIALIZATION =====
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system tools
        run: |
          sudo apt update
          sudo apt install -y curl tmate jq zip unzip pigz rsync

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.MEGA_USER }}" ] || [ -z "${{ secrets.MEGA_PASS }}" ]; then
            echo "❌ MEGA credentials not configured"
            exit 1
          fi
          if [ -z "${{ secrets.TAILSCALE_AUTHKEY }}" ]; then
            echo "❌ Tailscale auth key not configured"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      # ===== RCLONE SETUP =====
      - name: Install and configure rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF
          echo "✅ Rclone configured with MEGA"

      # ===== USER SETUP =====
      - name: Create user with sudo access
        run: |
          if ! id -u ${{ env.VPS_USER }} >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }}:${{ env.VPS_PASSWORD }}" | sudo chpasswd
            sudo usermod -aG sudo ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/${{ env.VPS_USER }}
            echo "✅ User ${{ env.VPS_USER }} created with sudo access"
            
            # Create default directories
            sudo -u ${{ env.VPS_USER }} mkdir -p /home/${{ env.VPS_USER }}/{www,projects,scripts,backups}
          else
            echo "🔁 User ${{ env.VPS_USER }} already exists"
          fi

      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname ${{ env.VPS_HOSTNAME }}
          echo "🏷️ Hostname set to $(hostname)"

      # ===== CHECK FOR ARTIFACT LINK IN MEGA =====
      - name: Check for artifact link in MEGA
        if: ${{ inputs.skip_restore != true }}
        id: check-mega-link
        run: |
          mkdir -p restore
          echo "🔍 Checking for artifact link in MEGA..."
          
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt ${{ env.MAX_RETRIES }} ]; do
            if rclone copy mega:artifact-link.txt restore/ --progress 2>/dev/null; then
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 5
          done
          
          if [ -f "restore/artifact-link.txt" ]; then
            DIRECT_LINK=$(cat restore/artifact-link.txt | tr -d '\n\r' | xargs)
            echo "📋 Found artifact link: $DIRECT_LINK"
            
            ARTIFACT_ID=$(echo "$DIRECT_LINK" | grep -o 'artifacts/[0-9]*' | cut -d'/' -f2)
            
            if [ -n "$ARTIFACT_ID" ]; then
              echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT
              echo "direct_link=$DIRECT_LINK" >> $GITHUB_OUTPUT
              echo "link_found=true" >> $GITHUB_OUTPUT
              echo "✅ Valid artifact link found with ID: $ARTIFACT_ID"
            else
              echo "⚠️ Invalid artifact link format"
              echo "link_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No artifact-link.txt found in MEGA (fresh start)"
            echo "link_found=false" >> $GITHUB_OUTPUT
          fi

      # ===== DOWNLOAD ARTIFACT FROM MEGA LINK =====
      - name: Download backup from MEGA link
        if: ${{ steps.check-mega-link.outputs.link_found == 'true' }}
        id: download-from-mega-link
        run: |
          ARTIFACT_ID=${{ steps.check-mega-link.outputs.artifact_id }}
          echo "📥 Downloading artifact $ARTIFACT_ID from MEGA stored link..."
          
          mkdir -p restore
          
          RETRY_COUNT=0
          DOWNLOAD_SUCCESS=false
          
          while [ $RETRY_COUNT -lt ${{ env.MAX_RETRIES }} ] && [ "$DOWNLOAD_SUCCESS" = false ]; do
            HTTP_CODE=$(curl -L -w "%{http_code}" -o restore/backup.tar.gz \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip")
            
            if [ "$HTTP_CODE" = "200" ] && [ -f "restore/backup.tar.gz" ]; then
              DOWNLOAD_SUCCESS=true
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "⚠️ Download attempt $RETRY_COUNT failed (HTTP: $HTTP_CODE), retrying..."
              sleep 10
            fi
          done
          
          if [ "$DOWNLOAD_SUCCESS" = true ]; then
            echo "📦 Extracting backup..."
            cd restore
            tar -xzf backup.tar.gz
            rm backup.tar.gz
            cd ..
            echo "✅ Backup downloaded and extracted from MEGA link"
            echo "download_success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to download backup from MEGA link after ${{ env.MAX_RETRIES }} attempts"
            echo "download_success=false" >> $GITHUB_OUTPUT
          fi

      # ===== COMPLETE SYSTEM RESTORATION =====
      - name: Restore complete system
        if: ${{ steps.download-from-mega-link.outputs.download_success == 'true' }}
        run: |
          echo "🔄 Restoring complete system from backup..."
          
          # Restore user home directory first
          if [ -f "restore/user-home.tar.gz" ]; then
            echo "🏠 Restoring user home directory..."
            sudo tar -xzpvf restore/user-home.tar.gz -C / --numeric-owner
            echo "✅ User home directory restored"
          fi
          
          # Restore system files
          if [ -f "restore/system-backup.tar.gz" ]; then
            echo "💾 Restoring system files..."
            sudo tar -xzpvf restore/system-backup.tar.gz -C / --numeric-owner
            echo "✅ System files restored"
          fi
          
          # Restore packages
          if [ -f "restore/packages.list" ]; then
            echo "📦 Restoring packages..."
            sudo apt-get update
            xargs sudo apt-get install -y < restore/packages.list
            echo "✅ Packages restored"
          fi
          
          # Restore application data
          if [ -f "restore/app-data.tar.gz" ]; then
            echo "📱 Restoring application data..."
            sudo tar -xzpvf restore/app-data.tar.gz -C / --numeric-owner
            echo "✅ Application data restored"
          fi
          
          # Fix permissions
          echo "🔧 Fixing file permissions..."
          sudo chown -R ${{ env.VPS_USER }}:${{ env.VPS_USER }} /home/${{ env.VPS_USER }}
          sudo chmod 700 /home/${{ env.VPS_USER }}
          
          # Restore systemd services
          sudo systemctl daemon-reload
          
          echo "✅ Complete system restoration finished"

      # ===== TAILSCALE SETUP WITH PERSISTENT IP =====
      - name: Setup Tailscale with persistent IP
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          
          sudo tailscale up \
            --authkey ${{ secrets.TAILSCALE_AUTHKEY }} \
            --hostname ${{ env.VPS_HOSTNAME }} \
            --ssh \
            --advertise-exit-node \
            --accept-dns=false \
            --advertise-tags=tag:github-vps
          
          sleep 10
          
          TAILSCALE_IP=$(tailscale ip -4)
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          
          # Save connection info
          cat > /home/${{ env.VPS_USER }}/connection-info.txt << EOF
          VPS Connection Information
          ==========================
          Tailscale IP: $TAILSCALE_IP
          SSH Command: ssh ${{ env.VPS_USER }}@$TAILSCALE_IP
          Username: ${{ env.VPS_USER }}
          Password: ${{ env.VPS_PASSWORD }}
          Hostname: ${{ env.VPS_HOSTNAME }}
          Home Directory: /home/${{ env.VPS_USER }}
          ==========================
          EOF
          
          chown ${{ env.VPS_USER }}:${{ env.VPS_USER }} /home/${{ env.VPS_USER }}/connection-info.txt

      # ===== VPS SESSION =====
      - name: Start VPS session
        run: |
          echo "🚀 VPS Session Started"
          echo "========================"
          echo "👤 User: ${{ env.VPS_USER }}"
          echo "🔑 Pass: ${{ env.VPS_PASSWORD }}"
          echo "🏠 Home: /home/${{ env.VPS_USER }}"
          echo "🌐 Tailscale IP: $(tailscale ip -4)"
          echo "⏰ Timeout: ${{ env.SESSION_TIMEOUT }}"
          echo "========================"
          
          # Show user directory contents
          echo "📁 User directory contents:"
          ls -la /home/${{ env.VPS_USER }}/
          echo "========================"
          
          TIMEOUT=${{ env.SESSION_TIMEOUT }}
          if [[ "$TIMEOUT" =~ ^([0-9]+)([hms])$ ]]; then
            VALUE=${BASH_REMATCH[1]}
            UNIT=${BASH_REMATCH[2]}
            case $UNIT in
              h) TIMEOUT_SECONDS=$((VALUE * 3600)) ;;
              m) TIMEOUT_SECONDS=$((VALUE * 60)) ;;
              s) TIMEOUT_SECONDS=$VALUE ;;
              *) TIMEOUT_SECONDS=21600 ;;
            esac
          else
            TIMEOUT_SECONDS=21600
          fi
          
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          
          TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          TMATE_WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')
          
          echo "🔗 SSH Connect: $TMATE_SSH"
          echo "🌐 Web Connect: $TMATE_WEB"
          
          sleep $TIMEOUT_SECONDS

      # ===== COMPLETE SYSTEM BACKUP =====
      - name: Create complete system backup
        if: always()
        run: |
          mkdir -p backup
          echo "💾 Creating complete system backup..."
          
          # 1. Backup user home directory (MOST IMPORTANT)
          echo "🏠 Backing up user home directory..."
          sudo tar -czpvf backup/user-home.tar.gz \
            --exclude=/home/${{ env.VPS_USER }}/.cache \
            --exclude=/home/${{ env.VPS_USER }}/node_modules \
            --exclude=/home/${{ env.VPS_USER }}/tmp \
            --numeric-owner \
            /home/${{ env.VPS_USER }}
          
          # 2. Backup system files and configurations
          echo "⚙️ Backing up system configurations..."
          sudo tar -czpvf backup/system-backup.tar.gz \
            --numeric-owner \
            /etc \
            /var/lib \
            /usr/local \
            /opt \
            /root 2>/dev/null || true
          
          # 3. Backup application data
          echo "📱 Backing up application data..."
          sudo tar -czpvf backup/app-data.tar.gz \
            --numeric-owner \
            /var/www \
            /srv \
            /var/lib/mysql \
            /var/lib/postgresql \
            /var/lib/docker 2>/dev/null || true
          
          # 4. Backup package list
          echo "📦 Backing up installed packages..."
          dpkg --get-selections > backup/packages.list
          apt-mark showauto > backup/auto-packages.list
          snap list > backup/snap-list.txt 2>/dev/null || true
          
          # 5. Backup service configurations
          echo "🔧 Backing up service configurations..."
          systemctl list-unit-files --type=service --state=enabled > backup/enabled-services.list
          systemctl list-unit-files --type=service > backup/all-services.list
          
          # Create detailed manifest
          cat > backup/manifest.txt << EOF
          Complete System Backup
          ======================
          Created: $(date)
          Workflow: ${{ github.run_id }}
          Repository: ${{ github.repository }}
          Hostname: $(hostname)
          Tailscale IP: $(tailscale ip -4)
          
          Backup Includes:
          - User Home: /home/${{ env.VPS_USER }} (all user files)
          - System Configs: /etc, /var/lib
          - Application Data: /var/www, /srv, databases
          - Installed Packages: $(dpkg --get-selections | wc -l) packages
          - Service Configurations
          
          User Files Backed Up:
          $(find /home/${{ env.VPS_USER }} -type f -name "*" | head -20 | sed 's/^/  - /')
          $(if [ $(find /home/${{ env.VPS_USER }} -type f | wc -l) -gt 20 ]; then echo "  - ... and more"; fi)
          ======================
          EOF
          
          # Show backup contents
          echo "📊 Backup contents:"
          du -sh backup/*
          echo "✅ Complete system backup created"

      # ===== UPLOAD TO GITHUB ARTIFACTS =====
      - name: Upload complete backup
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-complete-backup
          path: backup/
          retention-days: ${{ env.BACKUP_RETENTION_DAYS }}

      # ===== SAVE ARTIFACT LINK TO MEGA =====
      - name: Save artifact link to MEGA
        if: always()
        run: |
          echo "☁️ Saving artifact link to MEGA..."
          
          RUN_ID="${{ github.run_id }}"
          sleep 30
          
          ARTIFACTS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts")
          
          ARTIFACT_ID=$(echo "$ARTIFACTS_JSON" | jq -r '.artifacts[] | select(.name == "vps-complete-backup") | .id')
          
          if [ -n "$ARTIFACT_ID" ]; then
            ARTIFACT_LINK="https://github.com/${{ github.repository }}/actions/runs/$RUN_ID/artifacts/$ARTIFACT_ID"
            echo "$ARTIFACT_LINK" > artifact-link.txt
            
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt ${{ env.MAX_RETRIES }} ]; do
              if rclone copy artifact-link.txt mega: --progress; then
                echo "✅ Artifact link saved to MEGA"
                break
              fi
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 10
            done
          fi

      # ===== USER DATA VERIFICATION =====
      - name: Verify user data backup
        if: always()
        run: |
          echo "🔍 Verifying user data backup..."
          echo "User: ${{ env.VPS_USER }}"
          echo "Home Directory: /home/${{ env.VPS_USER }}"
          
          # Check if user home exists and has content
          if [ -d "/home/${{ env.VPS_USER }}" ]; then
            echo "✅ User home directory exists"
            echo "📁 Contents:"
            ls -la /home/${{ env.VPS_USER }}/
            echo ""
            echo "💾 Disk usage:"
            du -sh /home/${{ env.VPS_USER }}
            echo ""
            echo "📋 File count:"
            find /home/${{ env.VPS_USER }} -type f | wc -l
          else
            echo "❌ User home directory missing!"
          fi

      # ===== FINAL SYSTEM REPORT =====
      - name: System status report
        if: always()
        run: |
          echo "=================================="
          echo "🖥️  VPS System Status Report"
          echo "=================================="
          echo "Hostname: $(hostname)"
          echo "Tailscale IP: $(tailscale ip -4)"
          echo "User: ${{ env.VPS_USER }}"
          echo "Home Directory: /home/${{ env.VPS_USER }}"
          echo "Session Duration: ${{ env.SESSION_TIMEOUT }}"
          echo "Backup Size: $(du -sh backup 2>/dev/null | cut -f1)"
          echo "Status: ${{ job.status }}"
          echo ""
          echo "📊 User Data:"
          echo "Home Size: $(du -sh /home/${{ env.VPS_USER }} 2>/dev/null | cut -f1 || echo 'Missing')"
          echo "Files: $(find /home/${{ env.VPS_USER }} -type f 2>/dev/null | wc -l || echo '0')"
          echo ""
          echo "🔧 Services Status:"
          systemctl is-active mysql 2>/dev/null && echo "✅ MySQL: Running" || echo "❌ MySQL: Not running"
          systemctl is-active apache2 2>/dev/null && echo "✅ Apache: Running" || echo "❌ Apache: Not running"
          systemctl is-active nginx 2>/dev/null && echo "✅ Nginx: Running" || echo "❌ Nginx: Not running"
          systemctl is-active tailscale 2>/dev/null && echo "✅ Tailscale: Running" || echo "❌ Tailscale: Not running"
          echo "=================================="

      # ===== CLEANUP =====
      - name: Cleanup temporary files
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          sudo rm -rf restore/ backup/ artifact-link.txt
          echo "✅ Cleanup completed"
