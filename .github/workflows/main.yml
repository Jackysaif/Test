
name: 🕷️ Spidey VPS - Persistent Session Workflow

on:
  workflow_dispatch:
    inputs:
      force_fresh_install:
        description: '🔄 Force fresh installation (ignore backups)'
        required: false
        default: 'false'
        type: boolean
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 400  # 6.5 hours to account for overhead
    
    steps:
    - name: 🕸️ Web-Slinging Setup - Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🕷️ Spider-Sense Activated - Initialize Environment
      run: |
        echo "🕷️ Welcome to Spidey's VPS! Your friendly neighborhood server is starting up..."
        echo "🌟 Setting hostname to Spidey..."
        sudo hostnamectl set-hostname Spidey
        echo "✨ Spidey VPS Session Started at $(date)"
        
    - name: 🛠️ Installing Web-Crawler Tools - Setup rclone
      run: |
        echo "🔧 Installing rclone for our web of backups..."
        curl https://rclone.org/install.sh | sudo bash
        echo "✅ rclone installed successfully!"
        
    - name: 🕸️ Weaving the MEGA Connection
      run: |
        echo "🔗 Setting up MEGA remote connection..."
        mkdir -p ~/.config/rclone
        echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf || {
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
        }
        echo "🌐 MEGA connection established!"
        
    - name: 🔍 Spider-Sense: Searching for Previous Backup Artifacts
      id: artifact_search
      continue-on-error: true
      run: |
        echo "🕵️ Searching for previous VPS backup artifacts..."
        echo "🔎 Looking for vps-backup.tar.gz in recent workflow runs..."
        # This step will be handled by the restore step below
        echo "artifact_available=checking" >> $GITHUB_OUTPUT
        
    - name: 📦 Attempting Artifact Recovery
      id: artifact_restore
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: vps-backup
        path: ./restore/
        
    - name: 🕷️ Web of Restoration - Primary Restore Logic
      id: restore_logic
      run: |
        echo "🕸️ Initiating Spidey's restoration sequence..."
        RESTORE_SUCCESS=false
        
        # Step 1: Try artifact restore
        if [ "${{ inputs.force_fresh_install }}" != "true" ] && [ -f "./restore/vps-backup.tar.gz" ]; then
          echo "📦 Found GitHub artifact! Restoring from web of memories..."
          cd /
          sudo tar -xzf "$GITHUB_WORKSPACE/restore/vps-backup.tar.gz"
          if [ $? -eq 0 ]; then
            echo "✅ Artifact restore successful! Spidey's previous state recovered!"
            RESTORE_SUCCESS=true
          else
            echo "❌ Artifact restore failed. Web got tangled..."
          fi
        fi
        
        # Step 2: Try MEGA restore if artifact failed
        if [ "$RESTORE_SUCCESS" = "false" ] && [ "${{ inputs.force_fresh_install }}" != "true" ]; then
          echo "🌐 Attempting MEGA restore from the cloud web..."
          rclone copy mega:vps-backups/latest-vps-backup.tar.gz ./restore/ || true
          if [ -f "./restore/latest-vps-backup.tar.gz" ]; then
            echo "📥 MEGA backup found! Downloading from the web..."
            cd /
            sudo tar -xzf "$GITHUB_WORKSPACE/restore/latest-vps-backup.tar.gz"
            if [ $? -eq 0 ]; then
              echo "✅ MEGA restore successful! Spidey swung back to previous state!"
              RESTORE_SUCCESS=true
            else
              echo "❌ MEGA restore failed. Even Spider-Man falls sometimes..."
            fi
          else
            echo "🔍 No MEGA backup found. Time for a fresh start!"
          fi
        fi
        
        echo "restore_success=$RESTORE_SUCCESS" >> $GITHUB_OUTPUT
        
    - name: 🆕 Fresh Web Installation - New Spidey Setup
      if: steps.restore_logic.outputs.restore_success == 'false'
      run: |
        echo "🕷️ No previous state found! Setting up a brand new Spidey VPS..."
        echo "🏗️ Building from scratch with great power and responsibility!"
        
    - name: 👤 Creating Spider-Squad User
      run: |
        echo "👤 Creating user jacky (part of the Spider-Squad)..."
        sudo useradd -m -s /bin/bash jacky || echo "👤 User jacky already exists!"
        echo "jacky:spidey" | sudo chpasswd
        sudo usermod -aG sudo jacky
        echo "✅ jacky added to the Spider-Squad with sudo powers!"
        
    - name: 🕸️ Installing Tailscale - Web of Networks
      run: |
        echo "🌐 Installing Tailscale for our secret spider network..."
        curl -fsSL https://tailscale.com/install.sh | sh
        
        if [ -d "/var/lib/tailscale" ] && [ "${{ steps.restore_logic.outputs.restore_success }}" = "true" ]; then
          echo "🔄 Restoring previous Tailscale identity..."
          sudo systemctl start tailscaled
        else
          echo "🆕 Registering new Tailscale node..."
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname="spidey-vps"
        fi
        echo "✅ Tailscale web connected!"
        
    - name: 🖥️ Installing aaPanel - Spidey's Control Center
      run: |
        echo "🕸️ Installing aaPanel v7.0 - Spidey's web control center..."
        wget -O install.sh http://www.aapanel.com/script/install_7.0_en.sh
        echo "y" | echo "yes" | sudo bash install.sh
        
        echo "👨‍💻 Configuring aaPanel with Spidey credentials..."
        sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py panel Jacky
        sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py password spidey
        echo "✅ aaPanel configured for the Spider-Squad!"
        
    - name: 🗄️ MariaDB Setup - Spidey's Data Web
      run: |
        echo "🕸️ Setting up MariaDB - where Spidey stores all his web data..."
        sudo apt update
        sudo apt install -y mariadb-server mariadb-client
        
        sudo systemctl start mariadb
        sudo systemctl enable mariadb
        
        echo "🔐 Securing MariaDB with spider-level security..."
        sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';"
        sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS test;"
        echo "✅ MariaDB web of data is ready!"
        
    - name: 🔄 Service Restoration Check
      if: steps.restore_logic.outputs.restore_success == 'true'
      run: |
        echo "🔄 Ensuring all Spider-Services are running after restoration..."
        sudo systemctl restart mariadb || echo "⚠️ MariaDB restart failed"
        sudo systemctl restart bt || echo "⚠️ aaPanel restart failed"
        sudo systemctl status mariadb
        echo "✅ Service restoration check completed!"
        
    - name: 🕷️ Spider-Session Loop - 6 Hour Web Patrol
      run: |
        echo "🕸️ Starting Spidey's 6-hour patrol of the digital web..."
        echo "🚨 Spider-Sense: Monitoring for /tmp/stop signal..."
        
        END_TIME=$(($(date +%s) + 21000))  # ~5.8 hours
        
        while [ $(date +%s) -lt $END_TIME ]; do
          if [ -f "/tmp/stop" ]; then
            echo "🛑 Stop signal detected! Spidey is preparing to swing away..."
            break
          fi
          
          echo "🕷️ [$(date)] Spidey is on patrol... All systems web-slingin' normally!"
          sleep 300  # Check every 5 minutes
        done
        
        echo "⏰ Patrol time ending or stop signal received!"
        
    - name: 📦 Creating Backup Manifest - Spidey's Memory Web
      run: |
        echo "📝 Creating Spidey's backup manifest..."
        mkdir -p /tmp/spidey-backup
        
        cat > /tmp/spidey-backup/backup-manifest.txt << 'EOF'
        🕷️ SPIDEY VPS BACKUP MANIFEST 🕷️
        Created: $(date)
        Hostname: $(hostname)
        
        📁 Backup Contents:
        - /home (Spider-Squad home directories)
        - /root (Root spider lair)
        - /etc (System web configurations)
        - /var/www (Web content)
        - /opt (Optional spider tools)
        - /var/lib/tailscale (Secret network state)
        - /var/lib/mysql (Data web)
        - aaPanel data (/www)
        
        🕸️ With great power comes great backup responsibility!
        EOF
        
        echo "✅ Backup manifest created!"
        
    - name: 🗜️ Weaving the Backup Archive
      run: |
        echo "🕸️ Weaving all important data into Spidey's backup web..."
        
        sudo tar -czf /tmp/spidey-backup/vps-backup.tar.gz \
          --exclude='/home/*/.*cache*' \
          --exclude='/var/lib/mysql/mysql.sock*' \
          --exclude='/var/lib/mysql/ib_logfile*' \
          /home \
          /root \
          /etc/hostname \
          /etc/hosts \
          /etc/ssh \
          /etc/crontab \
          /var/www \
          /opt \
          /var/lib/tailscale \
          /var/lib/mysql \
          /www \
          /tmp/spidey-backup/backup-manifest.txt \
          2>/dev/null || true
          
        echo "📏 Backup size: $(du -h /tmp/spidey-backup/vps-backup.tar.gz)"
        echo "✅ Backup web successfully woven!"
        
    - name: 🕸️ GitHub Artifact Web Storage
      uses: actions/upload-artifact@v4
      with:
        name: vps-backup
        path: /tmp/spidey-backup/vps-backup.tar.gz
        retention-days: 30
        
    - name: 🌐 MEGA Cloud Web Backup
      continue-on-error: true
      run: |
        echo "🕸️ Uploading to MEGA cloud web for redundancy..."
        
        rclone copy /tmp/spidey-backup/vps-backup.tar.gz mega:vps-backups/latest-vps-backup.tar.gz
        rclone copy /tmp/spidey-backup/vps-backup.tar.gz mega:vps-backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz
        
        # Try to generate a public link
        MEGA_LINK=$(rclone link mega:vps-backups/latest-vps-backup.tar.gz 2>/dev/null || echo "Link generation failed")
        echo "$MEGA_LINK" > /tmp/mega-backup-link.txt
        
        echo "🔗 MEGA backup link: $MEGA_LINK"
        echo "✅ Backup successfully uploaded to the cloud web!"
        
    - name: 🕷️ Final Web Status Report
      run: |
        echo "🕷️ SPIDEY VPS SESSION COMPLETE! 🕷️"
        echo "⏰ Session ended at: $(date)"
        echo "🕸️ All systems secured in the web of backups!"
        echo "💾 GitHub Artifact: ✅ Created"
        echo "☁️ MEGA Cloud: ✅ Uploaded"
        echo "🚀 Ready for next web-slinging session!"
        echo ""
        echo "🕸️ Remember: With great VPS power comes great backup responsibility! 🕸️"
