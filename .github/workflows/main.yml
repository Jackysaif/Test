name: Persistent VPS

on:
  schedule:
    # Runs automatically every 6 hours to refresh the session.
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allows for manual triggering of the workflow from the Actions tab.

env:
  # Configuration for the backup archive.
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  # Rclone remote and path for cloud storage.
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    # Set a generous timeout. GitHub Actions max is 6 hours (360 minutes).
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write  # Added permission for upload-artifact

    steps:
      - name: 'üï∏Ô∏è Checkout Code'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Initial Setup & Restore Logic
      # ------------------------------------------------------------------

      - name: 'üîß Install Core Tools (One-Time Setup)'
        run: |
          set -euo pipefail
          echo "üåê Updating package list..."
          sudo apt-get update -qq

          echo "üê≥ Installing Docker from official script..."
          curl -fsSL https://get.docker.com | sudo sh

          echo "‚òÅÔ∏è Installing Rclone from official script..."
          curl -fsSL https://rclone.org/install.sh | sudo bash
          
          echo "üì¶ Installing other necessary system tools..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            tar gzip psmisc screen openssh-server mariadb-server \
            mariadb-client wget unzip htop nano vim git net-tools tmate jq
          
          echo "‚úÖ All required tools are installed."

      - name: 'üõ†Ô∏è Configure Rclone'
        run: |
          set -euo pipefail
          echo "üîê Setting up rclone configuration from secrets..."
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "‚ùå ERROR: RCLONE_CONFIG secret is missing or empty!" >&2
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "‚úÖ Rclone configured successfully."

      - name: '‚ôªÔ∏è Restore from Backup OR Initialize'
        id: restore
        run: |
          set -euo pipefail
          echo "üîé Checking for existing backup link on MEGA..."

          # Try to get the artifact link from MEGA
          ARTIFACT_LINK=$(rclone cat "${MEGA_REMOTE}/latest_backup_link.txt" 2>/dev/null || true)

          if [[ -n "$ARTIFACT_LINK" ]]; then
            echo "‚úÖ Backup link found! Preparing to download and restore..."
            echo "artifact_url=${ARTIFACT_LINK}" >> $GITHUB_OUTPUT
            echo "is_new_install=false" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No backup link found on MEGA. The system will be set up as a fresh installation."
            echo "is_new_install=true" >> $GITHUB_OUTPUT
          fi

      - name: 'üì• Download Backup Artifact'
        if: steps.restore.outputs.is_new_install == 'false'
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          url: ${{ steps.restore.outputs.artifact_url }}
          path: /tmp/restore
          name: ${{ env.BACKUP_NAME }}

      - name: 'üìÇ Restore from Downloaded Backup'
        if: steps.restore.outputs.is_new_install == 'false'
        run: |
          set -euo pipefail
          echo "üìÇ Restoring system state from backup..."
          sudo tar -xzpf "/tmp/restore/${BACKUP_NAME}" -C /
          echo "‚úÖ System restore complete."

      # ------------------------------------------------------------------
      # Part 2: Fresh Installation Steps (Conditional)
      # ------------------------------------------------------------------

      - name: 'üóÑÔ∏è Configure MariaDB (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "üóÑÔ∏è Performing fresh configuration of MariaDB..."
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          
          echo "üîí Securing MariaDB installation..."
          if [[ -z "${{ secrets.DB_ROOT_PASSWORD || '' }}" ]]; then
             echo "‚ùå ERROR: DB_ROOT_PASSWORD secret is not set for fresh install!" >&2
             exit 1
          fi
          
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('${{ secrets.DB_ROOT_PASSWORD }}');"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "DELETE FROM mysql.user WHERE User='';"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "DROP DATABASE IF EXISTS test;"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "FLUSH PRIVILEGES;"
          echo "‚úÖ MariaDB security configuration complete."

      - name: 'üë§ Initial User & Hostname Setup (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "üë§ Setting up user, password, and hostname..."
          sudo useradd -m -s /bin/bash jacky || echo "User 'jacky' already exists, skipping."
          echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts
          echo "‚úÖ System user and hostname configured."

      - name: 'üì¶ Install Aapanel (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "üì• Downloading and installing Aapanel..."
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
          timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || echo "‚ö†Ô∏è Aapanel installation timed out or failed. Check logs."
          
          if command -v bt >/dev/null 2>&1; then
            echo "‚úÖ Aapanel installed. Setting default credentials..."
            sleep 5
            echo "Jacky" | sudo bt 6
            echo "spidey" | sudo bt 5
          fi

      # ------------------------------------------------------------------
      # Part 3: Service Start & Session (Runs on every execution)
      # ------------------------------------------------------------------

      - name: 'üöÄ Start All Services'
        run: |
          set -euo pipefail
          echo "üîÑ Configuring and starting all system services..."
          
          echo "Reloading systemd manager configuration..."
          sudo systemctl daemon-reload
          
          sudo systemctl enable ssh mariadb docker
          sudo systemctl start ssh
          sudo systemctl start mariadb
          sudo systemctl start docker
          
          if command -v bt >/dev/null 2>&1; then
            echo "üéõÔ∏è Starting Aapanel..."
            sudo bt start
          fi
          
          echo "üìä Final Service Status Check:"
          for service in ssh mariadb docker; do
            if systemctl is-active --quiet $service; then
              echo "  ‚úÖ $service is active."
            else
              echo "  ‚ùå $service is INACTIVE."
            fi
          done

      - name: 'üîó Configure Remote Access (Tailscale & tmate)'
        run: |
          set -euo pipefail
          echo "üï∏Ô∏è Setting up Tailscale VPN for secure access..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "‚ùå ERROR: TAILSCALE_AUTHKEY secret is missing!" >&2
            exit 1
          fi
          
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes
          
          echo "üí¨ Starting tmate for emergency SSH access..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          
          echo "================================================"
          echo "üéâ          VPS IS READY FOR CONNECTION         üéâ"
          echo "================================================"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          echo "üîë tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if command -v bt >/dev/null 2>&1; then
            echo ""
            echo "üéõÔ∏è Aapanel Panel Details:"
            sudo bt default || true
          fi
          echo "================================================"

      - name: '‚è≥ Maintain VPS Session'
        run: |
          echo "üñ•Ô∏è VPS session is running. This step will time out after ~5.5 hours."
          echo "To stop the session gracefully and trigger the backup early, create a file: touch /tmp/stop"
          
          end_time=$((SECONDS + 19800))
          
          while [ $SECONDS -lt $end_time ]; do
            if [ -f "/tmp/stop" ]; then
              echo "‚úÖ Graceful shutdown signal detected. Exiting session."
              rm -f "/tmp/stop"
              exit 0
            fi
            sleep 60
          done
          
          echo "‚è∞ Session duration reached. Proceeding to backup."

      # ------------------------------------------------------------------
      # Part 4: Backup Creation (Always runs at the end)
      # ------------------------------------------------------------------
      - name: 'üì¶ Create Full System Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "üì¶ Creating comprehensive system backup..."
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          echo "üõë Stopping services for a clean, consistent backup..."
          if command -v bt >/dev/null 2>&1; then sudo bt stop; fi
          sudo systemctl stop ssh mariadb tailscaled docker
          sleep 5
          
          BACKUP_PATHS="
            /etc/
            /home/
            /root/
            /var/lib/docker/
            /var/lib/mysql/
            /var/www/
            /var/spool/cron/
            /var/lib/dpkg/
            /var/lib/tailscale/
            /opt/
            /srv/
            /www/
          "
          
          echo "Creating optimized backup archive..."
          # The '-v' flag has been removed to prevent log truncation.
          sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --warning=no-file-changed \
            --exclude='*.log*' --exclude='*.pid' --exclude='*.sock' \
            $BACKUP_PATHS
          
          BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
          echo "‚úÖ Optimized backup created successfully. Size: $BACKUP_SIZE"

      - name: '‚¨ÜÔ∏è Upload Backup to GitHub Artifacts'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKUP_NAME }}
          path: ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}
          retention-days: 7  # Store for 7 days

      - name: 'üîó Get Artifact Direct Link and Upload to MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "üîó Getting direct link for the uploaded artifact..."

          # Note: The 'jq' tool is now installed in the setup step for this to work.
          ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')

          ARTIFACT_LINK="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"

          echo "üóëÔ∏è Removing old link file from MEGA..."
          rclone delete "${MEGA_REMOTE}/latest_backup_link.txt" || echo "No old link file to remove, proceeding."

          echo "üì§ Uploading new artifact link to MEGA..."
          echo "$ARTIFACT_LINK" | rclone rcat "${MEGA_REMOTE}/latest_backup_link.txt"

          echo "‚úÖ New link uploaded complete."
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: 'üìã Final Status Report'
        if: always()
        run: |
          echo "============================================="
          echo "         ‚úÖ VPS SESSION COMPLETE ‚úÖ"
          echo "============================================="
          echo "Job Status: ${{ job.status }}"
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "The session completed normally and the backup was successful."
          else
            echo "The session failed or was cancelled. A backup was still attempted."
          fi
          echo "============================================="
