name: Continuous Persistent VPS

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"   # Run every 6 hours

jobs:
  vps-session:
    runs-on: ubuntu-22.04
    timeout-minutes: 380  # 6h20m to allow backup before job ends

    steps:
    # ============================================================
    # 0. Prep Environment
    # ============================================================
    - name: ‚ö° Update & Install Essentials
      run: |
        sudo apt-get update
        sudo apt-get install -y sudo curl unzip zip tmate neofetch net-tools rclone

    # ============================================================
    # 1. Configure rclone
    # ============================================================
    - name: ‚òÅÔ∏è Configure rclone
      run: |
        echo "‚öôÔ∏è Setting up rclone configuration..."
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf <<EOF
[gdrivveed]
type = drive
client_id = 534417340383-f4b86oa9dffhjuhdh4ekd38b0l9llnum.apps.googleusercontent.com
client_secret = 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
scope = drive
root_folder_id = appDataFolder
token = {"access_token":"ya29.A0AS3H6Ny6o1OvniaMus3wYXmmqBbanb_MNJmGTEfrQoBCbR_qTGcDCyGrObAOymSrxJ1Nq3g9Rd7JYyvPyD6L4vmgOwuJxEuePxz7--w3-Rl18LBNve5-1s8UVy0T_0VZOnn8TNqVdvScS9atFE8lUu4uPZxwb1ditSB3f9mqzZZOJAiKIXG31PHH9wu8XVdaLSq40pcaCgYKAbcSARQSFQHGX2MizZMgdAx4L1I4h9UJZKs6AQ0206","token_type":"Bearer","refresh_token":"1//0g1VFlKVUuwKlCgYIARAAGBASNwF-L9IrGhVBSYCiWVLzMiBL5VSP4_neIDcsmPELBjeHMIYSmA057I-AxPy2SAXr0nm-6vRRhUQ","expiry":"2025-08-31T15:42:32.953801261Z","expires_in":3599}
team_drive =
EOF

    # ============================================================
    # 2. Create User & Password
    # ============================================================
    - name: üë§ Create User
      run: |
        sudo useradd -m -s /bin/bash jacky
        echo "jacky:root" | sudo chpasswd
        sudo usermod -aG sudo jacky
        echo "‚úÖ User 'jacky' created with password 'root'"

    # ============================================================
    # 3. Restore Tailscale State
    # ============================================================
    - name: üîë Restore Tailscale state if exists
      run: |
        sudo mkdir -p /var/lib/tailscale
        if rclone ls gdrivveed:vps-backup/system/tailscaled.state >/dev/null 2>&1; then
          echo "üî• Found Tailscale state. Restoring..."
          sudo rclone copy gdrivveed:vps-backup/system/tailscaled.state /var/lib/tailscale/ --progress || true
          sudo chown root:root /var/lib/tailscale/tailscaled.state
          sudo chmod 600 /var/lib/tailscale/tailscaled.state
          echo "TS_STATE_RESTORED=true" >> $GITHUB_ENV
        else
          echo "‚ÑπÔ∏è No Tailscale state found."
          echo "TS_STATE_RESTORED=false" >> $GITHUB_ENV
        fi

    # ============================================================
    # 4. Install & Connect Tailscale
    # ============================================================
    - name: üåê Install & Start Tailscale
      run: |
        curl -fsSL https://tailscale.com/install.sh | sh
        if [ "$TS_STATE_RESTORED" = "true" ]; then
          echo "üîÑ Reusing old Tailscale state..."
          sudo systemctl restart tailscaled
          sudo tailscale up --reset --accept-routes --accept-dns
        else
          echo "üÜï No state found. Logging in fresh..."
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname "github-vps" --accept-routes --accept-dns
          echo "üìÇ Backing up new Tailscale state"
          sudo rclone copy /var/lib/tailscale/tailscaled.state gdrivveed:vps-backup/system/ --progress
        fi
        echo "üåç VPS IP:" $(tailscale ip -4)

    # ============================================================
    # 5. Restore VPS Backup
    # ============================================================
    - name: üì¶ Restore VPS Backup
      run: |
        mkdir -p restore
        LATEST_BACKUP=$(rclone lsf gdrivveed:vps-backup/data/ | sort | tail -n 1 || true)
        if [ -n "$LATEST_BACKUP" ]; then
          echo "üìÇ Found VPS backup: $LATEST_BACKUP"
          rclone copy gdrivveed:vps-backup/data/$LATEST_BACKUP ./restore/
          for archive in ./restore/*.tar.gz; do
            echo "üì¶ Extracting $archive ..."
            sudo tar --ignore-failed-read -xzf "$archive" -C /
          done
        else
          echo "‚ÑπÔ∏è No VPS backup found."
        fi

    # ============================================================
    # 6. Keep Session Alive
    # ============================================================
    - name: ‚è≥ Keep Session Alive for 6h
      run: |
        echo "üîí VPS Session active for 6h..."
        sleep 21600  # 6h

    # ============================================================
    # 7. Backup VPS on Finish or Cancel
    # ============================================================
    - name: üíæ Backup VPS
      if: always()
      run: |
        BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        echo "üì¶ Creating VPS backup..."
        sudo tar --ignore-failed-read -czf $BACKUP_DIR/home.tar.gz /home || true
        sudo tar --ignore-failed-read -czf $BACKUP_DIR/etc.tar.gz /etc || true
        sudo tar --ignore-failed-read -czf $BACKUP_DIR/logs.tar.gz /var/log || true
        echo "‚òÅÔ∏è Uploading VPS backup to gdrivveed..."
        rclone copy $BACKUP_DIR gdrivveed:vps-backup/data/ --progress
        echo "‚òÅÔ∏è Uploading Tailscale state..."
        sudo rclone copy /var/lib/tailscale/tailscaled.state gdrivveed:vps-backup/system/ --progress || true
        echo "‚úÖ Backup complete!"
