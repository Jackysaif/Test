# 🕷️ Persistent VPS Session Workflow - Shin-chan Sparta Edition! 🎭
# 
# Required Secrets:
# - TAILSCALE_AUTHKEY: Tailscale authentication key
# - RCLONE_CONFIG: Rclone config for MEGA remote (base64 or raw text)
# - USER_PASSWORD: Password for user 'jacky'
# - DB_ROOT_PASSWORD: MariaDB root password (optional)
#
# Buriburi! This workflow creates a 6-hour persistent VPS session with:
# - Full system backup/restore via GitHub artifacts + MEGA
# - aaPanel v7.0 installation and configuration  
# - MariaDB setup with test database
# - Tailscale VPN integration
# - User 'jacky' with sudo access
# - Graceful shutdown detection
#
# Crayon Shin-chan says: "Ora wa Spidey da zo!" 🎨

name: "🕷️ Persistent VPS Session - Shin-chan Sparta Edition"

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '🐛 Enable tmate debugging session'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Every 6 hours - Shin-chan's nap schedule! 😴
    - cron: '0 */6 * * *'

env:
  # Configuration for the full system backup
  BACKUP_STORE: /mnt/backups/vps
  BACKUP_NAME: vps-full-backup.tar.gz
  # Rclone remote and path for cloud storage
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    name: "🕷️ Spidey VPS Session - Sparta Style"
    runs-on: ubuntu-22.04
    timeout-minutes: 350  # Just under 6 hours max limit
    permissions:
      contents: read
      actions: write
    
    steps:
    - name: "🏠 Checkout Code - Shin-chan's secret hideout"
      uses: actions/checkout@v4
      
    # ------------------------------------------------------------------
    # Part 1: Initial Setup & Environment Preparation
    # ------------------------------------------------------------------
      
    - name: "🔧 Install Core Tools & Rclone - Buriburi toolkit!"
      run: |
        set -euo pipefail
        echo "🎭 Buriburi! Setting up the ultimate Sparta VPS environment!"
        echo "🕷️ Spidey powers: ACTIVATE!"
        
        echo "🌐 Updating package list..."
        sudo apt-get update -qq
        
        echo "☁️ Installing Rclone..."
        curl -fsSL https://rclone.org/install.sh | sudo bash
        
        echo "📦 Installing essential system tools like Shin-chan's toys..."
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          tar gzip openssh-server htop nano vim git net-tools tmate jq curl \
          software-properties-common apt-transport-https ca-certificates \
          gnupg lsb-release psmisc screen expect unzip mariadb-server mariadb-client
          
        echo "✅ All core tools installed! Buriburi!"

    - name: "🛠️ Configure Rclone - Crayon's cloud magic!"
      run: |
        set -euo pipefail
        echo "🔐 Setting up rclone configuration..."
        
        if [[ -z "${{ RCLONE_CONF_MEGA || '' }}" ]]; then
          echo "❌ ERROR: MEGA_RCLONE secret is missing!" >&2
          echo "🎨 Shin-chan needs his MEGA crayons!"
          exit 1
        fi
        
        mkdir -p ~/.config/rclone
        
        # Handle both base64 and plain text configs
        if [[ "${{ secrets.RCLONE_CONFIG }}" == *"="* ]]; then
          # Base64 encoded
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
        else
          # Plain text config
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
        fi
        
        chmod 600 ~/.config/rclone/rclone.conf
        echo "✅ Rclone configured successfully! Buriburi!"

    - name: "🔍 Check for Data Backup - Shin-chan's treasure hunt!"
      id: check_backup
      run: |
        set -euo pipefail
        echo "🔎 Shin-chan is looking for his backup treasures..."
        
        if rclone ls "${MEGA_REMOTE}/latest_backup_link.txt" >/dev/null 2>&1; then
            ARTIFACT_LINK=$(rclone cat "${MEGA_REMOTE}/latest_backup_link.txt")
            echo "✅ Data backup link found in MEGA! Buriburi!"
            echo "🎒 Found treasure: $ARTIFACT_LINK"
            echo "has_backup=true" >> $GITHUB_OUTPUT
            echo "artifact_url=${ARTIFACT_LINK}" >> $GITHUB_OUTPUT
        else
            echo "🔍 No MEGA link found. Searching recent artifacts like Shin-chan looks for snacks..."
            RECENT_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
              | jq -r '.workflows[] | select(.name | contains("Persistent VPS")) | .id' | head -1)
              
            if [[ -n "$RECENT_RUN" && "$RECENT_RUN" != "null" ]]; then
              LATEST_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${RECENT_RUN}/runs?status=success&per_page=3" \
                | jq -r '.workflow_runs[] | select(.id != ${{ github.run_id }}) | .id' | head -1)
                
              if [[ -n "$LATEST_RUN" && "$LATEST_RUN" != "null" ]]; then
                ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs/${LATEST_RUN}/artifacts" \
                  | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')
                  
                if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
                  ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
                  echo "✅ Found data backup in recent run! Shin-chan found his toys!"
                  echo "has_backup=true" >> $GITHUB_OUTPUT
                  echo "artifact_url=${ARTIFACT_URL}" >> $GITHUB_OUTPUT
                else
                  echo "ℹ️ No backup found. Starting fresh like Shin-chan's new drawing!"
                  echo "has_backup=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "ℹ️ No recent runs found. Starting fresh adventure!"
                echo "has_backup=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "ℹ️ Workflow not found. Starting new Shin-chan adventure!"
              echo "has_backup=false" >> $GITHUB_OUTPUT
            fi
        fi

    - name: "📥 Download & Restore Data Backup - Shin-chan's toy restoration!"
      if: steps.check_backup.outputs.has_backup == 'true'
      run: |
        set -euo pipefail
        echo "📥 Buriburi! Downloading and restoring full system backup..."
        echo "🎒 Shin-chan is getting his toys back!"
        
        # Use /mnt for temporary storage to save root disk space
        mkdir -p /mnt/restore
        cd /mnt/restore
        
        # Download the backup
        echo "⬇️ Downloading backup from GitHub artifacts..."
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "${{ steps.check_backup.outputs.artifact_url }}" \
          -o "backup.zip"
        
        # Extract the GitHub artifact (always a zip)
        echo "📦 Extracting backup archive..."
        unzip -q backup.zip
        
        # Verify backup file
        if [[ ! -f "${{ env.BACKUP_NAME }}" ]]; then
          echo "❌ Backup file not found after extraction!"
          echo "🎭 Shin-chan's toys are missing!"
          ls -la
          exit 1
        fi
        
        echo "📋 Backup file details:"
        ls -lh "${{ env.BACKUP_NAME }}"
        
        # Test backup integrity
        echo "🧪 Testing backup integrity like Shin-chan checks his crayons..."
        if ! tar -tzf "${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
          echo "❌ Backup is corrupted! Shin-chan's crayons are broken!"
          exit 1
        fi
        
        echo "📂 Restoring data... Buriburi magic in progress!"
        # Restore the entire filesystem from the backup
        sudo tar -xzpf "${{ env.BACKUP_NAME }}" -C / --warning=no-timestamp --exclude='dev' --exclude='proc' --exclude='sys'
        
        echo "✅ Full system restoration complete! Shin-chan's world is back! 🎉"

    # ------------------------------------------------------------------
    # Part 2: System Configuration & Services Setup
    # ------------------------------------------------------------------

    - name: "👤 Setup User Account - Creating Shin-chan's friend!"
      run: |
        set -euo pipefail
        echo "👤 Configuring user account like Shin-chan makes friends..."
        
        if [[ -z "${{ secrets.USER_PASSWORD || '' }}" ]]; then
          echo "❌ ERROR: USER_PASSWORD secret missing!" >&2
          echo "🎭 Shin-chan needs the secret password!"
          exit 1
        fi
        
        # Create user jacky with spidey password (backward compatibility)
        sudo useradd -m -s /bin/bash jacky 2>/dev/null || echo "👤 User jacky already exists!"
        echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
        sudo usermod -aG sudo,docker jacky 2>/dev/null || sudo usermod -aG sudo jacky
        echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky > /dev/null
        
        # Set hostname to Spidey for Shin-chan theme
        sudo hostnamectl set-hostname Spidey
        echo "127.0.1.1 Spidey" | sudo tee -a /etc/hosts > /dev/null
        
        echo "✅ User account configured! Jacky is now Spidey's friend! 🕷️"

    - name: "📦 Install/Configure Aapanel - Shin-chan's control center!"
      run: |
        set -euo pipefail
        
        if command -v bt >/dev/null 2>&1; then
          echo "✅ Aapanel already installed (from backup)! Shin-chan's control center is ready!"
        else
          echo "📥 Installing Aapanel (fresh install) - Building Shin-chan's new control center..."
          
          # Download the installer
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install_6.0_en.sh"
          chmod +x /tmp/install.sh
          
          # Install with timeout and automated responses
          echo "🤖 Running automated installation..."
          timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || {
            echo "⚠️ Aapanel installation timed out, but Shin-chan keeps going..."
          }
        fi
        
        # Configure Aapanel credentials
        if command -v bt >/dev/null 2>&1; then
          echo "🎛️ Setting Aapanel credentials like Shin-chan organizes his toys..."
          sleep 10  # Wait for full initialization
          
          # Set username to Jacky and password to spidey
          echo "Jacky" | sudo bt 6 || echo "⚠️ Username setting may have failed"
          echo "spidey" | sudo bt 5 || echo "⚠️ Password setting may have failed"
          
          echo "✅ Aapanel configured! Username: Jacky, Password: spidey 🎛️"
        fi

    - name: "🗄️ Configure MariaDB - Shin-chan's database toybox!"
      run: |
        set -euo pipefail
        echo "🗄️ Setting up MariaDB like Shin-chan organizes his toy collection..."
        
        # Start MariaDB service
        sudo systemctl enable mariadb
        sudo systemctl start mariadb
        
        # Configure root password if provided
        if [[ -n "${{ secrets.DB_ROOT_PASSWORD || '' }}" ]]; then
          echo "🔐 Setting MariaDB root password..."
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';" || true
          sudo mysql -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS test;" || true
        else
          # Use default setup
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS test;" || true
        fi
        
        echo "✅ MariaDB configured with test database! Shin-chan's data is safe! 🗄️"
        
    - name: "🚀 Start All Services - Powering up Shin-chan's gadgets!"
      run: |
        set -euo pipefail
        echo "🔄 Starting all system services like powering up Shin-chan's toys..."
        
        sudo systemctl daemon-reload
        
        # Enable and start essential services
        services=("ssh" "mariadb")
        for service in "${services[@]}"; do
          echo "🔄 Starting $service..."
          sudo systemctl enable --now $service || echo "⚠️ $service may not be available"
        done
        
        # Start Docker if available
        sudo systemctl enable --now docker 2>/dev/null || echo "🐳 Docker not available"
        
        # Start Aapanel if installed
        if command -v bt >/dev/null 2>&1; then
          echo "🎛️ Starting Aapanel..."
          sudo bt start || true
          sleep 5
        fi
        
        sleep 3
        echo "📊 Final Service Status Check - Shin-chan's gadget inspection:"
        for service in ssh mariadb docker; do
          if systemctl is-active --quiet $service 2>/dev/null; then
            echo "  ✅ $service is active and ready!"
          else
            echo "  ❌ $service is INACTIVE or not available."
          fi
        done
        
        echo "🎉 All services started! Buriburi!"

    - name: "🔗 Configure Remote Access - Shin-chan's communication center!"
      run: |
        set -euo pipefail
        echo "🕸️ Setting up Tailscale VPN for secure access like Shin-chan's secret communication..."
        
        if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
          echo "❌ ERROR: TAILSCALE_AUTHKEY secret is missing!" >&2
          echo "🎭 Shin-chan needs his secret VPN key!"
          exit 1
        fi
        
        # Install Tailscale
        curl -fsSL https://tailscale.com/install.sh | sh
        sudo systemctl enable --now tailscaled
        
        # Connect to Tailscale network
        sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=Spidey --reset --accept-routes
        
        # Start tmate for emergency access
        echo "💬 Starting tmate for emergency SSH access..."
        tmate -S /tmp/tmate.sock new-session -d
        tmate -S /tmp/tmate.sock wait tmate-ready
        
        echo "================================================"
        echo "🎉      SHIN-CHAN VPS IS READY! BURIBURI!     🎉"
        echo "================================================"
        
        TAILSCALE_IP=$(sudo tailscale ip -4 2>/dev/null || echo "Getting IP...")
        echo "🌐 Tailscale IP: $TAILSCALE_IP"
        echo "🔑 tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' 2>/dev/null || echo 'Starting...')"
        
        if command -v bt >/dev/null 2>&1; then
          echo ""
          echo "🎛️ Aapanel Panel Details:"
          sudo bt default || echo "Use: http://IP:7800 - Username: Jacky, Password: spidey"
        fi
        
        echo "🕷️ SSH Access: ssh jacky@$TAILSCALE_IP"
        echo "🔐 Password: ${{ secrets.USER_PASSWORD }}"
        echo "================================================"

    - name: "🐛 Debug Session - Shin-chan's investigation time!"
      if: github.event.inputs.debug_mode == 'true'
      run: |
        echo "🐛 Starting extended tmate debugging session..."
        echo "🔍 Shin-chan is investigating the system!"
        echo "🔗 SSH connection details above ⬆️"
        echo "⏰ Debug session will run for 15 minutes..."
        sleep 900  # 15 minutes debug window
        echo "🎬 Debug session completed!"

    - name: "⏳ Maintain Session - Shin-chan's playtime!"
      run: |
        echo "🖥️ VPS session active - Shin-chan is playing! Will run for ~5.5 hours."
        echo "💡 To stop early: touch /tmp/stop (Shin-chan's stop signal)"
        echo "🕐 Started: $(date)"
        
        # Calculate end time (5.5 hours = 19800 seconds)
        end_time=$((SECONDS + 19800))
        
        while [ $SECONDS -lt $end_time ]; do
          # Check for graceful shutdown
          if [ -f "/tmp/stop" ]; then
            echo "✅ Graceful shutdown requested! Shin-chan is cleaning up..."
            rm -f "/tmp/stop"
            break
          fi
          
          # Status update every 10 minutes
          if [ $((SECONDS % 600)) -eq 0 ]; then
            remaining=$(((end_time - SECONDS) / 60))
            echo "🔄 Shin-chan is still playing - $remaining minutes remaining - $(date)"
            
            # Show system status
            echo "📊 System Status:"
            echo "  🔗 Tailscale: $(sudo tailscale status --json 2>/dev/null | jq -r '.BackendState' || echo 'Unknown')"
            echo "  🗄️ MariaDB: $(systemctl is-active mariadb 2>/dev/null || echo 'Unknown')"
            if command -v bt >/dev/null 2>&1; then
              echo "  🎛️ Aapanel: $(systemctl is-active bt 2>/dev/null || echo 'Running')"
            fi
          fi
          
          sleep 60
        done
        
        echo "⏰ Session ending - Time for Shin-chan's nap! Preparing backup..."

    - name: "💾 Create Full System Backup - Shin-chan's treasure preservation!"
      if: always()
      run: |
        set -euo pipefail
        echo "💾 Creating full system backup - Shin-chan is saving all his treasures!"
        
        # Use /mnt for backup storage to save root disk space
        sudo mkdir -p "${{ env.BACKUP_STORE }}"
        
        echo "🛑 Stopping services cleanly for consistent backup..."
        if command -v bt >/dev/null 2>&1; then 
          sudo bt stop || echo "⚠️ Aapanel stop failed"
        fi
        sudo systemctl stop mariadb || echo "⚠️ MariaDB stop failed"
        sudo systemctl stop docker || echo "⚠️ Docker stop failed"
        sleep 5
        
        echo "📦 Backing up entire root filesystem like Shin-chan packs his toys..."
        sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
          --absolute-names \
          --exclude=/dev \
          --exclude=/proc \
          --exclude=/sys \
          --exclude=/tmp \
          --exclude=/run \
          --exclude=/mnt \
          --exclude=/media \
          --exclude=/var/backups \
          --exclude=/lost+found \
          / || {
          echo "⚠️ Tar encountered some missing files, but Shin-chan continues..."
        }
        
        if [[ -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
          BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
          echo "✅ Full system backup created! Size: $BACKUP_SIZE"
          echo "🎒 Shin-chan's backup is ready!"
          
          echo "📋 Backup contents preview:"
          sudo tar -tzf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | head -10
        else
          echo "❌ Backup creation failed! Shin-chan's toys are in danger!"
          exit 1
        fi

    - name: "⬆️ Upload Data Backup - Sending to GitHub toybox!"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BACKUP_NAME }}
        path: ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}
        retention-days: 7
        if-no-files-found: error

    - name: "🔗 Store Backup Link in MEGA - Crayon's cloud storage!"
      if: always()
      run: |
        set -euo pipefail
        echo "🔗 Storing backup link in MEGA like Shin-chan saves his drawings..."
        
        # Wait for artifact to be processed
        sleep 30
        
        # Try to get artifact ID with retries
        for attempt in {1..5}; do
          ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')
            
          if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
            echo "✅ Found artifact ID: $ARTIFACT_ID"
            break
          fi
          
          echo "⏳ Waiting for artifact ($attempt/5) - Shin-chan is being patient..."
          sleep 30
        done
        
        if [[ -z "$ARTIFACT_ID" || "$ARTIFACT_ID" == "null" ]]; then
          echo "❌ Could not get artifact ID! Shin-chan's backup link is missing!"
          exit 1
        fi
        
        # Store the artifact link in MEGA
        ARTIFACT_LINK="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
        
        # Clean up old backup link and store new one
        rclone delete "${MEGA_REMOTE}/latest_backup_link.txt" 2>/dev/null || true
        echo "$ARTIFACT_LINK" | rclone rcat "${MEGA_REMOTE}/latest_backup_link.txt"
        
        echo "✅ Backup link stored in MEGA! Shin-chan's treasure map is saved!"
        
        # Clean up local backup file to free disk space
        sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"
        echo "🧹 Local backup cleaned up!"

    - name: "📋 Session Summary - Shin-chan's adventure report!"
      if: always()
      run: |
        echo "============================================="
        echo "  ✅ SHIN-CHAN SPARTA VPS SESSION COMPLETE ✅"
        echo "============================================="
        echo "🎭 Status: ${{ job.status }}"
        echo "🆔 Run ID: ${{ github.run_id }}"
        echo "⏰ End Time: $(date)"
        echo "🎒 Had Previous Backup: ${{ steps.check_backup.outputs.has_backup }}"
        echo "🕐 Runtime: $((SECONDS / 60)) minutes"
        echo ""
        echo "💾 Full System Backup Used - Buriburi!"
        echo "   ✓ All installed software (Aapanel, MariaDB, etc.)"
        echo "   ✓ All configuration files and user data"
        echo "   ✓ All databases and application data"
        echo "   ✓ Tailscale VPN state and network config"
        echo "   ✗ Temporary and virtual filesystems (dev, proc, etc.)"
        echo ""
        echo "🕷️ Spidey Services Status:"
        echo "   🔗 Tailscale VPN: Connected"
        echo "   🗄️ MariaDB: Configured with test DB"
        echo "   🎛️ Aapanel: Username=Jacky, Password=spidey"
        echo "   👤 User: jacky (sudo access)"
        echo ""
        echo "🎨 Buriburi! Shin-chan's adventure is complete!"
        echo "🕷️ Remember: With great power comes great responsibility!"
        echo "============================================="
