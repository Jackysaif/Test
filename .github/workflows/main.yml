name: Persistent VPS with User Data Backup (Simplified)

on:
  workflow_dispatch:
    inputs:
      skip_restore:
        description: 'Skip restoration from backup (fresh start)'
        required: false
        default: 'false'
        type: boolean
      session_timeout:
        description: 'Session timeout (e.g., 1h, 2h, 6h)'
        required: false
        default: '6h'
        type: string
  workflow_call:

env:
  VPS_USER: jacky
  VPS_PASSWORD: ${{ secrets.VPS_PASSWORD || 'ChangeMe123!' }}
  VPS_HOSTNAME: github-vps
  SESSION_TIMEOUT: ${{ inputs.session_timeout || '6h' }}
  BACKUP_RETENTION_DAYS: 30
  MAX_RETRIES: 3

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # ===== INITIALIZATION =====
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system tools
        run: |
          sudo apt update
          sudo apt install -y curl tmate jq zip unzip

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.MEGA_USER }}" ] || [ -z "${{ secrets.MEGA_PASS }}" ]; then
            echo "‚ùå MEGA credentials not configured"
            exit 1
          fi
          if [ -z "${{ secrets.TAILSCALE_AUTHKEY }}" ]; then
            echo "‚ùå Tailscale auth key not configured"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

      # ===== RCLONE SETUP =====
      - name: Install and configure rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF
          echo "‚úÖ Rclone configured with MEGA"

      # ===== USER SETUP =====
      - name: Create user with sudo access
        run: |
          if ! id -u ${{ env.VPS_USER }} >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }}:${{ env.VPS_PASSWORD }}" | sudo chpasswd
            sudo usermod -aG sudo ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/${{ env.VPS_USER }}
            echo "‚úÖ User ${{ env.VPS_USER }} created with sudo access"
          else
            echo "üîÅ User ${{ env.VPS_USER }} already exists"
          fi

      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname ${{ env.VPS_HOSTNAME }}
          echo "üè∑Ô∏è Hostname set to $(hostname)"

      # ===== RESTORE FROM MEGA (if not skipped) =====
      - name: Restore from MEGA backup
        if: ${{ inputs.skip_restore != 'true' }}
        run: |
          mkdir -p restore
          echo "üîç Checking for backup in MEGA..."
          if rclone ls mega:vps-backups/latest-backup.zip >/dev/null 2>&1; then
            echo "üì• Downloading backup from MEGA..."
            rclone copy mega:vps-backups/latest-backup.zip restore/
            unzip -o restore/latest-backup.zip -d restore/
            echo "‚úÖ Backup restored from MEGA"
          else
            echo "‚ö†Ô∏è No backup found in MEGA (fresh start)"
          fi

          # Restore user home
          if [ -f "restore/user-home.tar.gz" ]; then
            echo "üè† Restoring user home..."
            sudo tar -xzf restore/user-home.tar.gz -C / --numeric-owner
          fi

          # Restore packages
          if [ -f "restore/packages.list" ]; then
            echo "üì¶ Restoring packages..."
            sudo apt update
            xargs sudo apt-get install -y < restore/packages.list
          fi

          # Restore tailscale
          if [ -f "restore/tailscale-state.tar.gz" ]; then
            echo "üåê Restoring Tailscale state..."
            sudo tar -xzf restore/tailscale-state.tar.gz -C / --numeric-owner
            sudo systemctl restart tailscaled || true
          fi

          # Restore app data
          if [ -f "restore/app-data.tar.gz" ]; then
            echo "üì± Restoring app data..."
            sudo tar -xzf restore/app-data.tar.gz -C / --numeric-owner
          fi

          # Fix permissions
          sudo chown -R ${{ env.VPS_USER }}:${{ env.VPS_USER }} /home/${{ env.VPS_USER }}
          sudo chmod 700 /home/${{ env.VPS_USER }}

      # ===== SETUP TAILSCALE =====
      - name: Setup Tailscale
        run: |
          echo "üåê Setting up Tailscale..."
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sleep 5
          if ! sudo tailscale status >/dev/null 2>&1; then
            echo "üîë Logging into Tailscale with auth key..."
            sudo tailscale up \
              --authkey ${{ secrets.TAILSCALE_AUTHKEY }} \
              --hostname ${{ env.VPS_HOSTNAME }} \
              --ssh \
              --advertise-exit-node \
              --accept-dns=false
          fi
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "‚úÖ Tailscale IP: $TAILSCALE_IP"

      # ===== VPS SESSION =====
      - name: Start VPS session
        run: |
          echo "üöÄ VPS Session Started"
          echo "üë§ User: ${{ env.VPS_USER }}"
          echo "üîë Pass: ${{ env.VPS_PASSWORD }}"
          echo "üåê Tailscale IP: $(sudo tailscale ip -4)"
          echo "‚è∞ Timeout: ${{ env.SESSION_TIMEOUT }}"

          TIMEOUT=${{ env.SESSION_TIMEOUT }}
          if [[ "$TIMEOUT" =~ ^([0-9]+)([hms])$ ]]; then
            VALUE=${BASH_REMATCH[1]}
            UNIT=${BASH_REMATCH[2]}
            case $UNIT in
              h) TIMEOUT_SECONDS=$((VALUE * 3600)) ;;
              m) TIMEOUT_SECONDS=$((VALUE * 60)) ;;
              s) TIMEOUT_SECONDS=$VALUE ;;
            esac
          else
            echo "‚ö†Ô∏è Invalid timeout format, using default 6h"
            TIMEOUT_SECONDS=21600
          fi

          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "üîó SSH: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo "üåê Web: $(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')"
          sleep $TIMEOUT_SECONDS

      # ===== CREATE BACKUP =====
      - name: Create user data backup
        if: always()
        run: |
          mkdir -p backup
          echo "üíæ Creating backup..."
          sudo tar -czf backup/user-home.tar.gz \
            --exclude=/home/${{ env.VPS_USER }}/.cache \
            --exclude=/home/${{ env.VPS_USER }}/node_modules \
            --exclude=/home/${{ env.VPS_USER }}/tmp \
            --numeric-owner \
            /home/${{ env.VPS_USER }}
          sudo tar -czf backup/tailscale-state.tar.gz --numeric-owner /var/lib/tailscale 2>/dev/null || true
          sudo dpkg --get-selections > backup/packages.list
          sudo tar -czf backup/app-data.tar.gz --numeric-owner /var/www /opt /srv 2>/dev/null || true
          zip -r latest-backup.zip backup/

      # ===== UPLOAD TO GITHUB ARTIFACTS =====
      - name: Upload to GitHub artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-user-backup
          path: backup/
          retention-days: ${{ env.BACKUP_RETENTION_DAYS }}

      # ===== UPLOAD TO MEGA =====
      - name: Upload backup to MEGA
        if: always()
        run: |
          echo "‚òÅÔ∏è Uploading backup to MEGA..."
          rclone copy latest-backup.zip mega:vps-backups/ --progress
          rclone copy backup/ mega:vps-backups/ --progress
          rclone copy latest-backup.zip mega:vps-backups/latest-backup.zip --progress
          echo "‚úÖ Backup uploaded to MEGA"
