# 🛸 OMNITRIX VPS SESSION - BEN 10 ALIEN FORCE EDITION 👽
# ═══════════════════════════════════════════════════════════════════
#                    🔋 POWERED BY ALIEN TECHNOLOGY 🔋
# ═══════════════════════════════════════════════════════════════════
# This version incorporates optimized workflow patterns for reliability
# and efficiency, ensuring complete persistent VPS functionality.

name: "🛸 OMNITRIX VPS - Ben 10 Alien Force Edition 👽"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

env:
  BACKUP_NEXUS: /var/backups/omnitrix
  BACKUP_ARTIFACT: omnitrix-data-core.tar.gz
  GALVAN_CLOUD: mega:omnitrix-vault
  HERO_SESSION_DURATION: 19800  # 5.5 hours (5:30)
  PLUMBER_NETWORK: Plumbers-HQ
  
jobs:
  omnitrix_session:
    name: "🛸 OMNITRIX UNIVERSE SESSION 👽"
    runs-on: ubuntu-22.04
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write
    
    steps:
    - name: "🛸 Scanning Universe Repository"
      uses: actions/checkout@v4
      
    - name: "⚡ DEPLOYING ALIEN TECHNOLOGY SUITE"
      run: |
        set -e
        
        echo "═══════════════════════════════════════════════════════════"
        echo "🛸            OMNITRIX SYSTEM ACTIVATION               👽"
        echo "═══════════════════════════════════════════════════════════"
        echo "🔋 Alien Form: Jetray (High-Speed Operations)"
        echo "⏰ Mission Start: $(date)"
        echo "═══════════════════════════════════════════════════════════"
        
        # Update package registry
        echo "🛸 Updating Galactic Package Registry..."
        sudo apt-get update -qq || {
          echo "⚠️ Primary update failed, trying alternatives..."
          sudo apt-get update --fix-missing -qq || true
        }
        
        # Install rclone with multiple methods
        echo "🔗 Installing Plumber Communication Suite..."
        if ! command -v rclone >/dev/null 2>&1; then
          if curl -fsSL https://rclone.org/install.sh | sudo bash; then
            echo "✅ Rclone installed via official installer"
          else
            echo "🔄 Trying alternative rclone installation..."
            cd /tmp
            if wget -q https://downloads.rclone.org/rclone-current-linux-amd64.zip; then
              sudo apt-get install -y unzip || true
              if unzip -q rclone-current-linux-amd64.zip 2>/dev/null; then
                sudo cp rclone-*/rclone /usr/bin/ && sudo chmod +x /usr/bin/rclone
                echo "✅ Rclone installed via direct download"
              fi
            fi
          fi
        fi
        
        # Install essential tools
        echo "👽 Installing Essential Alien Technology..."
        TOOLS="curl wget jq tar gzip unzip openssh-server nano vim git net-tools"
        TOOLS="$TOOLS software-properties-common apt-transport-https ca-certificates"
        TOOLS="$TOOLS gnupg psmisc screen expect tmate mariadb-server mariadb-client"
        
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y $TOOLS || {
          echo "⚠️ Some tools failed to install, continuing..."
        }
        
        echo "✅ ALIEN TECHNOLOGY DEPLOYMENT COMPLETE! 🛸"

    - name: "☁️ GALVAN PRIME CLOUD CONFIGURATION"
      run: |
        set -e
        
        echo "Configuring Rclone for Galvan Prime (MEGA)..."
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf <<EOF
        [mega]
        type = mega
        user = ${{ secrets.MEGA_USER || '' }}
        pass = ${{ secrets.MEGA_PASS || '' }}
        EOF
        
        # Test connectivity
        echo "🧪 Testing Galvan Prime connectivity..."
        if rclone lsd mega: >/dev/null 2>&1; then
          echo "✅ Galvan Prime connection established! 🌌"
        else
          echo "⚠️ Connectivity test failed, proceeding with limited cloud features"
        fi

    - name: "♻️ TEMPORAL DATA CORE RECOVERY OR INITIALIZATION"
      id: restore
      run: |
        set -e
        
        echo "🔍 Checking for existing temporal data core on Galvan Prime..."
        if rclone ls ${GALVAN_CLOUD}/${BACKUP_ARTIFACT} >/dev/null 2>&1; then
          echo "✅ Temporal data core found! Restoring universe state..."
          rclone copy ${GALVAN_CLOUD}/${BACKUP_ARTIFACT} /tmp/
          sudo tar -xzf /tmp/${BACKUP_ARTIFACT} --absolute-names -C / 2>/dev/null || true
          echo "is_new_install=false" >> $GITHUB_OUTPUT
          echo "✅ Universe state restored from temporal data core!"
        else
          echo "ℹ️ No temporal data core found. Fresh installation mode activated."
          sudo mkdir -p /home/jacky /opt /srv /var/www /var/lib/mysql /www/server
          echo "is_new_install=true" >> $GITHUB_OUTPUT
          echo "🎆 Fresh universe initialized!"
        fi
        
    - name: "🗄️ DELETE TEMPORAL DATA CORE FROM GALVAN PRIME"
      if: steps.restore.outputs.is_new_install == 'false'
      run: |
        echo "Deleting temporal data core from Galvan Prime vault..."
        rclone delete ${GALVAN_CLOUD}/${BACKUP_ARTIFACT}
        echo "✅ Temporal data core cleared from Galvan Prime."

    - name: "🚀 ALIEN CONTROL PANEL DEPLOYMENT"
      run: |
        set -e
        
        echo "Running Alien Control Panel installer to configure over restored files..."
        curl -sSLo /tmp/install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
        # Pipe 'y' and 'yes' to the installer to handle both prompts
        (echo "y" && echo "yes") | sudo bash /tmp/install.sh || true
        
    - name: "🚀 START ALIEN POWER SYSTEMS"
      run: |
        set -e
        
        echo "🔄 (Re)loading alien power systems..."
        sudo systemctl daemon-reload
        
        echo "🕷️ Installing and starting Plumber Network (Tailscale)..."
        curl -fsSL https://tailscale.com/install.sh | sh
        sudo systemctl enable --now tailscaled
        sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY || '' }} --hostname=$PLUMBER_NETWORK --reset || true
        
        # Wait for Tailscale network to fully stabilize
        echo "Pausing for 10 seconds to allow Plumber Network to establish..."
        sleep 10
        
        # Start the services in a logical order
        echo "⚙️ Starting database, Alien Control Panel, and web services..."
        sudo systemctl start mariadb || true
        
        # Restart aaPanel after Tailscale is configured
        sudo bt restart || true
        sudo systemctl start apache2 || true
        
        echo "✅ All alien power systems are running."
        echo "🌐 Plumber Network IP: $(sudo tailscale ip -4 || echo 'Not available')"
        
    - name: "🔐 SET ALIEN CONTROL PANEL CREDENTIALS"
      run: |
        echo "Setting Alien Control Panel username and password..."
        echo "Ben10" | sudo bt 6
        echo "omnitrix" | sudo bt 5
        echo "✅ Control Panel username is 'Ben10' and password has been set to 'omnitrix'."
        
    
    - name: "👤 UNIVERSAL HERO SETUP"
      run: |
        set -e
        
        echo "🚀 Creating universal hero and hostname setup..."
        
        # Create hero account (runs every time to ensure user exists)
        if ! id jacky >/dev/null 2>&1; then
          sudo useradd -m -s /bin/bash jacky
          echo "✅ Hero account 'jacky' created!"
        else
          echo "✅ Hero account 'jacky' already exists!"
        fi
        
        # Set password and permissions
        echo "jacky:${{ secrets.USER_PASSWORD || 'omnitrix' }}" | sudo chpasswd
        sudo usermod -aG sudo jacky
        echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky >/dev/null
        
        # Set hostname
        sudo hostnamectl set-hostname "$PLUMBER_NETWORK"
        echo "127.0.1.1 $PLUMBER_NETWORK" | sudo tee -a /etc/hosts >/dev/null
        
        echo "✅ Hero 'jacky' configured with Omnitrix powers!"
        echo "🌍 Hostname set to: $PLUMBER_NETWORK"

    - name: "⏳ MAINTAIN OMNITRIX SESSION (5:30 HOURS)"
      run: |
        set -e
        
        echo "🛸 OMNITRIX is now operational for 5:30 hours. To trigger manual shutdown, create '/tmp/stop_session'."
        echo "⏰ Session will automatically end after 5 hours 30 minutes (19,800 seconds)"
        echo "🕐 Mission Start: $(date)"
        
        MISSION_START=$(date +%s)
        LAST_STATUS=0
        STATUS_INTERVAL=300  # 5 minutes status updates
        
        while [ ! -f /tmp/stop_session ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - MISSION_START))
          
          # Check for mission completion (5:30 hours = 19800 seconds)
          if [ $ELAPSED -gt $HERO_SESSION_DURATION ]; then
            echo "⏰ Mission duration of 5:30 hours completed! Initiating universe preservation..."
            break
          fi
          
          # Periodic status updates every 5 minutes
          if [ $((CURRENT_TIME - LAST_STATUS)) -gt $STATUS_INTERVAL ]; then
            REMAINING=$((HERO_SESSION_DURATION - ELAPSED))
            HOURS=$((REMAINING / 3600))
            MINUTES=$(((REMAINING % 3600) / 60))
            
            echo "═══════════════════════════════════════════════════════════"
            echo "🛸 OMNITRIX STATUS - $(date) - Time Remaining: ${HOURS}h ${MINUTES}m"
            echo "🌐 Network: $(sudo tailscale status --json 2>/dev/null | jq -r '.BackendState' 2>/dev/null || echo 'Unknown')"
            echo "🗄️ Database: $(systemctl is-active mariadb 2>/dev/null || echo 'Unknown')"
            echo "🎛️ Panel: $(systemctl is-active bt 2>/dev/null || echo 'Unknown')"
            echo "💾 Disk: $(df -h / | awk 'NR==2 {print $5}') | Memory: $(free | awk 'NR==2{printf "%.1f%%", $3*100/$2}')"
            
            # Display access information
            PLUMBER_IP=$(sudo tailscale ip -4 2>/dev/null || echo "Acquiring...")
            echo "🔐 Hero SSH: ssh jacky@$PLUMBER_IP"
            echo "🎛️ Control Panel: http://$PLUMBER_IP:7800 (Ben10/omnitrix)"
            echo "═══════════════════════════════════════════════════════════"
            
            LAST_STATUS=$CURRENT_TIME
          fi
          
          echo "Session is active. Sleeping for 60 seconds..."
          sleep 60
        done
        
        echo "Graceful shutdown initiated. Proceeding to universe preservation."

    - name: "💾 CREATE FINAL TEMPORAL DATA CORE"
      if: always()
      run: |
        set -e
        
        echo "🛑 Stopping alien power systems for clean backup..."
        sudo systemctl stop tailscaled || true
        sudo systemctl stop btpanel.service || true
        sudo systemctl stop apache2 || true
        sudo systemctl stop mariadb || true
        sudo pkill -f "tmate" || true
        
        # Create the backup store directory
        sudo mkdir -p ${BACKUP_NEXUS}
        
        echo "📦 Creating final temporal data core archive..."
        sudo tar --ignore-failed-read -czf ${BACKUP_NEXUS}/${BACKUP_ARTIFACT} \
          --absolute-names \
          /etc/hostname \
          /etc/hosts \
          /etc/systemd/system \
          /var/lib/tailscale \
          /opt \
          /srv \
          /var/www \
          /etc/ssh \
          /etc/apache2 \
          /www/server \
          /root \
          /home/jacky \
          /usr/lib/systemd/system \
          /var/lib/mysql \
          /etc/sudoers.d/ \
          /usr/bin/bt \
          2>/dev/null || true
        
        echo "✅ Final temporal data core created at ${BACKUP_NEXUS}/${BACKUP_ARTIFACT}"
        
    - name: "☁️ UPLOAD TEMPORAL DATA CORE TO GALVAN PRIME"
      if: always()
      run: |
        echo "🚀 Uploading final temporal data core to Galvan Prime..."
        rclone copy ${BACKUP_NEXUS}/${BACKUP_ARTIFACT} ${GALVAN_CLOUD} --progress
        echo "✅ Final temporal data core uploaded successfully to Galvan Prime."

    - name: "📝 FINAL MISSION STATUS REPORT"
      if: always()
      run: |
        echo "=== OMNITRIX VPS SESSION ENDED ==="
        echo "Final job status: ${{ job.status }}"
        echo "Temporal data core uploaded to: ${GALVAN_CLOUD}/${BACKUP_ARTIFACT}"
        echo "Session Duration: 5 hours 30 minutes"
        echo "Hero Account: jacky (omnitrix powers)"
        echo "Control Panel: Ben10/omnitrix"
        echo "It's Hero Time - Mission Complete! 💥"
        echo "============================="
