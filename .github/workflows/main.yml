name: Educational VPS Workflow

on:
  schedule:
    # Run more frequently to minimize downtime
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:
  
env:
  BACKUP_NAME: "vps-state-$(date +%Y%m%d-%H%M%S)"
  
jobs:
  check-and-maintain:
    runs-on: ubuntu-22.04
    timeout-minutes: 25  # Leave buffer for cleanup
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Check if VPS is already running
        id: check_status
        run: |
          # Create a status file to track if VPS is active
          mkdir -p ~/.vps-state
          if [ -f ~/.vps-state/active ]; then
            echo "vps_running=true" >> $GITHUB_OUTPUT
          else
            echo "vps_running=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup rclone with better error handling
        run: |
          sudo apt update && sudo apt install -y rclone curl jq
          mkdir -p ~/.config/rclone
          
          # Hardcoded credentials (SECURITY RISK - for testing only)
          cat > ~/.config/rclone/rclone.conf << EOF
          [backup_storage]
          type = drive
          client_id = 534417340383-f4b86oa9dffhjuhdh4ekd38b0l9llnum.apps.googleusercontent.com
          client_secret = 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
          scope = drive
          token = {"access_token":"ya29.A0AS3H6Nw8MBbpPmtrq8-3RRWIvB_UT9jfqtU5cY9SnMonjI9J9WtKY1O3VlLdWn4CKFQNGH6aXHHICHg_1TsD_LeHDGA8yMJDD4J68NYDSxKKrS3ilyhfa8CbhSpDE9-DrwA8qYnHnP0I3A4HgogqQRn2H-DTHlj-n6AbItkibxtu7IWLL2RxsB38wCXX8t7-uFJxrRAaCgYKAXQSARQSFQHGX2Micd2dOumHq5UQBnkvy6MCNw0206","token_type":"Bearer","refresh_token":"1//0gRBqns_f18v4CgYIARAAGBASNwF-L9IrHwzKqEfc8JmDh3oq8-jVbHeb0Crl3rBpCg0cRm6r7BjUXRAiOSOm4IpXnYYy9HsOHys","expiry":"2025-08-31T09:35:38.127202879Z"}
          EOF
          
          # Test connection
          if ! rclone lsd backup_storage: >/dev/null 2>&1; then
            echo "❌ Cannot connect to backup storage"
            exit 1
          fi

      - name: Smart state restoration
        run: |
          echo "🔄 Checking for existing state..."
          
          # Find the most recent successful backup
          LATEST_BACKUP=$(rclone lsf backup_storage:vps-backups/ --files-only | grep "\.tar\.gz$" | sort -r | head -1)
          
          if [ -n "$LATEST_BACKUP" ]; then
            echo "📦 Found backup: $LATEST_BACKUP"
            
            # Download and verify backup integrity
            rclone copy "backup_storage:vps-backups/$LATEST_BACKUP" /tmp/ --progress
            
            if tar -tzf "/tmp/$LATEST_BACKUP" >/dev/null 2>&1; then
              echo "✅ Backup integrity verified"
              sudo tar -xzf "/tmp/$LATEST_BACKUP" -C / --exclude='proc/*' --exclude='sys/*' --exclude='dev/*' 2>/dev/null || true
              echo "📁 State restored from $LATEST_BACKUP"
            else
              echo "❌ Backup corrupted, starting fresh"
            fi
          else
            echo "🆕 No previous backup found, initializing..."
          fi

      - name: Initialize VPS environment
        run: |
          # Set hostname and networking
          sudo hostnamectl set-hostname persistent-vps
          echo "127.0.0.1 persistent-vps" | sudo tee -a /etc/hosts
          
          # Create secure user with proper permissions
          if ! id -u vpsuser >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash vpsuser
            # Hardcoded password (SECURITY RISK)
            echo "vpsuser:fleppy123" | sudo chpasswd
            sudo usermod -aG sudo vpsuser
            echo "vpsuser ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/vpsuser
          fi
          
          # Install essential packages
          sudo apt install -y tmux htop nano vim git python3-pip nodejs npm docker.io
          sudo systemctl enable docker
          sudo usermod -aG docker vpsuser

      - name: Setup networking with fallback
        run: |
          # Hardcoded Tailscale authkey (SECURITY RISK)
          TAILSCALE_KEY="tskey-auth-kGVm2UEATA11-example-key-replace-with-real"
          
          if [ -n "$TAILSCALE_KEY" ]; then
            curl -fsSL https://tailscale.com/install.sh | sh
            sudo tailscaled &
            sleep 5
            sudo tailscale up --authkey $TAILSCALE_KEY --hostname=persistent-vps-$(date +%s) || echo "Tailscale setup failed"
            tailscale ip -4 2>/dev/null && echo "✅ Tailscale connected" || echo "❌ Tailscale failed"
          fi
          
          # Fallback: tmate for emergency access
          sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "🔗 Emergency access:"
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' || echo "tmate failed"

      - name: Health monitoring and services
        run: |
          # Create health check script
          cat > ~/.vps-state/health-check.sh << 'EOF'
          #!/bin/bash
          HEALTH_FILE="/tmp/vps-health"
          echo "$(date): Health check" >> $HEALTH_FILE
          
          # Check critical services
          systemctl is-active docker >/dev/null && echo "Docker: OK" || echo "Docker: FAILED"
          
          # Check disk space
          DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ $DISK_USAGE -gt 80 ]; then
            echo "⚠️  Disk usage critical: ${DISK_USAGE}%"
          fi
          
          # Update timestamp
          date > ~/.vps-state/last-seen
          EOF
          
          chmod +x ~/.vps-state/health-check.sh
          ~/.vps-state/health-check.sh

      - name: Mark VPS as active
        run: |
          echo "$(date): VPS session started" > ~/.vps-state/active
          echo "Session ID: ${{ github.run_id }}" >> ~/.vps-state/active

      - name: Intelligent backup scheduling
        run: |
          # Create incremental backup script
          cat > ~/.vps-state/backup.sh << 'EOF'
          #!/bin/bash
          BACKUP_DIR="/tmp/backup-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Selective backup of important directories
          DIRS_TO_BACKUP=(
            "/home"
            "/etc"
            "/usr/local" 
            "/opt"
            "/var/lib/docker"
            "/root/.ssh"
            "/root/.config"
          )
          
          for dir in "${DIRS_TO_BACKUP[@]}"; do
            if [ -d "$dir" ]; then
              echo "Backing up $dir..."
              sudo cp -r "$dir" "$BACKUP_DIR/" 2>/dev/null || true
            fi
          done
          
          # Create compressed archive
          sudo tar -czf "/tmp/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C "$BACKUP_DIR" . 2>/dev/null
          rm -rf "$BACKUP_DIR"
          
          # Upload with retry logic
          for i in {1..3}; do
            if rclone copy "/tmp/backup-$(date +%Y%m%d-%H%M%S).tar.gz" backup_storage:vps-backups/ --progress; then
              echo "✅ Backup uploaded successfully"
              break
            else
              echo "❌ Backup attempt $i failed, retrying..."
              sleep 30
            fi
          done
          
          # Cleanup old backups (keep last 5)
          rclone ls backup_storage:vps-backups/ | sort -k2 -r | tail -n +6 | awk '{print $2}' | xargs -I {} rclone delete "backup_storage:vps-backups/{}"
          EOF
          
          chmod +x ~/.vps-state/backup.sh

      - name: Keep VPS alive with monitoring
        run: |
          # Run for 20 minutes with health checks every minute
          for i in {1..20}; do
            sleep 60
            ~/.vps-state/health-check.sh
            
            # Backup every 10 minutes
            if [ $((i % 10)) -eq 0 ]; then
              ~/.vps-state/backup.sh &
            fi
            
            echo "⏰ VPS alive for $i minutes"
          done

      - name: Graceful shutdown backup
        if: always()
        run: |
          echo "🔄 Performing final backup before shutdown..."
          ~/.vps-state/backup.sh
          
          # Mark VPS as inactive
          rm -f ~/.vps-state/active
          echo "$(date): VPS session ended gracefully" >> ~/.vps-state/shutdown-log
          
          # Upload final state
          rclone copy ~/.vps-state/ backup_storage:vps-state/ --progress || true

  cleanup:
    needs: check-and-maintain
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: Cleanup old workflows
        run: |
          echo "🧹 Cleanup completed"
