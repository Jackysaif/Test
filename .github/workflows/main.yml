name: Persistent VPS (Full Backup Edition)

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-full-backup.tar.gz # Changed name for clarity
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write

    steps:
      - name: 'üï∏Ô∏è Checkout Code'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Initial Setup & Restore
      # ------------------------------------------------------------------

      - name: 'üîß Install Core Tools'
        run: |
          set -euo pipefail
          echo "üåê Updating package list..."
          sudo apt-get update -qq
          echo "‚òÅÔ∏è Installing Rclone..."
          curl -fsSL https://rclone.org/install.sh | sudo bash
          echo "üì¶ Installing essential system tools..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            tar gzip wget unzip htop nano vim git net-tools tmate jq curl \
            psmisc screen
          echo "‚úÖ All core tools installed."

      - name: 'üõ†Ô∏è Configure Rclone'
        run: |
          set -euo pipefail
          echo "üîê Setting up rclone configuration..."
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "‚ùå ERROR: RCLONE_CONFIG secret is missing!" >&2
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "‚úÖ Rclone configured successfully."

      - name: 'üîç Check for Full Backup'
        id: check_backup
        run: |
          set -euo pipefail
          echo "üîé Checking for existing full backup link..."
          if rclone ls "${MEGA_REMOTE}/latest_full_backup_link.txt" >/dev/null 2>&1; then
              ARTIFACT_LINK=$(rclone cat "${MEGA_REMOTE}/latest_full_backup_link.txt")
              echo "‚úÖ Full backup link found in MEGA!"
              echo "has_backup=true" >> $GITHUB_OUTPUT
              echo "artifact_url=${ARTIFACT_LINK}" >> $GITHUB_OUTPUT
          else
              echo "‚ÑπÔ∏è No backup link found. Assuming fresh install."
              echo "has_backup=false" >> $GITHUB_OUTPUT
          fi

      - name: 'üì• Download & Restore Full Backup'
        if: steps.check_backup.outputs.has_backup == 'true'
        run: |
          set -euo pipefail
          echo "üì• Downloading full backup from artifact URL..."
          mkdir -p /tmp/restore
          cd /tmp/restore
          
          curl -L -o "backup.zip" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${{ steps.check_backup.outputs.artifact_url }}"

          if [[ ! -s "backup.zip" ]]; then
            echo "‚ùå Download failed or the backup file is empty!"
            exit 1
          fi

          echo "üì¶ Extracting artifact..."
          unzip -q backup.zip

          if [[ ! -f "${{ env.BACKUP_NAME }}" ]]; then
            echo "‚ùå Backup file '${{ env.BACKUP_NAME }}' not found after extraction!"
            exit 1
          fi
          
          echo "üìÇ Restoring entire system from backup..."
          sudo tar -xzpf "${{ env.BACKUP_NAME }}" -C /
          
          echo "‚úÖ Full system restoration complete."
          echo "is_new_install=false" >> $GITHUB_OUTPUT

      - name: 'üå± Perform Fresh Install Steps'
        id: fresh_install
        if: steps.check_backup.outputs.has_backup != 'true'
        run: |
          echo "is_new_install=true" >> $GITHUB_OUTPUT
          echo "üå± Performing first-time setup for a new system."
          
          echo "üîß Installing services for fresh install..."
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            docker.io openssh-server mariadb-server mariadb-client
          
          echo "üë§ Setting up user..."
          sudo useradd -m -s /bin/bash jacky 2>/dev/null || echo "User exists."
          echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
          sudo usermod -aG sudo,docker jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky > /dev/null
          
          echo "üóÑÔ∏è Securing MariaDB..."
          sudo systemctl start mariadb
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('${{ secrets.DB_ROOT_PASSWORD }}');"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "FLUSH PRIVILEGES;"
          
          echo "üì¶ Installing Aapanel..."
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
          timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || echo "‚ö†Ô∏è Aapanel install failed."
          if command -v bt >/dev/null 2>&1; then
            echo "Jacky" | sudo bt 6
            echo "spidey" | sudo bt 5
          fi

      # ------------------------------------------------------------------
      # Part 2: Services & Remote Access
      # ------------------------------------------------------------------

      - name: 'üöÄ Start All Services'
        run: |
          set -euo pipefail
          echo "üöÄ Starting all services..."
          
          # This ensures that services restored from backup can start correctly
          sudo systemctl daemon-reload
          
          # List of services to start
          SERVICES="ssh docker mariadb"
          
          for SERVICE in $SERVICES; do
            if systemctl list-unit-files | grep -q "^$SERVICE.service"; then
              echo "Starting $SERVICE..."
              sudo systemctl enable $SERVICE
              sudo systemctl restart $SERVICE || echo "‚ö†Ô∏è Failed to start $SERVICE"
            fi
          done
          
          if command -v bt >/dev/null 2>&1; then
            echo "Starting Aapanel..."
            sudo bt start || echo "‚ö†Ô∏è Failed to start Aapanel"
          fi

      - name: 'üîó Setup Remote Access'
        run: |
          set -euo pipefail
          # Install Tailscale if it's not already there from backup
          if ! command -v tailscale >/dev/null 2>&1; then
             curl -fsSL https://tailscale.com/install.sh | sh
          fi
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes

          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready

          echo "================================================"
          echo "üéâ          VPS READY FOR CONNECTION           üéâ"
          echo "================================================"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          echo "üîë tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if command -v bt >/dev/null 2>&1; then
            echo ""
            echo "üéõÔ∏è Aapanel Info:"
            sudo bt default || true
          fi
          echo "================================================"

      - name: '‚è≥ Maintain Session'
        run: |
          echo "üñ•Ô∏è VPS session active. Will run for ~5.5 hours."
          end_time=$((SECONDS + 19800))
          while [ $SECONDS -lt $end_time ]; do
            if [ -f "/tmp/stop" ]; then
              echo "‚úÖ Graceful shutdown signal received."
              rm -f "/tmp/stop"
              break
            fi
            sleep 60
          done
          echo "‚è∞ Session time limit reached. Preparing full backup..."

      # ------------------------------------------------------------------
      # Part 3: Full System Backup
      # ------------------------------------------------------------------

      - name: 'üì¶ Create Full System Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "üì¶ Creating full system backup..."
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          echo "üõë Stopping services for a consistent backup..."
          if command -v bt >/dev/null 2>&1; then sudo bt stop; fi
          sudo systemctl stop ssh mariadb docker tailscaled
          sleep 5

          echo " compressing the entire filesystem..."
          sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --warning=no-file-changed \
            -C / . \
            --exclude='/proc' \
            --exclude='/sys' \
            --exclude='/dev' \
            --exclude='/run' \
            --exclude='/tmp' \
            --exclude='/mnt' \
            --exclude='/media' \
            --exclude='/lost+found' \
            --exclude='${{ env.BACKUP_STORE }}'

          BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
          echo "‚úÖ Full system backup created. Size: $BACKUP_SIZE"

      - name: '‚¨ÜÔ∏è Upload Full Backup to Artifacts'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKUP_NAME }}
          path: ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}
          retention-days: 7
          if-no-files-found: error

      - name: 'üîó Store Backup Link in MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "üîó Storing new artifact download link in MEGA..."
          sleep 20
          
          ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')
          if [[ -z "$ARTIFACT_ID" || "$ARTIFACT_ID" == "null" ]]; then
            echo "‚ùå ERROR: Could not get artifact ID after upload!"
            exit 1
          fi
          
          ARTIFACT_LINK="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
          
          # Use a different link file to avoid confusion with the smart backup method
          rclone delete "${MEGA_REMOTE}/latest_full_backup_link.txt" || echo "No old link file to delete."
          echo "$ARTIFACT_LINK" | rclone rcat "${MEGA_REMOTE}/latest_full_backup_link.txt"

          echo "‚úÖ New backup link stored successfully in MEGA."
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: 'üìã Session Summary'
        if: always()
        run: |
          echo "============================================="
          echo "         ‚úÖ VPS SESSION COMPLETE ‚úÖ"
          echo "============================================="
          echo "Job Status: ${{ job.status }}"
          echo "Backup Strategy: Full System Backup to GitHub Artifacts"
          echo "============================================="
