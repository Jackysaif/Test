name: Persistent VPS with Rclone Backup

on:
  workflow_dispatch:
  workflow_call:

env:
  VPS_USER: jacky
  VPS_PASSWORD: root
  VPS_HOSTNAME: github-vps
  BACKUP_DIR: vps-backup
  SESSION_TIMEOUT: 6h

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # ===== INITIALIZATION =====
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system tools
        run: |
          sudo apt update
          sudo apt install -y curl tmate

      # ===== RCLONE SETUP =====
      - name: Install and configure rclone
        run: |
          # Install rclone
          curl -Of https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip -a rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/
          sudo chown root:root /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          
          # Configure MEGA
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF
          
          echo "‚úÖ Rclone configured with MEGA"
          rclone about mega: || echo "‚ö†Ô∏è MEGA connection test failed"

      # ===== USER SETUP =====
      - name: Create user with sudo access
        run: |
          if ! id -u ${{ env.VPS_USER }} >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }}:${{ env.VPS_PASSWORD }}" | sudo chpasswd
            sudo usermod -aG sudo ${{ env.VPS_USER }}
            echo "‚úÖ User ${{ env.VPS_USER }} created with sudo access"
          else
            echo "üîÅ User ${{ env.VPS_USER }} already exists"
          fi

      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname ${{ env.VPS_HOSTNAME }}
          echo "üè∑Ô∏è Hostname set to $(hostname)"

      # ===== BACKUP RESTORATION =====
      - name: Restore from previous backup
        run: |
          mkdir -p restore
          
          # Download latest backup
          if rclone copy mega:${{ env.BACKUP_DIR }}/latest.tar.gz restore/ --progress; then
            echo "üì¶ Restoring system backup..."
            sudo tar -xzf restore/latest.tar.gz -C /
            echo "‚úÖ System backup restored"
          else
            echo "‚ö†Ô∏è No system backup found, starting fresh"
          fi
          
          # Download user data separately
          if rclone copy mega:${{ env.BACKUP_DIR }}/user-home.tar.gz restore/ --progress; then
            echo "üè† Restoring user data..."
            sudo tar -xzf restore/user-home.tar.gz -C /
            echo "‚úÖ User data restored"
          fi
          
          # Download package list
          if rclone copy mega:${{ env.BACKUP_DIR }}/packages.list restore/ --progress; then
            echo "üì¶ Restoring packages..."
            sudo apt-get update
            sudo dpkg --set-selections < restore/packages.list
            sudo apt-get upgrade -y
            sudo apt-get dselect-upgrade -y
            echo "‚úÖ Packages restored"
          fi

      # ===== TAILSCALE SETUP =====
      - name: Setup Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname ${{ env.VPS_HOSTNAME }} --ssh
          
          echo "üåê Tailscale IP: $(tailscale ip -4)"
          echo "üîë SSH: ssh ${{ env.VPS_USER }}@$(tailscale ip -4)"

      # ===== VPS SESSION =====
      - name: Start VPS session
        run: |
          echo "üöÄ VPS Session Started"
          echo "========================"
          echo "üë§ User: ${{ env.VPS_USER }}"
          echo "üîë Pass: ${{ env.VPS_PASSWORD }}"
          echo "üåê IP: $(tailscale ip -4)"
          echo "‚è∞ Timeout: ${{ env.SESSION_TIMEOUT }}"
          echo "========================"
          
          # Start tmate session
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "üîó Connect: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          
          # Keep session alive
          sleep 21600  # 6 hours

      # ===== BACKUP CREATION =====
      - name: Create backup
        if: always()
        run: |
          mkdir -p backup
          echo "üíæ Creating backup..."
          
          # Backup user home directory
          echo "üìÅ Backing up user data..."
          sudo tar -czf backup/user-home.tar.gz \
            -C /home ${{ env.VPS_USER }} \
            --exclude='.cache' \
            --exclude='node_modules' \
            --exclude='*.tmp' \
            --exclude='*.log' \
            --warning=no-file-changed \
            .
          
          # Backup system files
          echo "‚öôÔ∏è Backing up system configuration..."
          sudo tar -czf backup/system-config.tar.gz \
            --ignore-failed-read \
            /etc/ssh /etc/nginx /etc/mysql /etc/apache2 \
            /var/www /root/.ssh /home/${{ env.VPS_USER }}/.ssh \
            2>/dev/null || true
          
          # Backup package list
          echo "üì¶ Backing up packages..."
          dpkg --get-selections > backup/packages.list
          
          # Create combined backup
          echo "üì¶ Creating final backup archive..."
          tar -czf backup/latest.tar.gz -C backup .
          
          echo "‚úÖ Backup created: $(du -sh backup)"

      # ===== UPLOAD BACKUP =====
      - name: Upload backup to MEGA
        if: always()
        run: |
          echo "‚òÅÔ∏è Uploading backup to MEGA..."
          rclone mkdir mega:${{ env.BACKUP_DIR }} || true
          
          # Upload individual files for easy restoration
          rclone copy backup/user-home.tar.gz mega:${{ env.BACKUP_DIR }} --progress
          rclone copy backup/packages.list mega:${{ env.BACKUP_DIR }} --progress
          rclone copy backup/system-config.tar.gz mega:${{ env.BACKUP_DIR }} --progress
          
          # Upload complete backup
          rclone copy backup/latest.tar.gz mega:${{ env.BACKUP_DIR }} --progress
          
          echo "‚úÖ Backup uploaded to MEGA"

      # ===== FINAL REPORT =====
      - name: Session report
        if: always()
        run: |
          echo "=================================="
          echo "VPS Session Completed"
          echo "=================================="
          echo "Status: ${{ job.status }}"
          echo "Backup: ‚úÖ Uploaded to MEGA"
          echo "Next session will restore this state"
          echo "=================================="
