name: 🕷️ Spidey Persistent VPS - Fixed Backup

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily backup at midnight

env:
  PERSISTENT_DIR: /opt/persistent-vps
  BACKUP_STORE: /var/backups/vps  # Separate location for backups
  BACKUP_NAME: vps-backup-latest.tar.gz

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # 🕸️ Checkout Repo
      - name: 🕸️ Checkout
        uses: actions/checkout@v4

      # ⚡ Install Required Tools
      - name: ⚡ Install System Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar psmisc lsof screen

      # ⚡ Install Rclone
      - name: ⚡ Install Rclone
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      # ☁️ Configure Rclone MEGA
      - name: ☁️ Configure Rclone (MEGA)
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF

      # ♻️ Restore VPS from Backup (if exists)
      - name: ♻️ Restore From MEGA
        run: |
          echo "🔍 Checking for existing backup..."
          if rclone ls mega:vps-backup/$BACKUP_NAME >/dev/null 2>&1; then
            echo "📥 Downloading VPS backup..."
            rclone copy mega:vps-backup/$BACKUP_NAME /tmp/
            
            echo "🛑 Stopping services that might interfere with restore..."
            sudo pkill -f "tmate" || true
            sudo pkill -f "tailscale" || true
            
            echo "🔓 Unpacking backup to root..."
            sudo tar -xzf /tmp/$BACKUP_NAME -C /
            
            # Ensure our directories exist
            sudo mkdir -p $PERSISTENT_DIR $BACKUP_STORE
            echo "✅ Restore complete"
          else
            echo "ℹ️ No previous backup found. Starting fresh!"
            sudo mkdir -p $PERSISTENT_DIR $BACKUP_STORE
          fi

      # 👤 Create Jacky User + Set Hostname
      - name: 👤 Setup User & Hostname
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            sudo usermod -aG sudo jacky
          fi
          
          # Restore home directory if it exists in backup
          if [ -d "$PERSISTENT_DIR/home/jacky" ]; then
            echo "🔄 Restoring jacky home directory..."
            sudo rsync -a $PERSISTENT_DIR/home/jacky/ /home/jacky/
            sudo chown -R jacky:jacky /home/jacky
          fi
          
          sudo hostnamectl set-hostname github-vps
          echo "✅ User jacky ready (password: root)"
          echo "✅ Hostname set to github-vps"

      # 🕸️ Tailscale Setup with State Restoration
      - name: 🕸️ Tailscale Setup
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled

          # Restore Tailscale state if available
          if [ -d "$PERSISTENT_DIR/var/lib/tailscale" ]; then
            echo "♻️ Restoring Tailscale state..."
            sudo systemctl stop tailscaled
            sudo rsync -a $PERSISTENT_DIR/var/lib/tailscale/ /var/lib/tailscale/
            sudo systemctl start tailscaled
            sleep 3
            sudo tailscale up --hostname=github-vps --reset || true
          else
            echo "🆕 No Tailscale state found, using fresh auth key..."
            sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=github-vps || true
          fi

          echo "✅ Tailscale setup complete"
          echo "🌐 Tailscale IP: $(sudo tailscale ip -4 || echo 'Not available')"

      # 🔧 Restore System Services
      - name: 🔧 Restore System Services
        run: |
          echo "🔧 Restoring system services..."
          
          # Restore systemd services if they exist
          if [ -d "$PERSISTENT_DIR/etc/systemd/system" ]; then
            sudo rsync -a $PERSISTENT_DIR/etc/systemd/system/ /etc/systemd/system/
            sudo systemctl daemon-reload
          fi
          
          # Start common services that should persist
          if [ -f "/etc/systemd/system/persistent-service.service" ]; then
            sudo systemctl enable --now persistent-service.service
          fi
          
          echo "✅ Services restored"

      # 🛰️ Start Tmate Session in Background
      - name: 🛰️ Start Tmate Session
        run: |
          # Install tmate
          sudo apt-get install -y tmate
          
          # Start tmate in a screen session that will persist
          sudo -u jacky screen -dmS tmate-session tmate
          sleep 3
          
          # Get connection information
          echo "Tmate session started in background screen session"
          echo "Use 'sudo -u jacky screen -r tmate-session' to attach"

      # 💾 Create Immediate Backup
      - name: 💾 Create Initial Backup
        run: |
          echo "📦 Creating initial backup..."
          
          # Create backup in temporary location
          sudo tar --ignore-failed-read -czf /tmp/backup.tar.gz \
            /home/jacky \
            /etc/hostname \
            /etc/hosts \
            /etc/systemd/system \
            /var/lib/tailscale \
            /opt \
            /srv \
            /var/www 2>/dev/null || true
          
          # Move to backup store directory
          sudo mkdir -p $BACKUP_STORE
          sudo mv /tmp/backup.tar.gz $BACKUP_STORE/$BACKUP_NAME
          echo "✅ Initial backup created at $BACKUP_STORE/$BACKUP_NAME"

      # ☁️ Upload Initial Backup to MEGA
      - name: ☁️ Upload Initial Backup
        run: |
          echo "🚀 Uploading initial backup to MEGA..."
          rclone copy $BACKUP_STORE/$BACKUP_NAME mega:vps-backup/ --progress
          echo "✅ Initial backup uploaded"

      # ⏳ Main Wait Loop
      - name: ⏳ Maintain VPS Session
        run: |
          echo "🖥️ VPS is now running and maintained"
          echo "The system will automatically backup before termination"
          echo "Session will timeout after 6 hours or press Ctrl+C to stop early"
          
          # Wait for most of the timeout period (leaving time for backup)
          sleep 1m

      # 💾 Final Backup
      - name: 💾 Create Final Backup
        if: always()
        run: |
          echo "🛑 Preparing system for backup..."
          sudo systemctl stop tailscaled || true
          sudo pkill -f "tmate" || true
          
          echo "📦 Creating final backup archive..."
          sudo tar --ignore-failed-read -czf /tmp/backup.tar.gz \
            /home/jacky \
            /etc/hostname \
            /etc/hosts \
            /etc/systemd/system \
            /var/lib/tailscale \
            /opt \
            /srv \
            /var/www 2>/dev/null || true
          
          sudo mkdir -p $BACKUP_STORE
          sudo mv /tmp/backup.tar.gz $BACKUP_STORE/$BACKUP_NAME
          echo "✅ Final backup created: $BACKUP_STORE/$BACKUP_NAME"

      # ☁️ Upload Final Backup to MEGA
      - name: ☁️ Upload Final Backup to MEGA
        if: always()
        run: |
          echo "🚀 Uploading final backup to MEGA..."
          rclone copy $BACKUP_STORE/$BACKUP_NAME mega:vps-backup/ --progress
          echo "✅ Final backup uploaded successfully"

      # 📝 Final Status Report
      - name: 📝 Status Report
        if: always()
        run: |
          echo "=== VPS STATUS REPORT ==="
          echo "Hostname: $(hostname)"
          echo "User: jacky (password: root)"
          echo "Tailscale IP: $(sudo tailscale ip -4 2>/dev/null || echo 'Not configured')"
          echo "Backup Status: ${{ job.status }}"
          echo "Backup Location: $BACKUP_STORE/$BACKUP_NAME"
          echo "========================="
