# 🛸 OMNITRIX VPS SESSION - BEN 10 ALIEN FORCE EDITION 👽
# ═══════════════════════════════════════════════════════════════════
#                    🔋 POWERED BY ALIEN TECHNOLOGY 🔋
# ═══════════════════════════════════════════════════════════════════

name: "🛸 OMNITRIX VPS - Ben 10 Alien Force Edition 👽"

on:
  workflow_dispatch:
    inputs:
      alien_mode:
        description: '👽 Select Alien Form'
        required: false
        default: 'humungousaur'
        type: choice
        options:
          - humungousaur
          - brainstorm
          - jetray
          - chromastone
      debug_session:
        description: '🔍 Enable Debug Mode'
        required: false
        default: 'false'
        type: boolean
  schedule:
    - cron: '0 */6 * * *'

env:
  BACKUP_NEXUS: /mnt/omnitrix/backups
  BACKUP_ARTIFACT: omnitrix-data-core.tar.gz
  GALVAN_CLOUD: mega:omnitrix-vault
  HERO_SESSION_DURATION: 19800
  PLUMBER_NETWORK: Plumbers-HQ
  
jobs:
  omnitrix_session:
    name: "🛸 OMNITRIX UNIVERSE SESSION 👽"
    runs-on: ubuntu-22.04
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write
    
    steps:
    - name: "🛸 Scanning Universe Repository"
      uses: actions/checkout@v4
      
    - name: "⚡ DEPLOYING ALIEN TECHNOLOGY SUITE"
      run: |
        set -e
        
        echo "═══════════════════════════════════════════════════════════"
        echo "🛸            OMNITRIX SYSTEM ACTIVATION               👽"
        echo "═══════════════════════════════════════════════════════════"
        echo "🔋 Alien Form: ${{ github.event.inputs.alien_mode || 'humungousaur' }}"
        echo "⏰ Mission Start: $(date)"
        echo "═══════════════════════════════════════════════════════════"
        
        # Update package registry
        echo "🛸 Updating Galactic Package Registry..."
        sudo apt-get update -qq || {
          echo "⚠️ Primary update failed, trying alternatives..."
          sudo apt-get update --fix-missing -qq || true
        }
        
        # Install rclone with multiple methods
        echo "🔗 Installing Plumber Communication Suite..."
        if ! command -v rclone >/dev/null 2>&1; then
          if curl -fsSL https://rclone.org/install.sh | sudo bash; then
            echo "✅ Rclone installed via official installer"
          else
            echo "🔄 Trying alternative rclone installation..."
            cd /tmp
            if wget -q https://downloads.rclone.org/rclone-current-linux-amd64.zip; then
              sudo apt-get install -y unzip || true
              if unzip -q rclone-current-linux-amd64.zip 2>/dev/null; then
                sudo cp rclone-*/rclone /usr/bin/ && sudo chmod +x /usr/bin/rclone
                echo "✅ Rclone installed via direct download"
              fi
            fi
          fi
        fi
        
        # Install essential tools
        echo "👽 Installing Essential Alien Technology..."
        TOOLS="curl wget jq tar gzip unzip openssh-server nano vim git net-tools"
        TOOLS="$TOOLS software-properties-common apt-transport-https ca-certificates"
        TOOLS="$TOOLS gnupg psmisc screen expect tmate mariadb-server mariadb-client"
        
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y $TOOLS || {
          echo "⚠️ Some tools failed to install, continuing..."
        }
        
        echo "✅ ALIEN TECHNOLOGY DEPLOYMENT COMPLETE! 🛸"

    - name: "☁️ GALVAN PRIME CLOUD CONFIGURATION"
      run: |
        set -e
        
        echo "☁️ Establishing connection to Galvan Prime Cloud..."
        
        if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
          echo "❌ CRITICAL: RCLONE_CONFIG secret missing!"
          exit 1
        fi
        
        # Create config directories
        mkdir -p ~/.config/rclone || true
        sudo mkdir -p /root/.config/rclone || true
        
        # Deploy configuration
        echo "🔐 Deploying Galvan Prime credentials..."
        if echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d >/dev/null 2>&1; then
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d | sudo tee /root/.config/rclone/rclone.conf >/dev/null
        else
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          echo "${{ secrets.RCLONE_CONFIG }}" | sudo tee /root/.config/rclone/rclone.conf >/dev/null
        fi
        
        chmod 600 ~/.config/rclone/rclone.conf || true
        sudo chmod 600 /root/.config/rclone/rclone.conf || true
        
        # Test connectivity
        echo "🧪 Testing Galvan Prime connectivity..."
        if rclone lsd mega: >/dev/null 2>&1 || sudo rclone lsd mega: >/dev/null 2>&1; then
          echo "✅ Galvan Prime connection established! 🌌"
        else
          echo "⚠️ Connectivity test failed, proceeding with limited cloud features"
        fi

    - name: "🔍 SCANNING FOR TEMPORAL DATA CORES"
      id: data_core_scan
      run: |
        set -e
        
        echo "🔍 Scanning for temporal data cores..."
        
        RECOVERY_SUCCESS=false
        
        # Check Galvan Prime for backup links
        echo "🛸 Scanning Galvan Prime vault..."
        if rclone ls "${GALVAN_CLOUD}/temporal_backup_link.txt" >/dev/null 2>&1 || sudo rclone ls "${GALVAN_CLOUD}/temporal_backup_link.txt" >/dev/null 2>&1; then
          BACKUP_LINK=$(rclone cat "${GALVAN_CLOUD}/temporal_backup_link.txt" 2>/dev/null || sudo rclone cat "${GALVAN_CLOUD}/temporal_backup_link.txt" 2>/dev/null)
          if [[ -n "$BACKUP_LINK" ]]; then
            echo "✅ Found Galvan Prime backup link!"
            echo "has_backup=true" >> $GITHUB_OUTPUT
            echo "backup_source=galvan_prime" >> $GITHUB_OUTPUT
            echo "artifact_url=$BACKUP_LINK" >> $GITHUB_OUTPUT
            RECOVERY_SUCCESS=true
          fi
        fi
        
        # Check GitHub artifacts
        if [[ "$RECOVERY_SUCCESS" == "false" ]]; then
          echo "🔍 Scanning GitHub artifacts..."
          WORKFLOW_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" 2>/dev/null || echo "")
          
          if [[ -n "$WORKFLOW_RESPONSE" ]]; then
            WORKFLOW_ID=$(echo "$WORKFLOW_RESPONSE" | jq -r '.workflows[] | select(.name | test("OMNITRIX|Ben|Persistent"; "i")) | .id' | head -1)
            
            if [[ -n "$WORKFLOW_ID" && "$WORKFLOW_ID" != "null" ]]; then
              RUNS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs?status=success&per_page=5" 2>/dev/null || echo "")
              
              if [[ -n "$RUNS_RESPONSE" ]]; then
                RECENT_RUN=$(echo "$RUNS_RESPONSE" | jq -r --argjson current "${{ github.run_id }}" '.workflow_runs[] | select(.id != $current) | .id' | head -1)
                
                if [[ -n "$RECENT_RUN" && "$RECENT_RUN" != "null" ]]; then
                  ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RECENT_RUN/artifacts" 2>/dev/null || echo "")
                  
                  if [[ -n "$ARTIFACTS_RESPONSE" ]]; then
                    ARTIFACT_ID=$(echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | select(.name | test("backup|omnitrix|data"; "i")) | .id' | head -1)
                    
                    if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
                      ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip"
                      echo "✅ Found GitHub artifact backup!"
                      echo "has_backup=true" >> $GITHUB_OUTPUT
                      echo "backup_source=github_artifact" >> $GITHUB_OUTPUT
                      echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
                      RECOVERY_SUCCESS=true
                    fi
                  fi
                fi
              fi
            fi
          fi
        fi
        
        # Check direct Galvan Prime backups
        if [[ "$RECOVERY_SUCCESS" == "false" ]]; then
          echo "🛸 Checking direct Galvan Prime backups..."
          BACKUP_LIST=$(rclone lsf "${GALVAN_CLOUD}/" 2>/dev/null || sudo rclone lsf "${GALVAN_CLOUD}/" 2>/dev/null || echo "")
          if [[ -n "$BACKUP_LIST" ]]; then
            LATEST_BACKUP=$(echo "$BACKUP_LIST" | grep -E "(backup|omnitrix).*\.tar\.gz" | sort -r | head -1)
            if [[ -n "$LATEST_BACKUP" ]]; then
              echo "✅ Found direct Galvan backup!"
              echo "has_backup=true" >> $GITHUB_OUTPUT
              echo "backup_source=galvan_direct" >> $GITHUB_OUTPUT
              echo "backup_file=$LATEST_BACKUP" >> $GITHUB_OUTPUT
              RECOVERY_SUCCESS=true
            fi
          fi
        fi
        
        if [[ "$RECOVERY_SUCCESS" == "false" ]]; then
          echo "ℹ️ No temporal data cores found - fresh installation mode"
          echo "has_backup=false" >> $GITHUB_OUTPUT
          echo "backup_source=none" >> $GITHUB_OUTPUT
        else
          echo "✅ TEMPORAL DATA CORE RECOVERY SUCCESSFUL! 🎯"
        fi

    - name: "📥 TEMPORAL DATA CORE RESTORATION"
      if: steps.data_core_scan.outputs.has_backup == 'true'
      run: |
        set -e
        
        echo "═══════════════════════════════════════════════════════════"
        echo "📥        TEMPORAL DATA CORE RESTORATION               👽"
        echo "═══════════════════════════════════════════════════════════"
        echo "🔋 Source: ${{ steps.data_core_scan.outputs.backup_source }}"
        
        # Create restoration chamber
        RESTORE_CHAMBER="/tmp/omnitrix_restore"
        sudo mkdir -p "$RESTORE_CHAMBER"
        cd "$RESTORE_CHAMBER"
        
        # Download/restore based on source
        case "${{ steps.data_core_scan.outputs.backup_source }}" in
          "galvan_prime"|"github_artifact")
            echo "🌌 Downloading from ${{ steps.data_core_scan.outputs.backup_source }}..."
            
            for attempt in {1..3}; do
              if curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "${{ steps.data_core_scan.outputs.artifact_url }}" -o data_core.zip; then
                echo "✅ Download successful!"
                break
              fi
              echo "⚠️ Download attempt $attempt failed, retrying..."
              sleep 5
            done
            
            if [[ ! -f data_core.zip ]]; then
              echo "❌ Download failed after all attempts"
              exit 1
            fi
            
            # Extract archive
            if ! unzip -q data_core.zip 2>/dev/null; then
              echo "⚠️ Quiet extraction failed, trying verbose..."
              unzip data_core.zip || {
                echo "❌ Archive extraction failed"
                exit 1
              }
            fi
            
            # Find backup file
            BACKUP_FILE=$(find . -name "*.tar.gz" -type f | head -1)
            if [[ ! -f "$BACKUP_FILE" ]]; then
              echo "❌ No backup file found in archive"
              exit 1
            fi
            ;;
            
          "galvan_direct")
            echo "🛸 Direct download from Galvan Prime..."
            BACKUP_FILE="${{ steps.data_core_scan.outputs.backup_file }}"
            
            if ! rclone copy "${GALVAN_CLOUD}/$BACKUP_FILE" . && ! sudo rclone copy "${GALVAN_CLOUD}/$BACKUP_FILE" .; then
              echo "❌ Direct download failed"
              exit 1
            fi
            ;;
        esac
        
        # Validate and extract backup
        if [[ -f "$BACKUP_FILE" ]]; then
          CORE_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
          echo "📋 Data Core Size: $CORE_SIZE"
          
          if tar -tzf "$BACKUP_FILE" >/dev/null 2>&1; then
            echo "✅ Data core integrity verified!"
          else
            echo "⚠️ Integrity check failed, attempting extraction anyway..."
          fi
          
          # Create staging area and extract
          STAGING_AREA="/tmp/restore_data"
          sudo mkdir -p "$STAGING_AREA"
          
          if tar -xzf "$BACKUP_FILE" -C "$STAGING_AREA" 2>/dev/null || tar -xf "$BACKUP_FILE" -C "$STAGING_AREA" 2>/dev/null; then
            echo "✅ Data core extraction successful!"
          else
            echo "❌ Data core extraction failed"
            exit 1
          fi
          
          # Restore data with proper permissions
          echo "🔧 Restoring alien technology and data..."
          
          # Restore home directories
          if [[ -d "$STAGING_AREA/universe_preservation/home" ]]; then
            echo "🏠 Restoring hero base..."
            sudo cp -rf "$STAGING_AREA/universe_preservation/home"/* /home/ 2>/dev/null || true
          fi
          
          # Restore root directory
          if [[ -d "$STAGING_AREA/universe_preservation/root" ]]; then
            echo "👑 Restoring command center..."
            sudo cp -rf "$STAGING_AREA/universe_preservation/root/." /root/ 2>/dev/null || true
            sudo chown -R root:root /root 2>/dev/null || true
          fi
          
          # Restore Tailscale state
          if [[ -d "$STAGING_AREA/universe_preservation/tailscale" ]]; then
            echo "🔗 Restoring Plumber network state..."
            sudo mkdir -p /var/lib/tailscale
            sudo cp -rf "$STAGING_AREA/universe_preservation/tailscale"/* /var/lib/tailscale/ 2>/dev/null || true
            sudo chown -R root:root /var/lib/tailscale 2>/dev/null || true
          fi
          
          # Restore MariaDB data
          if [[ -d "$STAGING_AREA/universe_preservation/mysql" ]]; then
            echo "🗄️ Restoring database fortress..."
            sudo systemctl stop mariadb 2>/dev/null || true
            sleep 2
            sudo cp -rf "$STAGING_AREA/universe_preservation/mysql"/* /var/lib/mysql/ 2>/dev/null || true
            sudo chown -R mysql:mysql /var/lib/mysql 2>/dev/null || true
            sudo systemctl start mariadb 2>/dev/null || true
          fi
          
          # Restore web files
          if [[ -d "$STAGING_AREA/universe_preservation/www" ]]; then
            echo "🌐 Restoring web arsenal..."
            sudo mkdir -p /var/www
            sudo cp -rf "$STAGING_AREA/universe_preservation/www"/* /var/www/ 2>/dev/null || true
            sudo chown -R www-data:www-data /var/www 2>/dev/null || true
          fi
          
          # Restore aaPanel data
          if [[ -d "$STAGING_AREA/universe_preservation/aapanel" ]]; then
            echo "🎛️ Restoring alien control panel..."
            sudo cp -rf "$STAGING_AREA/universe_preservation/aapanel"/* /www/ 2>/dev/null || true
          fi
          
          # Restore system configs
          if [[ -d "$STAGING_AREA/universe_preservation/etc_configs" ]]; then
            echo "⚙️ Restoring system configurations..."
            sudo cp -rf "$STAGING_AREA/universe_preservation/etc_configs"/* /etc/ 2>/dev/null || true
          fi
          
          # Restore opt directory
          if [[ -d "$STAGING_AREA/universe_preservation/opt" ]]; then
            echo "👽 Restoring alien applications..."
            sudo cp -rf "$STAGING_AREA/universe_preservation/opt"/* /opt/ 2>/dev/null || true
          fi
          
          # Cleanup
          sudo rm -rf "$STAGING_AREA" "$RESTORE_CHAMBER"
          
          echo "✅ TEMPORAL DATA CORE RESTORATION COMPLETE! 🎉"
        else
          echo "❌ Backup file not found or invalid"
          exit 1
        fi

    - name: "👤 HERO ACCOUNT CONFIGURATION"
      run: |
        set -e
        
        echo "👤 Configuring Hero Account - Ben Tennyson Protocol..."
        
        if [[ -z "${{ secrets.USER_PASSWORD || '' }}" ]]; then
          echo "❌ CRITICAL: USER_PASSWORD secret missing!"
          exit 1
        fi
        
        # Create hero account
        if ! id jacky >/dev/null 2>&1; then
          sudo useradd -m -s /bin/bash jacky || {
            sudo adduser --disabled-password --gecos "" jacky
          }
          echo "✅ Hero account created!"
        else
          echo "✅ Hero account exists!"
        fi
        
        # Set password and permissions
        echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
        sudo usermod -aG sudo jacky 2>/dev/null || true
        echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/hero >/dev/null
        sudo chmod 440 /etc/sudoers.d/hero
        
        # Set hostname
        sudo hostnamectl set-hostname "$PLUMBER_NETWORK" 2>/dev/null || {
          echo "$PLUMBER_NETWORK" | sudo tee /etc/hostname >/dev/null
        }
        echo "127.0.1.1 $PLUMBER_NETWORK" | sudo tee -a /etc/hosts >/dev/null
        
        echo "✅ Hero account configured! 🦸‍♂️"

    - name: "🎛️ ALIEN CONTROL PANEL DEPLOYMENT"
      run: |
        set -e
        
        echo "🎛️ Deploying Alien Control Panel (aaPanel)..."
        
        # Check if already installed
        if command -v bt >/dev/null 2>&1 && [[ -d /www/server ]]; then
          echo "✅ Control panel already deployed!"
        else
          echo "🚀 Installing fresh control panel..."
          
          # Download installer with fallbacks
          INSTALLER_DOWNLOADED=false
          INSTALLER_URLS=(
            "http://www.aapanel.com/script/install_6.0_en.sh"
            "http://download.bt.cn/install/install_6.0_en.sh"
          )
          
          cd /tmp
          for url in "${INSTALLER_URLS[@]}"; do
            if curl -fsSL "$url" -o aapanel_install.sh; then
              INSTALLER_DOWNLOADED=true
              echo "✅ Installer downloaded from: $url"
              break
            fi
          done
          
          if [[ "$INSTALLER_DOWNLOADED" == "true" ]]; then
            chmod +x aapanel_install.sh
            
            # Install with timeout and automated responses
            echo "🤖 Running automated installation..."
            timeout 600 bash -c 'printf "y\nyes\ny\n" | sudo bash aapanel_install.sh' || {
              echo "⚠️ Installation timeout or failed, continuing..."
            }
            
            # Wait for initialization
            sleep 15
          else
            echo "⚠️ All installer URLs failed, skipping aaPanel installation"
          fi
        fi
        
        # Configure credentials if panel exists
        if command -v bt >/dev/null 2>&1; then
          echo "🔧 Configuring control panel credentials..."
          
          # Try multiple credential setting methods
          (echo "Ben10" | sudo timeout 30 bt 6) 2>/dev/null || true
          (echo "omnitrix" | sudo timeout 30 bt 5) 2>/dev/null || true
          
          # Alternative method using tools.py
          if [[ -f /www/server/panel/tools.py ]]; then
            cd /www/server/panel
            sudo timeout 30 python3 tools.py username Ben10 2>/dev/null || true
            sudo timeout 30 python3 tools.py password omnitrix 2>/dev/null || true
          fi
          
          echo "✅ Control panel configured! Username: Ben10, Password: omnitrix"
        fi

    - name: "🗄️ DATABASE FORTRESS INITIALIZATION"
      run: |
        set -e
        
        echo "🗄️ Initializing Database Fortress (MariaDB)..."
        
        # Start MariaDB
        sudo systemctl enable mariadb || true
        sudo systemctl start mariadb || {
          echo "⚠️ MariaDB start failed, attempting repair..."
          sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql 2>/dev/null || true
          sudo systemctl start mariadb || true
        }
        
        # Wait for service to be ready
        sleep 5
        
        # Configure database
        if sudo systemctl is-active mariadb >/dev/null 2>&1; then
          echo "✅ Database fortress online!"
          
          # Set root password if provided
          if [[ -n "${{ secrets.DB_ROOT_PASSWORD || '' }}" ]]; then
            sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';" 2>/dev/null || \
            sudo mysqladmin -u root password '${{ secrets.DB_ROOT_PASSWORD }}' 2>/dev/null || true
            
            # Create databases
            sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "CREATE DATABASE IF NOT EXISTS omnitrix_data;" 2>/dev/null || \
            sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "CREATE DATABASE IF NOT EXISTS test;" 2>/dev/null || true
          else
            # Default setup without password
            sudo mysql -e "CREATE DATABASE IF NOT EXISTS omnitrix_data;" 2>/dev/null || \
            sudo mysql -e "CREATE DATABASE IF NOT EXISTS test;" 2>/dev/null || true
          fi
        else
          echo "⚠️ Database fortress offline, manual intervention may be required"
        fi
        
        echo "✅ Database fortress initialized!"

    - name: "⚡ ALIEN POWER SYSTEMS ACTIVATION"
      run: |
        set -e
        
        echo "⚡ Activating alien power systems..."
        
        # Reload configurations
        sudo systemctl daemon-reload
        
        # Start essential services
        SERVICES=("ssh" "mariadb")
        
        for service in "${SERVICES[@]}"; do
          echo "⚡ Activating $service..."
          sudo systemctl enable "$service" 2>/dev/null || true
          sudo systemctl start "$service" 2>/dev/null || {
            sudo systemctl restart "$service" 2>/dev/null || true
          }
        done
        
        # Start optional services
        OPTIONAL=("docker" "nginx" "apache2")
        for service in "${OPTIONAL[@]}"; do
          if systemctl list-units --all | grep -q "$service"; then
            sudo systemctl enable --now "$service" 2>/dev/null || true
          fi
        done
        
        # Start aaPanel
        if command -v bt >/dev/null 2>&1; then
          sudo bt start 2>/dev/null || \
          sudo systemctl start bt 2>/dev/null || \
          sudo /etc/init.d/bt start 2>/dev/null || true
        fi
        
        sleep 5
        
        # Power system status
        echo "═══════════════════════════════════════════════════════════"
        echo "🔋            POWER SYSTEM STATUS                     ⚡"
        echo "═══════════════════════════════════════════════════════════"
        
        for service in ssh mariadb docker bt; do
          if systemctl is-active "$service" >/dev/null 2>&1; then
            echo "  ✅ $service - ONLINE"
          else
            echo "  ⚠️ $service - OFFLINE"
          fi
        done
        
        echo "═══════════════════════════════════════════════════════════"
        echo "✅ POWER SYSTEMS ACTIVATED!"

    - name: "🔗 PLUMBER NETWORK INTEGRATION"
      run: |
        set -e
        
        echo "🔗 Establishing Plumber Network connection..."
        
        if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
          echo "❌ CRITICAL: TAILSCALE_AUTHKEY missing!"
          exit 1
        fi
        
        # Install Tailscale
        if ! command -v tailscale >/dev/null 2>&1; then
          if curl -fsSL https://tailscale.com/install.sh | sh; then
            echo "✅ Tailscale installed!"
          else
            echo "⚠️ Tailscale installation failed, trying package manager..."
            curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
            curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
            sudo apt-get update && sudo apt-get install -y tailscale
          fi
        fi
        
        # Start Tailscale service
        sudo systemctl enable --now tailscaled || true
        sleep 3
        
        # Connect to network
        CONNECTED=false
        for attempt in {1..3}; do
          if sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname="$PLUMBER_NETWORK" --reset --accept-routes; then
            CONNECTED=true
            echo "✅ Plumber network connected!"
            break
          fi
          echo "⚠️ Connection attempt $attempt failed, retrying..."
          sleep 10
        done
        
        # Start emergency communications
        if command -v tmate >/dev/null 2>&1; then
          tmate -S /tmp/emergency.sock new-session -d 2>/dev/null || true
          tmate -S /tmp/emergency.sock wait tmate-ready 2>/dev/null || true
        fi
        
        # Network status
        echo "═══════════════════════════════════════════════════════════"
        echo "🌌           PLUMBER NETWORK STATUS                   🔗"
        echo "═══════════════════════════════════════════════════════════"
        
        if [[ "$CONNECTED" == "true" ]]; then
          PLUMBER_IP=$(sudo tailscale ip -4 2>/dev/null || echo "Acquiring...")
          echo "🌐 Network IP: $PLUMBER_IP"
          echo "🏢 Status: CONNECTED TO HQ"
          
          if command -v tmate >/dev/null 2>&1; then
            EMERGENCY_SSH=$(tmate -S /tmp/emergency.sock display -p '#{tmate_ssh}' 2>/dev/null || echo "Initializing...")
            echo "🚨 Emergency SSH: $EMERGENCY_SSH"
          fi
          
          echo "🔐 Hero SSH: ssh jacky@$PLUMBER_IP"
          
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Control Panel: http://$PLUMBER_IP:7800"
            echo "   Username: Ben10 | Password: omnitrix"
          fi
        else
          echo "⚠️ Network: OFFLINE"
        fi
        
        echo "═══════════════════════════════════════════════════════════"
        echo "✅ PLUMBER NETWORK INTEGRATION COMPLETE!"

    - name: "👽 DEBUG SESSION"
      if: github.event.inputs.debug_session == 'true'
      run: |
        echo "🧠 BRAINSTORM DEBUG MODE ACTIVATED!"
        echo "⏰ Debug session: 15 minutes"
        
        echo "📊 System Analysis:"
        df -h | head -5
        free -h
        sudo tailscale status 2>/dev/null || echo "Tailscale status unavailable"
        
        echo "🔍 15-minute debug window active..."
        sleep 900
        
        echo "✅ Debug session complete!"

    - name: "🛸 OMNITRIX OPERATIONAL SESSION"
      run: |
        set -e
        
        echo "═══════════════════════════════════════════════════════════"
        echo "🛸           OMNITRIX OPERATIONAL SESSION              👽"
        echo "═══════════════════════════════
