name: Persistent VPS with Complete Backup

on:
  workflow_dispatch:
  workflow_call:

env:
  VPS_USER: jacky
  VPS_PASSWORD: root
  VPS_HOSTNAME: github-vps
  BACKUP_DIR: vps-backup
  SESSION_TIMEOUT: 6h

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # ===== INITIALIZATION =====
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system tools
        run: |
          sudo apt update
          sudo apt install -y curl tmate

      # ===== RCLONE SETUP =====
      - name: Install and configure rclone
        run: |
          # Install rclone
          curl -Of https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip -a rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/
          sudo chown root:root /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          
          # Configure MEGA
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF
          
          echo "✅ Rclone configured with MEGA"
          rclone about mega: || echo "⚠️ MEGA connection test failed"

      # ===== USER SETUP =====
      - name: Create user with sudo access
        run: |
          if ! id -u ${{ env.VPS_USER }} >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }}:${{ env.VPS_PASSWORD }}" | sudo chpasswd
            sudo usermod -aG sudo ${{ env.VPS_USER }}
            echo "✅ User ${{ env.VPS_USER }} created with sudo access"
          else
            echo "🔁 User ${{ env.VPS_USER }} already exists"
          fi

      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname ${{ env.VPS_HOSTNAME }}
          echo "🏷️ Hostname set to $(hostname)"

      # ===== COMPLETE BACKUP RESTORATION =====
      - name: Restore from previous backup
        run: |
          mkdir -p restore
          echo "🔄 Restoring previous session state..."
          
          # List of backup components to restore
          backup_components=(
            "user-home.tar.gz 🏠 User data"
            "system-packages.list 📦 System packages" 
            "webserver-config.tar.gz 🌐 Web server config"
            "webserver-data.tar.gz 💾 Website data"
            "all-databases.sql.gz 🗄️ Databases"
            "aapanel-config.tar.gz ⚙️ aaPanel config"
            "php-config.tar.gz 🐘 PHP config"
            "system-services.tar.gz 🔧 System services"
          )
          
          # Restore each component
          for component in "${backup_components[@]}"; do
            file=$(echo $component | awk '{print $1}')
            description=$(echo $component | cut -d' ' -f2-)
            
            if rclone copy mega:${{ env.BACKUP_DIR }}/$file restore/ --progress 2>/dev/null; then
              echo "$description restoring..."
              
              case $file in
                *.tar.gz)
                  sudo tar -xzf restore/$file -C /
                  ;;
                *.list)
                  if [ "$file" = "system-packages.list" ]; then
                    sudo apt-get update
                    sudo dpkg --set-selections < restore/$file
                    sudo apt-get upgrade -y
                    sudo apt-get dselect-upgrade -y
                  fi
                  ;;
                *.sql.gz)
                  if command -v mysql >/dev/null 2>&1; then
                    gunzip -c restore/$file | sudo mysql
                  fi
                  ;;
              esac
              echo "✅ $description restored"
            else
              echo "⚠️ $description not found (fresh install)"
            fi
          done
          
          # Start services if they were restored
          sudo systemctl start mysql 2>/dev/null || true
          sudo systemctl start apache2 2>/dev/null || true
          sudo systemctl start nginx 2>/dev/null || true
          
          echo "✅ Restoration completed"

      # ===== TAILSCALE SETUP =====
      - name: Setup Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname ${{ env.VPS_HOSTNAME }} --ssh
          
          echo "🌐 Tailscale IP: $(tailscale ip -4)"
          echo "🔑 SSH: ssh ${{ env.VPS_USER }}@$(tailscale ip -4)"

      # ===== VPS SESSION =====
      - name: Start VPS session
        run: |
          echo "🚀 VPS Session Started"
          echo "========================"
          echo "👤 User: ${{ env.VPS_USER }}"
          echo "🔑 Pass: ${{ env.VPS_PASSWORD }}"
          echo "🌐 IP: $(tailscale ip -4)"
          echo "⏰ Timeout: ${{ env.SESSION_TIMEOUT }}"
          echo "========================"
          
          # Start tmate session
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "🔗 Connect: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          
          # Keep session alive
          sleep 21600  # 6 hours

      # ===== COMPLETE BACKUP CREATION =====
      - name: Create complete backup
        if: always()
        run: |
          mkdir -p backup
          echo "💾 Creating complete backup of everything..."
          
          # 1. Backup user home directory
          echo "📁 Backing up user data..."
          sudo tar -czf backup/user-home.tar.gz \
            -C /home ${{ env.VPS_USER }} \
            --exclude='.cache' \
            --exclude='node_modules' \
            --exclude='*.tmp' \
            --exclude='*.log' \
            --warning=no-file-changed \
            . 2>/dev/null || echo "⚠️ User data backup incomplete"

          # 2. Backup system packages
          echo "📦 Backing up installed packages..."
          dpkg --get-selections > backup/system-packages.list
          apt-mark showauto > backup/auto-packages.list

          # 3. Backup web server configurations (Apache/Nginx)
          echo "🌐 Backing up web server configs..."
          sudo tar -czf backup/webserver-config.tar.gz \
            --ignore-failed-read \
            /etc/apache2 /etc/nginx /etc/letsencrypt \
            2>/dev/null || echo "⚠️ Web server config not found"

          # 4. Backup website data
          echo "💾 Backing up website data..."
          sudo tar -czf backup/webserver-data.tar.gz \
            --ignore-failed-read \
            /var/www /home/${{ env.VPS_USER }}/www \
            /home/${{ env.VPS_USER }}/public_html \
            2>/dev/null || echo "⚠️ Website data not found"

          # 5. Backup databases (MySQL/MariaDB) - FIXED LINE
          echo "🗄️ Backing up databases..."
          if command -v mysql >/dev/null 2>&1; then
            # Backup all databases (simplified command)
            sudo mysqldump --all-databases --single-transaction > backup/all-databases.sql 2>/dev/null || \
              echo "⚠️ Could not backup databases"
            # Compress database backup
            gzip -f backup/all-databases.sql || true
          else
            echo "⚠️ MySQL not installed, skipping database backup"
          fi

          # 6. Backup aaPanel configuration
          echo "⚙️ Backing up aaPanel config..."
          sudo tar -czf backup/aapanel-config.tar.gz \
            --ignore-failed-read \
            /www/server/panel /www/server/data \
            /www/server/nginx /www/server/apache \
            /www/server/php /www/server/mysql \
            2>/dev/null || echo "⚠️ aaPanel not installed"

          # 7. Backup PHP configuration
          echo "🐘 Backing up PHP config..."
          sudo tar -czf backup/php-config.tar.gz \
            --ignore-failed-read \
            /etc/php /usr/lib/php /usr/local/php \
            2>/dev/null || echo "⚠️ PHP config not found"

          # 8. Backup system services
          echo "🔧 Backing up system services..."
          sudo tar -czf backup/system-services.tar.gz \
            --ignore-failed-read \
            /etc/systemd/system /lib/systemd/system \
            /etc/init.d /etc/default \
            2>/dev/null || echo "⚠️ System services backup incomplete"

          # 9. Create backup manifest
          echo "📝 Creating backup manifest..."
          cat > backup/manifest.txt << EOF
Backup created: $(date)
Components backed up:
- User home directory
- System packages
- Web server configurations
- Website data
- Databases
- aaPanel configuration
- PHP configuration
- System services
EOF

          echo "✅ Complete backup created: $(du -sh backup)"

      # ===== UPLOAD COMPLETE BACKUP =====
      - name: Upload complete backup to MEGA
        if: always()
        run: |
          echo "☁️ Uploading complete backup to MEGA..."
          rclone mkdir mega:${{ env.BACKUP_DIR }} || true
          
          # Upload all backup components
          for backup_file in backup/*; do
            if [ -f "$backup_file" ]; then
              echo "⬆️ Uploading $(basename $backup_file)..."
              rclone copy "$backup_file" mega:${{ env.BACKUP_DIR }} --progress --no-traverse
            fi
          done
          
          echo "✅ Complete backup uploaded to MEGA"

      # ===== FINAL REPORT =====
      - name: Session report
        if: always()
        run: |
          echo "=================================="
          echo "VPS Session Completed"
          echo "=================================="
          echo "Status: ${{ job.status }}"
          echo "Backup: ✅ Complete system snapshot uploaded"
          echo "Includes: User data, Packages, Websites, Databases, Configs"
          echo "Next session will restore exact same state"
          echo "=================================="
