# üï∑Ô∏è Spidey Persistent VPS - Production Ready

name: Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:      # Manual trigger

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350  # 5 hours 50 minutes (GitHub max is 6 hours)

    steps:
      - name: 'üï∏Ô∏è Checkout Code'
        uses: actions/checkout@v4

      - name: 'üë§ Initial Setup: User, Hostname & Services'
        run: |
          set -euo pipefail
          echo "üöÄ Setting up fresh VPS environment..."
          
          # Create user jacky
          if ! id "jacky" &>/dev/null; then
            sudo useradd -m -s /bin/bash jacky
            echo "‚úÖ User 'jacky' created"
          fi
          
          # Set password and sudo privileges
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          
          # Set hostname
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts
          
          echo "‚úÖ Basic system setup completed."

      - name: '‚ö° Install System Tools & MariaDB'
        run: |
          set -euo pipefail
          echo "üöÄ Installing core system tools, MariaDB, rclone, and tmate..."
          
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            psmisc screen openssh-server apache2 \
            php php-mysql php-cli php-curl php-zip php-gd php-mbstring php-xml \
            mariadb-server \
            curl wget unzip tar gzip htop nano vim git net-tools

          # Install tmate
          if ! command -v tmate &>/dev/null; then
            sudo apt-get install -y tmate || {
              wget -q -O /tmp/tmate.tar.xz https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz
              tar -xf /tmp/tmate.tar.xz -C /tmp/
              sudo cp /tmp/tmate-2.4.0-static-linux-amd64/tmate /usr/local/bin/
              sudo chmod +x /usr/local/bin/tmate
            }
          fi

          # Install rclone
          curl -fsSL https://rclone.org/install.sh | sudo bash

          echo "‚úÖ All tools installed successfully."

      - name: 'üõ†Ô∏è Configure MariaDB for Aapanel & Tailscale'
        run: |
          set -euo pipefail
          echo "üîß Configuring MariaDB..."
          
          sudo systemctl unmask mariadb.service || true
          sudo systemctl enable --now mariadb.service

          echo "Creating Aapanel database user..."
          sudo mysql -u root -e "
            CREATE USER IF NOT EXISTS 'aapanel'@'localhost' IDENTIFIED BY 'aapanelpass';
            GRANT ALL PRIVILEGES ON *.* TO 'aapanel'@'localhost' WITH GRANT OPTION;
            FLUSH PRIVILEGES;
          "

      - name: 'üõ†Ô∏è Configure Rclone (MEGA)'
        run: |
          set -euo pipefail
          echo "üîê Setting up rclone configuration..."
          
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << 'EOF'
          ${{ secrets.RCLONE_CONFIG }}
          EOF
          chmod 600 ~/.config/rclone/rclone.conf
          rclone listremotes

      - name: '‚úÖ Test Rclone Connection'
        run: |
          set -euo pipefail
          if rclone about ${{ env.MEGA_REMOTE }}; then
            echo "‚úÖ MEGA connection works!"
          else
            echo "‚ùå MEGA connection failed"
            exit 1
          fi

      - name: 'üì¶ Install Aapanel'
        run: |
          set -euo pipefail
          echo "üì• Installing Aapanel control panel..."
          
          URL=https://www.aapanel.com/script/install_7.0_en.sh
          if [ -f /usr/bin/curl ]; then 
            curl -ksSO "$URL"
          else 
            wget --no-check-certificate -O install_7.0_en.sh "$URL"
          fi
          
          # Feed both prompts: "y" then "yes"
          ( echo y ; echo yes ) | sudo bash install_7.0_en.sh aapanel
          
          if command -v bt >/dev/null 2>&1; then
            echo "‚úÖ Aapanel installed successfully"
            sudo bt --version 2>/dev/null || true
          else
            echo "‚ö†Ô∏è Aapanel command 'bt' not found in PATH"
          fi

      - name: '‚ôªÔ∏è Restore MariaDB Data from Backup'
        run: |
          set -euo pipefail
          echo "Checking for existing MariaDB backup..."
          
          if rclone ls "${MEGA_REMOTE}/${BACKUP_NAME}" >/dev/null 2>&1; then
            echo "‚úÖ Backup found! Downloading and restoring..."
            mkdir -p /tmp/restore
            rclone copy "${MEGA_REMOTE}/${BACKUP_NAME}" /tmp/restore/
            sudo systemctl stop mariadb apache2 || true
            sudo tar -xzf "/tmp/restore/${BACKUP_NAME}" --absolute-names -C /
            sudo chown -R mysql:mysql /www/server/data
            sudo chmod -R 700 /www/server/data
            rm -f "/tmp/restore/${BACKUP_NAME}"
          else
            echo "‚ÑπÔ∏è No backup found. Continuing fresh."
          fi

      - name: 'üöÄ Finalize Configuration & Services'
        run: |
          set -euo pipefail
          sudo systemctl restart mariadb apache2
          echo "Jacky" | sudo bt 6 2>/dev/null || true
          echo "spidey" | sudo bt 5 2>/dev/null || true
          sudo bt default 2>/dev/null || true

      - name: 'üîó Configure Remote Access (Tailscale + MariaDB)'
        run: |
          set -euo pipefail
          echo "üï∏Ô∏è Setting up Tailscale..."
          
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes
          
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          
          sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'${TAILSCALE_IP}' IDENTIFIED BY '' WITH GRANT OPTION; FLUSH PRIVILEGES;"

          # Start tmate
          tmate -S /tmp/tmate.sock new-session -d 'echo "VPS Ready!"; bash'
          timeout 60 tmate -S /tmp/tmate.sock wait tmate-ready || true
          echo "SSH: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo "Web: $(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')"

      - name: '‚è≥ Maintain VPS Session'
        run: |
          set -euo pipefail
          echo "üñ•Ô∏è VPS session running..."
          for minute in {1..330}; do
            if [[ -f /tmp/stop_session ]]; then break; fi
            if (( minute % 30 == 0 )); then
              echo "‚è∞ Runtime: $minute minutes"
            fi
            sleep 60
          done

      - name: 'üì¶ Create Backup'
        if: always()
        run: |
          set -euo pipefail
          sudo mkdir -p "${BACKUP_STORE}"
          sudo systemctl stop apache2 mariadb || true
          sleep 5
          sudo tar -czf "${BACKUP_STORE}/${BACKUP_NAME}" \
            --absolute-names \
            /etc/hostname /etc/hosts /etc/passwd /etc/group /etc/shadow \
            /etc/sudoers.d/ /etc/systemd/system/ /etc/ssh/ \
            /etc/apache2/ /etc/mysql/ /var/lib/tailscale/ \
            /www/server/data/ /www/server/panel/ \
            /var/www/ /opt/ /srv/ /root/ /home/jacky/ \
            /usr/local/bin/ || true

      - name: '‚òÅÔ∏è Upload Backup to MEGA'
        if: always()
        run: |
          set -euo pipefail
          rclone copy "${BACKUP_STORE}/${BACKUP_NAME}" "${MEGA_REMOTE}" --progress
          sudo rm -f "${BACKUP_STORE}/${BACKUP_NAME}"

      - name: 'üõë Shutdown Runner on Cancel'
        if: always()
        run: |
          if [ "${{ job.status }}" = "cancelled" ]; then
            echo "‚ö†Ô∏è Workflow cancelled. Shutting down runner..."
            sudo systemctl stop apache2 mariadb tailscaled || true
            sudo pkill -u jacky || true
            sudo shutdown -h now || true
          else
            echo "‚ÑπÔ∏è Workflow ended normally, no forced shutdown needed."
          fi

      - name: 'üìã Final Status Report'
        if: always()
        run: |
          echo "============================================="
          echo "         üï∑Ô∏è VPS SESSION COMPLETE üï∑Ô∏è"
          echo "============================================="
          echo "üìÖ Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üè∑Ô∏è Status: ${{ job.status }}"
