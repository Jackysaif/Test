name: VPS Persistent Session with Backup/Restore
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

# Secrets required:
# TAILSCALE_AUTHKEY: Tailscale auth key for authentication
# MEGA_RCLONE: Base64 encoded rclone config for MEGA remote
# DB_ROOT_PASSWORD: Root password for MariaDB

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 390 # 6.5 hours to account for backup time + overhead
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Prepare environment and install dependencies
      run: |
        set -euo pipefail
        
        # Update package list and install required tools
        sudo apt-get update
        sudo apt-get install -y \
          rclone \
          jq \
          tar \
          gzip \
          expect \
          mariadb-server \
          curl \
          wget
        
        # Install Tailscale
        curl -fsSL https://tailscale.com/install.sh | sh
        
        # Install tmate for debugging (optional)
        sudo apt-get install -y tmate
        
        # Create rclone config directory and decode config
        mkdir -p ~/.config/rclone
        echo "${{ secrets.MEGA_RCLONE }}" | base64 -d > ~/.config/rclone/rclone.conf
        chmod 600 ~/.config/rclone/rclone.conf

    - name: Attempt restore from GitHub artifact
      id: restore-artifact
      continue-on-error: true
      run: |
        set -euo pipefail
        
        echo "Attempting to restore from GitHub artifact..."
        
        # Download latest artifact using GitHub API
        ARTIFACT_NAME="vps-backup"
        ARTIFACTS_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts"
        
        # Get artifacts list and find the latest vps-backup artifact
        ARTIFACT_ID=$(curl -s -H "Authorization: Bearer ${{ github.token }}" \
          "$ARTIFACTS_URL" | \
          jq -r ".artifacts | map(select(.name | startswith(\"$ARTIFACT_NAME\"))) | sort_by(.created_at) | last | .id")
        
        if [ "$ARTIFACT_ID" != "null" ] && [ -n "$ARTIFACT_ID" ]; then
          echo "Found artifact ID: $ARTIFACT_ID"
          
          # Download artifact
          curl -s -L -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ARTIFACTS_URL/$ARTIFACT_ID/zip" \
            -o backup-artifact.zip
          
          # Extract artifact
          unzip -q backup-artifact.zip
          
          if [ -f "vps-backup.tar.gz" ]; then
            echo "Extracting backup archive..."
            tar -xzf vps-backup.tar.gz -C /tmp/restore
            
            # Run restore script if exists
            if [ -f "/tmp/restore/restore.sh" ]; then
              chmod +x /tmp/restore/restore.sh
              sudo /tmp/restore/restore.sh
              echo "Artifact restore completed successfully"
              echo "RESTORE_SUCCESS=true" >> $GITHUB_ENV
            else
              echo "No restore.sh found in backup, performing manual restore"
              perform_manual_restore
            fi
          else
            echo "Backup file not found in artifact"
            exit 1
          fi
        else
          echo "No backup artifacts found"
          exit 1
        fi

    - name: Attempt restore from MEGA (if artifact restore failed)
      id: restore-mega
      if: steps.restore-artifact.outcome == 'failure'
      continue-on-error: true
      run: |
        set -euo pipefail
        
        echo "Attempting to restore from MEGA backup..."
        
        # List and find latest backup on MEGA
        LATEST_BACKUP=$(rclone lsf mega:vps-backups/ | grep "vps-backup-.*\.tar\.gz" | sort | tail -n1)
        
        if [ -n "$LATEST_BACKUP" ]; then
          echo "Downloading latest backup: $LATEST_BACKUP"
          rclone copy "mega:vps-backups/$LATEST_BACKUP" ./
          
          # Extract backup
          tar -xzf "$LATEST_BACKUP" -C /tmp/restore
          
          # Run restore script if exists
          if [ -f "/tmp/restore/restore.sh" ]; then
            chmod +x /tmp/restore/restore.sh
            sudo /tmp/restore/restore.sh
            echo "MEGA restore completed successfully"
            echo "RESTORE_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "No restore.sh found in backup, performing manual restore"
            perform_manual_restore
          fi
        else
          echo "No backups found on MEGA"
          exit 1
        fi

    - name: Fresh provision (if both restores failed)
      if: steps.restore-artifact.outcome == 'failure' && steps.restore-mega.outcome == 'failure'
      run: |
        set -euo pipefail
        
        echo "Performing fresh provisioning..."
        
        # Create user jacky with password spidey
        if ! id "jacky" &>/dev/null; then
          sudo useradd -m -s /bin/bash jacky
          echo "jacky:spidey" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "Created user jacky"
        fi
        
        # Set hostname
        sudo hostnamectl set-hostname Spidey
        
        # Install aaPanel
        echo "Installing aaPanel..."
        INSTALL_SCRIPT="/tmp/install-aapanel.sh"
        cat > $INSTALL_SCRIPT << 'EOF'
#!/usr/bin/expect -f
set timeout -1
spawn bash -c "wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh && sudo bash install.sh"
expect "Enter y to install panel.*"
send "y\r"
expect "force install.*"
send "yes\r"
expect eof
EOF
        
        chmod +x $INSTALL_SCRIPT
        sudo expect $INSTALL_SCRIPT
        
        # Configure aaPanel credentials
        sleep 10 # Wait for installation to complete
        sudo bt 5 Jacky
        sudo bt 6 spidey
        
        # Install and configure MariaDB
        echo "Installing and configuring MariaDB..."
        sudo apt-get install -y mariadb-server
        
        # Secure MariaDB installation and set root password
        sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';"
        sudo mysql -e "FLUSH PRIVILEGES;"
        
        # Create test database
        sudo mysql -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS test;"
        
        # Start and enable MariaDB
        sudo systemctl enable mariadb
        sudo systemctl start mariadb
        
        # Install and configure Tailscale
        echo "Setting up Tailscale..."
        sudo tailscale up --authkey "${{ secrets.TAILSCALE_AUTHKEY }}"
        
        echo "Fresh provisioning completed successfully"

    - name: Start services after restore
      if: steps.restore-artifact.outcome == 'success' || steps.restore-mega.outcome == 'success'
      run: |
        set -euo pipefail
        
        echo "Starting and verifying services..."
        
        # Start essential services
        sudo systemctl start mariadb || true
        sudo systemctl start tailscale || true
        
        # Try to start aaPanel if installed
        if [ -f "/etc/init.d/bt" ]; then
          sudo /etc/init.d/bt start || true
        fi
        
        # Verify services are running
        echo "Service status:"
        sudo systemctl status mariadb --no-pager -l || true
        sudo tailscale status || true

    - name: Main session loop with graceful shutdown detection
      run: |
        set -euo pipefail
        
        # Function to perform backup
        perform_backup() {
          echo "Starting backup process..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_DIR="/tmp/backup-$TIMESTAMP"
          BACKUP_FILE="vps-backup-$TIMESTAMP.tar.gz"
          MANIFEST_FILE="$BACKUP_DIR/backup-manifest.txt"
          
          mkdir -p "$BACKUP_DIR"
          
          # Create backup manifest
          cat > "$MANIFEST_FILE" << EOF
Backup created: $(date)
Included directories:
- /home
- /root 
- /etc
- /var/www
- /opt
- /var/lib/tailscale
- /var/lib/mysql
- aaPanel data directories
EOF
          
          # Create restore script
          cat > "$BACKUP_DIR/restore.sh" << 'EOF'
#!/bin/bash
set -euo pipefail

echo "Starting restore process..."
BACKUP_DIR=$(dirname "$0")

# Stop services for safe restore
sudo systemctl stop mariadb || true
if [ -f "/etc/init.d/bt" ]; then
  sudo /etc/init.d/bt stop || true
fi

# Restore directories with proper permissions
sudo tar -xzf "$BACKUP_DIR/backup-data.tar.gz" -C /

# Restore Tailscale state if available
if [ -d "/var/lib/tailscale" ]; then
  sudo chown -R tailscale:tailscale /var/lib/tailscale
fi

# Restore MariaDB data with correct permissions
if [ -d "/var/lib/mysql" ]; then
  sudo chown -R mysql:mysql /var/lib/mysql
fi

# Restore home directories
sudo chown -R root:root /root
find /home -exec sudo chown --reference=/etc/passwd {} \; 2>/dev/null || true

echo "Restore completed"
EOF
          
          chmod +x "$BACKUP_DIR/restore.sh"
          
          # Create data archive (excluding large temporary files)
          sudo tar -czf "$BACKUP_DIR/backup-data.tar.gz" \
            --exclude="*.tmp" \
            --exclude="*.log" \
            --exclude="cache/*" \
            --exclude="tmp/*" \
            /home \
            /root \
            /etc \
            /var/www \
            /opt \
            /var/lib/tailscale \
            /var/lib/mysql \
            /www/server/panel/data 2>/dev/null || true
          
          # Create final backup archive
          tar -czf "$BACKUP_FILE" -C "$BACKUP_DIR" .
          
          echo "Backup created: $BACKUP_FILE"
        }
        
        # Main loop
        echo "Starting main session loop (will run for ~6 hours)"
        START_TIME=$(date +%s)
        MAX_DURATION=21600 # 6 hours in seconds
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          
          # Check if we should exit due to time or graceful shutdown
          if [ $ELAPSED -ge $MAX_DURATION ]; then
            echo "Time limit reached, performing final backup..."
            perform_backup
            break
          fi
          
          if [ -f "/tmp/stop" ]; then
            echo "Graceful shutdown requested, performing final backup..."
            perform_backup
            sudo rm -f /tmp/stop
            break
          fi
          
          # Normal operation - simulate some work
          echo "VPS session active - $(date)"
          sleep 300 # Check every 5 minutes
        done

    - name: Upload backup to GitHub artifact
      run: |
        set -euo pipefail
        
        # Find the latest backup file
        LATEST_BACKUP=$(ls -t vps-backup-*.tar.gz | head -n1)
        
        if [ -n "$LATEST_BACKUP" ]; then
          echo "Uploading $LATEST_BACKUP as GitHub artifact"
          
          # Upload artifact
          echo "BACKUP_FILE=$LATEST_BACKUP" >> $GITHUB_ENV
        else
          echo "No backup file found for artifact upload"
          exit 1
        fi

    - name: Upload artifact to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: vps-backup
        path: ${{ env.BACKUP_FILE }}

    - name: Upload backup to MEGA and generate share link
      run: |
        set -euo pipefail
        
        if [ -n "${{ env.BACKUP_FILE }}" ]; then
          echo "Uploading ${{ env.BACKUP_FILE }} to MEGA..."
          
          # Upload to MEGA
          rclone copy "${{ env.BACKUP_FILE }}" mega:vps-backups/
          
          # Create public link (MEGA doesn't support direct public links via rclone easily)
          # We'll use rclone link command which may require premium account
          # Alternatively, we can just note the filename for manual retrieval
          echo "https://mega.nz/folder/backups" > mega-backup-link.txt
          echo "Backup uploaded to MEGA: ${{ env.BACKUP_FILE }}" >> mega-backup-link.txt
          
          # Also add link to artifact for documentation
          cp mega-backup-link.txt ./
        else
          echo "No backup file available for MEGA upload"
        fi

    - name: Upload MEGA link as artifact
      uses: actions/upload-artifact@v4
      with:
        name: mega-backup-info
        path: mega-backup-link.txt

# Helper function for manual restore (called from restore steps)
perform_manual_restore() {
  echo "Performing manual restore from backup files..."
  
  # Stop services for safe restore
  sudo systemctl stop mariadb || true
  if [ -f "/etc/init.d/bt" ]; then
    sudo /etc/init.d/bt stop || true
  fi
  
  # Extract data archive
  if [ -f "/tmp/restore/backup-data.tar.gz" ]; then
    sudo tar -xzf "/tmp/restore/backup-data.tar.gz" -C /
  fi
  
  # Restore permissions
  if [ -d "/var/lib/tailscale" ]; then
    sudo chown -R tailscale:tailscale /var/lib/tailscale
  fi
  
  if [ -d "/var/lib/mysql" ]; then
    sudo chown -R mysql:mysql /var/lib/mysql
  fi
  
  sudo chown -R root:root /root
  find /home -exec sudo chown --reference=/etc/passwd {} \; 2>/dev/null || true
  
  echo "Manual restore completed"
}
