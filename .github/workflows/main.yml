name: Rocket-Powered Persistent VPS

on:
  workflow_dispatch:
    inputs:
      skip_restore:
        description: 'Skip restoration from backup (fresh start)'
        required: false
        default: 'false'
        type: boolean
  workflow_call:

env:
  VPS_USER: jacky
  VPS_PASSWORD: root
  VPS_HOSTNAME: github-vps
  BACKUP_RETENTION_DAYS: 7
  SESSION_TIMEOUT_MINUTES: 360

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ env.SESSION_TIMEOUT_MINUTES }}

    steps:
      # ===== INITIALIZATION =====
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup system
        run: |
          sudo apt update
          sudo apt install -y curl tmate jq pv bc software-properties-common
          echo "üöÄ System tools installed"

      # ===== SECURE SETUP =====
      - name: Configure secure user
        run: |
          if ! id -u ${{ env.VPS_USER }} >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash ${{ env.VPS_USER }}
            echo "${{ env.VPS_USER }}:${{ env.VPS_PASSWORD }}" | sudo chpasswd
            sudo usermod -aG sudo ${{ env.VPS_USER }}
            
            # Secure SSH configuration
            sudo mkdir -p /home/${{ env.VPS_USER }}/.ssh
            sudo chmod 700 /home/${{ env.VPS_USER }}/.ssh
            sudo chown ${{ env.VPS_USER }}:${{ env.VPS_USER }} /home/${{ env.VPS_USER }}/.ssh
            
            echo "‚úÖ User ${{ env.VPS_USER }} created with sudo privileges"
          else
            echo "üîÅ User ${{ env.VPS_USER }} already exists"
          fi

      - name: Set hostname and optimize system
        run: |
          sudo hostnamectl set-hostname ${{ env.VPS_HOSTNAME }}
          echo "üè∑Ô∏è Hostname set to $(hostname)"
          
          # System optimization
          echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.conf
          echo "vm.vfs_cache_pressure=50" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      # ===== BACKUP RESTORATION =====
      - name: Install GitHub CLI
        if: ${{ !inputs.skip_restore }}
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Discover latest backup
        if: ${{ !inputs.skip_restore }}
        id: discover-backup
        run: |
          mkdir -p restore
          
          # Get all releases and find the latest valid backup
          RELEASES=$(gh release list --limit 20 --json tagName,createdAt --repo "${{ github.repository }}" | jq -c '.[]')
          
          LATEST_BACKUP=""
          LATEST_TIMESTAMP=""
          
          while IFS= read -r release; do
            tag=$(echo "$release" | jq -r '.tagName')
            if [[ "$tag" == vps-backup-* ]]; then
              LATEST_BACKUP="$tag"
              LATEST_TIMESTAMP=$(echo "$release" | jq -r '.createdAt')
              break
            fi
          done <<< "$RELEASES"
          
          if [ -n "$LATEST_BACKUP" ]; then
            echo "backup_tag=$LATEST_BACKUP" >> $GITHUB_OUTPUT
            echo "backup_timestamp=$LATEST_TIMESTAMP" >> $GITHUB_OUTPUT
            echo "üì¶ Found backup: $LATEST_BACKUP (from $LATEST_TIMESTAMP)"
          else
            echo "‚ö†Ô∏è No backup found, starting fresh"
          fi

      - name: Download and validate backup
        if: steps.discover-backup.outputs.backup_tag != ''
        run: |
          echo "üì• Downloading backup: ${{ steps.discover-backup.outputs.backup_tag }}"
          
          # Download all backup files with progress
          gh release download "${{ steps.discover-backup.outputs.backup_tag }}" \
            --dir restore \
            --repo "${{ github.repository }}" \
            --clobber
          
          # Validate downloaded files
          echo "üîç Validating backup integrity..."
          for file in restore/*.tar.gz; do
            if [ -f "$file" ]; then
              if gzip -t "$file"; then
                echo "‚úÖ $(basename $file): Valid archive ($(du -h $file | cut -f1))"
                echo "   Contents: $(tar -tzf $file | wc -l) files"
              else
                echo "‚ùå $(basename $file): Corrupted, removing"
                rm -f "$file"
              fi
            fi
          done
          
          if [ -f "restore/installed-packages.list" ]; then
            echo "‚úÖ installed-packages.list: Valid ($(wc -l < restore/installed-packages.list) packages)"
          fi

      - name: Restore system state
        if: steps.discover-backup.outputs.backup_tag != ''
        run: |
          echo "üîÑ Restoring system state..."
          
          # Restore user data with progress
          if [ -f "restore/jacky-home-full.tar.gz" ]; then
            echo "üè† Restoring user home directory..."
            sudo tar -xzf restore/jacky-home-full.tar.gz -C / | pv -l -s $(tar -tzf restore/jacky-home-full.tar.gz | wc -l) > /dev/null
          fi
          
          # Restore system services
          if [ -f "restore/services-backup.tar.gz" ]; then
            echo "üîß Restoring system services..."
            sudo tar -xzf restore/services-backup.tar.gz -C /
          fi
          
          # Restore configurations
          if [ -f "restore/system-config.tar.gz" ]; then
            echo "‚öôÔ∏è Restoring system configurations..."
            sudo tar -xzf restore/system-config.tar.gz -C /
          fi
          
          # Reinstall packages
          if [ -f "restore/installed-packages.list" ]; then
            echo "üì¶ Reinstalling packages..."
            sudo apt-get update
            sudo dpkg --set-selections < restore/installed-packages.list
            sudo apt-get upgrade -y
            sudo apt-get dselect-upgrade -y
          fi
          
          echo "‚úÖ Restoration completed successfully"

      # ===== TAILSCALE SETUP =====
      - name: Setup Tailscale with state management
        run: |
          # Install Tailscale
          curl -fsSL https://tailscale.com/install.sh | sh
          
          # Handle Tailscale state
          if [ -f "/var/lib/tailscale/tailscaled.state" ]; then
            echo "üîÑ Using existing Tailscale state"
            sudo systemctl start tailscaled
            sleep 3
          else
            echo "üÜï Creating new Tailscale connection"
            sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname ${{ env.VPS_HOSTNAME }} --ssh
          fi
          
          # Display connection info
          echo "üåê Tailscale IP: $(tailscale ip -4 || echo 'Initializing...')"
          echo "üîë SSH: ssh ${{ env.VPS_USER }}@$(tailscale ip -4)"

      # ===== VPS SESSION =====
      - name: Start persistent session
        run: |
          echo "üöÄ Starting Rocket VPS Session"
          echo "=========================================="
          echo "üë§ Username: ${{ env.VPS_USER }}"
          echo "üîë Password: ${{ env.VPS_PASSWORD }}"
          echo "üåê IP: $(tailscale ip -4)"
          echo "üñ•Ô∏è Hostname: $(hostname)"
          echo "‚è∞ Timeout: ${{ env.SESSION_TIMEOUT_MINUTES }} minutes"
          echo "=========================================="
          
          # Start tmate session with enhanced logging
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          
          TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          TMATE_WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')
          
          echo "üîó SSH: $TMATE_SSH"
          echo "üåê Web: $TMATE_WEB"
          echo "üìù Session started at: $(date)"
          
          # Keep alive with heartbeat
          for i in $(seq 1 $((SESSION_TIMEOUT_MINUTES * 60 / 30))); do
            sleep 30
            echo "üíì Session heartbeat: $(date)"
          done

      # ===== INTELLIGENT BACKUP =====
      - name: Create smart backup
        if: always()
        run: |
          mkdir -p backup
          echo "üíæ Creating intelligent backup..."
          
          # Backup user data (with exclusion patterns)
          echo "üìÅ Backing up user data..."
          sudo tar -czf backup/jacky-home-full.tar.gz \
            -C /home ${{ env.VPS_USER }} \
            --exclude='.cache' \
            --exclude='.npm' \
            --exclude='.docker' \
            --exclude='*.tmp' \
            --exclude='*.log' \
            --exclude='node_modules' \
            --warning=no-file-changed \
            . 2>/dev/null || echo "‚ö†Ô∏è Some files changed during backup"
          
          # Backup system state
          echo "‚öôÔ∏è Backing up system configuration..."
          sudo tar -czf backup/system-config.tar.gz \
            --ignore-failed-read \
            /etc/ssh /etc/ssl /etc/cron.d /etc/systemd \
            /root/.ssh /home/${{ env.VPS_USER }}/.ssh 2>/dev/null || true
          
          # Backup services
          echo "üîß Backing up services..."
          sudo tar -czf backup/services-backup.tar.gz \
            --ignore-failed-read \
            /etc/apache2 /etc/nginx /etc/mysql /etc/php \
            /var/www /var/lib/mysql \
            /usr/local/*panel /opt/*panel 2>/dev/null || true
          
          # Backup package list
          echo "üì¶ Backing up package information..."
          dpkg --get-selections > backup/installed-packages.list
          apt-mark showauto > backup/auto-packages.list
          
          # Create backup manifest
          echo "üìù Creating backup manifest..."
          cat > backup/manifest.json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "version": "2.0",
            "components": {
              "user_data": {
                "file": "jacky-home-full.tar.gz",
                "size": "$(du -h backup/jacky-home-full.tar.gz | cut -f1)",
                "files": "$(tar -tzf backup/jacky-home-full.tar.gz 2>/dev/null | wc -l || echo 0)"
              },
              "system_config": {
                "file": "system-config.tar.gz",
                "size": "$(du -h backup/system-config.tar.gz | cut -f1)"
              },
              "services": {
                "file": "services-backup.tar.gz",
                "size": "$(du -h backup/services-backup.tar.gz | cut -f1)"
              },
              "packages": {
                "file": "installed-packages.list",
                "count": "$(wc -l < backup/installed-packages.list)"
              }
            },
            "system": {
              "hostname": "$(hostname)",
              "tailscale_ip": "$(tailscale ip -4 2>/dev/null || echo 'disconnected')",
              "disk_usage": "$(df -h / | awk 'NR==2{print $5}')"
            }
          }
          EOF
          
          echo "‚úÖ Backup created: $(du -sh backup)"

      - name: Upload backup to GitHub Releases
        if: always()
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_TAG="vps-backup-$TIMESTAMP"
          
          echo "‚òÅÔ∏è Uploading backup: $BACKUP_TAG"
          
          # Create release with all backup files
          gh release create "$BACKUP_TAG" \
            backup/*.tar.gz \
            backup/*.list \
            backup/manifest.json \
            --title "VPS Backup $TIMESTAMP" \
            --notes "Automated backup from Rocket VPS
- User: ${{ env.VPS_USER }}
- Hostname: $(hostname)
- IP: $(tailscale ip -4 2>/dev/null || echo 'disconnected')
- Size: $(du -sh backup | cut -f1)
- Components: User data, System config, Services, Packages" \
            --repo "${{ github.repository }}"
          
          echo "‚úÖ Backup uploaded successfully"

      - name: Cleanup old backups
        if: always()
        run: |
          echo "üßπ Cleaning up old backups (retention: ${{ env.BACKUP_RETENTION_DAYS }} days)"
          
          # Get all backup releases
          OLD_BACKUPS=$(gh release list --limit 50 --json tagName,createdAt --repo "${{ github.repository }}" | \
            jq -r '.[] | select(.tagName | startswith("vps-backup-")) | [.tagName, .createdAt] | @tsv' | \
            while read -r tag date; do
              if [ $(date -d "$date" +%s) -lt $(date -d "${{ env.BACKUP_RETENTION_DAYS }} days ago" +%s) ]; then
                echo "$tag"
              fi
            done)
          
          # Delete old backups
          for backup in $OLD_BACKUPS; do
            echo "üóëÔ∏è Deleting old backup: $backup"
            gh release delete "$backup" --yes --repo "${{ github.repository }}" || true
          done

      - name: Final status report
        if: always()
        run: |
          echo "=========================================="
          echo "üöÄ Rocket VPS Session Complete"
          echo "=========================================="
          if [ "${{ job.status }}" = "cancelled" ]; then
            echo "üü° Status: Session cancelled"
          elif [ "${{ job.status }}" = "failure" ]; then
            echo "üî¥ Status: Session failed"
          else
            echo "üü¢ Status: Session completed successfully"
          fi
          
          echo "üì¶ Backup: Created and uploaded to GitHub Releases"
          echo "üïí Duration: $(($GITHUB_RUN_ATTEMPT / 60)) minutes"
          echo "üíæ Disk usage: $(df -h / | awk 'NR==2{print $5}')"
          echo "=========================================="
