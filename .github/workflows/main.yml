# üï∑Ô∏è Spidey Persistent VPS - Optimized Workflow
# This is the complete and final version with all known fixes.

name: üï∑Ô∏è Spidey Persistent VPS - Optimized

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily backup at midnight

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  MEGA_REMOTE: mega:vps-backup # Rclone remote path

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # 1. Universal User Setup (runs every time to ensure the user exists)
      - name: üë§ Create user 'jacky' & Set Hostname
        run: |
          echo "üöÄ Creating universal user and hostname setup..."
          sudo useradd -m -s /bin/bash jacky
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          sudo hostnamectl set-hostname github-vps
          echo "‚úÖ User 'jacky' created and configured with password 'root'."
      
      # 2. Basic Setup & Tool Installation
      - name: üï∏Ô∏è Checkout Code
        uses: actions/checkout@v4

      - name: ‚ö° Install System Tools
        run: |
          echo "Installing core system tools..."
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar psmisc screen openssh-server rclone
          sudo systemctl enable --now ssh
          echo "‚úÖ Core tools installed."

      # 3. Restore or Initialize System
      - name: ‚ôªÔ∏è Restore from Backup OR Initialize
        id: restore
        run: |
          echo "üîç Checking for existing backup on MEGA..."
          if rclone ls ${MEGA_REMOTE}/${BACKUP_NAME} >/dev/null 2>&1; then
            echo "‚úÖ Backup found. Restoring system state..."
            # Configure Rclone temporarily to restore the backup
            mkdir -p ~/.config/rclone
            echo "[mega]
type = mega
user = ${{ secrets.MEGA_USER }}
pass = ${{ secrets.MEGA_PASS }}" | cat > ~/.config/rclone/rclone.conf
            rclone copy ${MEGA_REMOTE}/${BACKUP_NAME} /tmp/
            sudo tar -xzf /tmp/${BACKUP_NAME} --absolute-names -C /
            echo "is_new_install=false" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No backup found. This will be a fresh installation."
            sudo mkdir -p /home/jacky /opt /srv /var/www /var/lib/mysql /www/server
            echo "is_new_install=true" >> $GITHUB_OUTPUT
          fi
          
      # 4. Delete Backup from MEGA
      - name: üóëÔ∏è Delete Backup from MEGA
        if: steps.restore.outputs.is_new_install == 'false'
        run: |
          echo "Deleting backup file from MEGA remote..."
          # Re-create the Rclone config to ensure it's available
          mkdir -p ~/.config/rclone
          echo "[mega]
type = mega
user = ${{ secrets.MEGA_USER }}
pass = ${{ secrets.MEGA_PASS }}" | cat > ~/.config/rclone/rclone.conf
          rclone delete ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}
          echo "‚úÖ Backup deleted from MEGA."
      
      # 5. Start Core Services
      - name: üöÄ Start Core Services & Tailscale
        run: |
          echo "üîÑ (Re)loading system services..."
          sudo systemctl daemon-reload
          
          echo "üï∏Ô∏è Installing and starting Tailscale..."
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=github-vps --reset || true
          
          # Wait for Tailscale network to fully stabilize
          echo "Pausing for 10 seconds to allow Tailscale network to establish..."
          sleep 10
          echo "‚úÖ Core services are running."
          echo "üåê Tailscale IP: $(sudo tailscale ip -4 || echo 'Not available')"
      
      # 6. Start Tmate Session for debugging
      - name: üõ∞Ô∏è Start Tmate Session
        run: |
          sudo apt-get install -y tmate
          # Start tmate in a detached screen as the 'jacky' user
          sudo -u jacky screen -dmS tmate-session tmate
          sleep 3
          echo "‚úÖ Tmate session started in background. Use 'sudo -u jacky screen -r tmate-session' to attach."

      # 7. Aapanel Setup
      - name: üöÄ Aapanel Setup & Credential Configuration
        run: |
          echo "Running Aapanel installer to configure over restored files..."
          sudo apt-get install -y mariadb-server apache2 php php-mysql || true
          curl -sSLo /tmp/install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
          (echo "y" && echo "yes") | sudo bash /tmp/install.sh

          echo "Setting Aapanel username and password..."
          echo "jacky" | sudo bt 6
          echo "spidey" | sudo bt 5
          
          echo "Restarting Aapanel to apply new credentials..."
          sudo bt restart

          echo "‚úÖ Aapanel is installed, configured, and running."
      
      # 8. Maintain the Session (New Graceful Shutdown)
      - name: ‚è≥ Maintain VPS Session
        run: |
          echo "üñ•Ô∏è VPS is now running. To trigger a manual shutdown, create a file named '/tmp/stop_session' inside the VPS."
          
          while [ ! -f /tmp/stop_session ]; do
            echo "Session is active. Sleeping for 60 seconds..."
            sleep 60
          done
          
          echo "Graceful shutdown initiated. Proceeding to final backup."

      # 9. Final Backup (only on success or failure)
      - name: üíæ Create Final Backup
        if: success() || failure()
        run: |
          echo "üõë Stopping services for a clean backup..."
          sudo systemctl stop tailscaled || true
          sudo systemctl stop btpanel.service || true
          sudo systemctl stop apache2 || true
          sudo systemctl stop mariadb || true
          sudo pkill -f "tmate" || true
          
          # Create the backup store directory
          sudo mkdir -p ${{ env.BACKUP_STORE }}
          
          echo "üì¶ Creating final backup archive..."
          sudo tar --ignore-failed-read -czf ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }} \
            --absolute-names \
            /etc/hostname \
            /etc/hosts \
            /etc/systemd/system \
            /var/lib/tailscale \
            /opt \
            /srv \
            /var/www \
            /etc/ssh \
            /etc/apache2 \
            /www/server \
            /root \
            /home/jacky \
            /usr/lib/systemd/system \
            /var/lib/mysql \
            /etc/sudoers.d/ \
            /usr/bin/bt \
            2>/dev/null || true
          
          echo "‚úÖ Final backup created at ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: ‚òÅÔ∏è Upload Final Backup to MEGA
        if: success() || failure()
        run: |
          echo "üöÄ Uploading final backup to MEGA..."
          # Re-create the Rclone config to ensure it's available for this step
          mkdir -p ~/.config/rclone
          echo "[mega]
type = mega
user = ${{ secrets.MEGA_USER }}
pass = ${{ secrets.MEGA_PASS }}" | cat > ~/.config/rclone/rclone.conf
          rclone copy ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }} ${{ env.MEGA_REMOTE }} --progress
          echo "‚úÖ Final backup uploaded successfully."
          
      - name: üìù Final Status Report
        if: success() || failure()
        run: |
          echo "=== VPS Session Ended ==="
          echo "Final job status: ${{ job.status }}"
          echo "Backup uploaded to: ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}"
          echo "========================="
