# GitHub Actions Workflow for Persistent VPS Session - Sparta Edition! ⚔️🛡️
# Required Secrets:
# - TAILSCALE_AUTHKEY: Tailscale authentication key (string)
# - RCLONE_CONFIG: Raw rclone configuration text for MEGA remote
# - DB_ROOT_PASSWORD: Root password for MariaDB (string)
# - USER_PASSWORD: Password for user jacky (string)

name: Persistent VPS (Sparta Edition)

on:
  schedule:
    # Runs automatically every 6 hours to refresh the session.
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allows for manual triggering of the workflow from the Actions tab.

env:
  # Configuration for the full system backup. Using a separate mount point.
  BACKUP_STORE: /mnt/backups/vps
  BACKUP_NAME: vps-full-backup.tar.gz
  # Rclone remote and path for cloud storage.
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    # Set a generous timeout. GitHub Actions max is 6 hours (360 minutes).
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write

    steps:
      - name: '🕸️ Checkout Code ⚔️'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Initial Setup & Environment Preparation
      # ------------------------------------------------------------------

      - name: '🔧 Install Core Tools & Rclone 🛡️'
        run: |
          set -euo pipefail
          echo "🌐 Updating package list... This is Sparta's preparation!"
          sudo apt-get update -qq || { echo "😠 Apt update failed! Spartans retreat!"; exit 1; }
          echo "☁️ Installing Rclone... Messenger of the gods!"
          curl -fsSL https://rclone.org/install.sh | sudo bash || { echo "🚨 Rclone install failed! Kick into the pit!"; exit 1; }
          echo "📦 Installing essential system tools... Arming the warriors!"
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            tar gzip openssh-server htop nano vim git net-tools tmate jq curl \
            software-properties-common apt-transport-https ca-certificates \
            gnupg lsb-release psmisc screen mariadb-server || { echo "⚔️ Package install error! Sparta falls!"; exit 1; }
          echo "🛳️ Installing Docker... Building the fleet!"
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg || { echo "🔑 GPG key failed!"; exit 1; }
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -qq || { echo "😠 Docker update failed!"; exit 1; }
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io || { echo "🚢 Docker install failed!"; exit 1; }
          echo "✅ All core tools installed. Spartans ready!"

      - name: '🛠️ Configure Rclone 🔐'
        run: |
          set -euo pipefail
          echo "🔐 Setting up rclone configuration... Securing the phalanx!"
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "❌ ERROR: RCLONE_CONFIG secret is missing! Traitor in the ranks!" >&2
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "✅ Rclone configured successfully. Shields up!"

      - name: '🔍 Check for Data Backup 🕵️'
        id: check_backup
        run: |
          set -euo pipefail
          echo "🔎 Checking for existing data backup... Scouts ahead!"
          if rclone ls "${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
              echo "✅ Data backup found in MEGA! Victory from the clouds!"
              echo "has_backup=true" >> $GITHUB_OUTPUT
              echo "backup_source=mega" >> $GITHUB_OUTPUT
          else
              echo "🔍 No MEGA backup found. Searching recent artifacts... Oracle consult!"
              RECENT_RUN=$(curl -s -H "Authorization: token ${{ github.token }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
                | jq -r '.workflows[] | select(.name == "Persistent VPS (Sparta Edition)") | .id' | head -1)
              if [[ -n "$RECENT_RUN" && "$RECENT_RUN" != "null" ]]; then
                LATEST_RUN=$(curl -s -H "Authorization: token ${{ github.token }}" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${RECENT_RUN}/runs?status=success&per_page=3" \
                  | jq -r '.workflow_runs[] | select(.id != ${{ github.run_id }}) | .id' | head -1)
                if [[ -n "$LATEST_RUN" && "$LATEST_RUN" != "null" ]]; then
                  ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ github.token }}" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/runs/${LATEST_RUN}/artifacts" \
                    | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')
                  if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
                    ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
                    echo "✅ Found data backup in recent run! Artifact retrieved!"
                    echo "has_backup=true" >> $GITHUB_OUTPUT
                    echo "backup_source=artifact" >> $GITHUB_OUTPUT
                    echo "artifact_url=${ARTIFACT_URL}" >> $GITHUB_OUTPUT
                  else
                    echo "ℹ️ No backup found. Starting fresh. New battle begins!"
                    echo "has_backup=false" >> $GITHUB_OUTPUT
                  fi
                else
                  echo "ℹ️ No recent runs found. Starting fresh."
                  echo "has_backup=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "ℹ️ Workflow not found. Starting fresh."
                echo "has_backup=false" >> $GITHUB_OUTPUT
              fi
          fi

      - name: '📥 Download & Restore Data Backup 🔄'
        if: steps.check_backup.outputs.has_backup == 'true'
        run: |
          set -euo pipefail
          echo "📥 Downloading and restoring full system backup... Reassembling the legion!"
          
          # Use /mnt for temporary storage to save root disk space
          mkdir -p /mnt/restore
          cd /mnt/restore
          
          if [[ "${{ steps.check_backup.outputs.backup_source }}" == "mega" ]]; then
            echo "☁️ Downloading from MEGA... Cloud warriors descend!"
            rclone copy "${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}" . || { echo "🚨 Rclone download failed!"; exit 1; }
            mv "${{ env.BACKUP_NAME }}" backup.tar.gz
          else
            echo "📦 Downloading from GitHub artifact... Fetching the scroll!"
            curl -L -H "Authorization: token ${{ github.token }}" \
              "${{ steps.check_backup.outputs.artifact_url }}" \
              -o "backup.zip" || { echo "🌐 Curl failed!"; exit 1; }
          
            # Extract the GitHub artifact (always a zip)
            unzip -q backup.zip || { echo "🤐 Unzip failed!"; exit 1; }
            
            # Move the tar.gz
            mv *.tar.gz backup.tar.gz || { echo "🚚 Move failed!"; exit 1; }
          fi
          
          echo "📋 Backup file details:"
          ls -lh backup.tar.gz
          
          # Test backup integrity
          echo "🧪 Testing backup integrity... Inspect the weapons!"
          if ! tar -tzf backup.tar.gz >/dev/null 2>&1; then
            echo "❌ Backup is corrupted! Dishonor!"
            exit 1
          fi
          
          echo "📂 Restoring data... This is Sparta's rebirth!"
          # Restore the entire filesystem from the backup
          sudo tar -xzpf backup.tar.gz -C / --warning=no-timestamp || { echo "💥 Restore failed!"; exit 1; }
          
          echo "✅ Full system restoration complete. Spartans rise!"

      # ------------------------------------------------------------------
      # Part 2: System Configuration & Services Setup
      # ------------------------------------------------------------------

      - name: '👤 Setup User Account 🏹'
        run: |
          set -euo pipefail
          echo "👤 Configuring user account... Recruiting the hoplite!"
          if [[ -z "${{ secrets.USER_PASSWORD || '' }}" ]]; then
            echo "❌ ERROR: USER_PASSWORD secret missing!" >&2
            exit 1
          fi
          sudo useradd -m -s /bin/bash jacky 2>/dev/null || echo "User exists - Veteran returns!"
          echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd || { echo "🔑 Password set failed!"; exit 1; }
          sudo usermod -aG sudo,docker jacky || { echo "👥 Group add failed!"; exit 1; }
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky > /dev/null
          sudo hostnamectl set-hostname github-vps || { echo "🏷️ Hostname failed!"; exit 1; }
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts > /dev/null
          echo "✅ User account configured. Ready for battle!"

      - name: '📦 Install/Configure Aapanel 🎛️'
        run: |
          set -euo pipefail
          if command -v bt >/dev/null 2>&1; then
            echo "✅ Aapanel already installed (from backup). Old guard stands!"
          else
            echo "📥 Installing Aapanel (fresh install)... New shields forged!"
            URL="https://www.aapanel.com/script/install_7.0_en.sh"
            if [ -f /usr/bin/curl ]; then curl -ksSO "$URL" ; else wget --no-check-certificate -O install_7.0_en.sh "$URL"; fi
            timeout 900 bash -c "printf 'y\nyes\n' | sudo bash install_7.0_en.sh" || {
              echo "⚠️ Aapanel installation timed out, continuing... Warriors endure!"
            }
          fi
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Setting Aapanel credentials... Commanding the panel!"
            sleep 5
            echo "Jacky" | sudo bt 6 || true
            echo "spidey" | sudo bt 5 || true
          fi
          echo "✅ Aapanel ready! This is Panel!"

      

      - name: '🚀 Start All Services 🔄'
        run: |
          set -euo pipefail
          echo "🔄 Configuring and starting all system services... Rally the troops!"
          sudo systemctl daemon-reload
          sudo systemctl enable --now ssh docker mariadb || true
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Starting Aapanel..."
            sudo bt start || true
          fi
          sleep 3
          echo "📊 Final Service Status Check:"
          for service in ssh docker mariadb; do
            if systemctl is-active --quiet $service; then
              echo "  ✅ $service is active. Warrior stands!"
            else
              echo "  ❌ $service is INACTIVE. Fallen soldier!"
            fi
          done

      - name: '🔗 Configure Remote Access (Tailscale & tmate) 🕸️'
        run: |
          set -euo pipefail
          echo "🕸️ Setting up Tailscale VPN for secure access... Connecting the empire!"
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "❌ ERROR: TAILSCALE_AUTHKEY secret is missing!" >&2
            exit 1
          fi
          curl -fsSL https://tailscale.com/install.sh | sh || { echo "😤 Tailscale install failed!"; exit 1; }
          sudo systemctl enable --now tailscaled || { echo "🚨 Tailscaled enable failed!"; exit 1; }
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "🔄 Restored Tailscale state - Reconnecting old identity!"
            sudo tailscale up --accept-routes || true
          else
            echo "🆕 New Tailscale setup - Registering warrior!"
            sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes || { echo "🔗 Up failed!"; exit 1; }
            # Immediate backup of new state to MEGA
            sudo tar czf /tmp/tailscale-state.tar.gz /var/lib/tailscale || { echo "📦 State tar failed!"; exit 1; }
            rclone copy /tmp/tailscale-state.tar.gz "${{ env.MEGA_REMOTE }}/" || { echo "☁️ State upload failed!"; exit 1; }
            rm /tmp/tailscale-state.tar.gz
          fi
          echo "💬 Starting tmate for emergency SSH access... Scout's link!"
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "================================================"
          echo "🎉          VPS IS READY FOR CONNECTION         🎉"
          echo "================================================"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔑 tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if command -v bt >/dev/null 2>&1; then
            echo ""
            echo "🎛️ Aapanel Panel Details:"
            sudo bt default || true
          fi
          echo "================================================"

      - name: '⏳ Maintain Session 🖥️'
        run: |
          echo "🖥️ VPS session active. Will run for ~5.5 hours. Hold the line!"
          echo "💡 To stop early: touch /tmp/stop"
          echo "🕐 Started: $(date)"
          end_time=$((SECONDS + 19800))
          while [ $SECONDS -lt $end_time ]; do
            if [ -f "/tmp/stop" ]; then
              echo "✅ Graceful shutdown requested. Honorable retreat!"
              rm -f "/tmp/stop"
              break
            fi
            if [ $((SECONDS % 600)) -eq 0 ]; then
              remaining=$(((end_time - SECONDS) / 60))
              echo "🔄 Session active - $remaining minutes remaining - $(date) Spartans endure!"
            fi
            sleep 60
          done
          echo "⏰ Session ending, preparing backup... Fall back!"

      - name: '💾 Create Full System Backup 📦'
        if: always()
        run: |
          set -euo pipefail
          echo "💾 Creating full system backup... Archiving the battlefield!"
          # Use /mnt for backup storage to save root disk space
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          echo "🛑 Stopping services cleanly for consistent backup... Cease fire!"
          if command -v bt >/dev/null 2>&1; then sudo bt stop || true; fi
          sudo systemctl stop mariadb || true
          sudo systemctl stop docker || true
          sleep 5
          echo "📦 Backing up entire root filesystem... This is Archive!"
          sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --exclude=/dev \
            --exclude=/proc \
            --exclude=/sys \
            --exclude=/tmp \
            --exclude=/run \
            --exclude=/mnt \
            --exclude=/media \
            --exclude=/var/backups \
            --exclude=/lost+found \
            / || {
            echo "⚠️ Tar encountered some missing files, continuing... Minor casualties!"
          }
          if [[ -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
            echo "✅ Full system backup created. Size: $BACKUP_SIZE Glory!"
            echo "📋 Backup contents (sample):"
            sudo tar -tzf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | head -10
          else
            echo "❌ Backup creation failed! Defeat!"
            exit 1
          fi

      - name: '⬆️ Upload Data Backup as Artifact 📤'
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKUP_NAME }}
          path: ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}
          retention-days: 7
          if-no-files-found: warn

      - name: '☁️ Upload Backup to MEGA & Generate Link 🔗'
        if: always()
        run: |
          set -euo pipefail
          echo "☁️ Uploading backup to MEGA... Sending to the heavens!"
          if [[ -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            rclone copy "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" "${{ env.MEGA_REMOTE }}/" || { echo "🚨 Rclone upload failed!"; exit 1; }
            echo "🔗 Generating public link... Oracle's vision!"
            LINK=$(rclone link "${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}") || echo "⚠️ Link generation failed, but backup uploaded."
            echo "$LINK" > mega-backup-link.txt
            echo "✅ MEGA upload complete. Link: $LINK"
          else
            echo "🚫 No backup file found. Skipping MEGA upload."
          fi
          # Clean up local backup file from /mnt to free up disk space
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: '📎 Upload MEGA Link as Artifact'
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: mega-backup-link
          path: mega-backup-link.txt
          retention-days: 7

      - name: '📋 Session Summary 🏆'
        if: always()
        run: |
          echo "============================================="
          echo "    ✅ SPARTA VPS SESSION COMPLETE ✅"
          echo "============================================="
          echo "Status: ${{ job.status }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "End Time: $(date)"
          echo "Had Previous Backup: ${{ steps.check_backup.outputs.has_backup }}"
          echo "Runtime: $((SECONDS / 60)) minutes"
          echo ""
          echo "💾 Full System Backup Used"
          echo "   ✓ All installed software (Apache, PHP, etc.)"
          echo "   ✓ All configuration files"
          echo "   ✓ All user data, databases, and Docker volumes"
          echo "   ✗ Temporary and virtual filesystems (dev, proc, etc.)"
          echo "============================================="
