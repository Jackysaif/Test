
name: 🕷️ Spidey's Persistent VPS (Web-Slinging Edition)

on:
  workflow_dispatch:
    inputs:
      force_fresh_install:
        description: '🔄 Force fresh installation (ignore backups)'
        required: false
        default: 'false'
        type: boolean
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 400  # 6+ hours with overhead
    
    steps:
      - name: 🕸️ Web-Slinging Initialization
        run: |
          echo "🕷️ =========================================="
          echo "🕷️  SPIDEY'S VPS IS AWAKENING! 🕸️"
          echo "🕷️ =========================================="
          echo "🕸️ Session started at: $(date)"
          echo "🕷️ Spider-sense tingling... checking environment!"
          
          # Set hostname to Spidey
          echo "🕷️ Setting hostname to Spidey..."
          sudo hostnamectl set-hostname Spidey
          echo "🕸️ Hostname set! Welcome to Spidey's web!"

      - name: 🔧 Installing Spidey's Tools (rclone)
        run: |
          echo "🕷️ Installing rclone for web-slinging file transfers..."
          sudo apt update -qq
          sudo apt install -y rclone curl wget unzip
          echo "🕸️ Rclone installed! Ready to swing files across the web!"

      - name: 🔐 Decoding MEGA Secrets
        run: |
          echo "🕷️ Decoding Spidey's secret MEGA web credentials..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf 2>/dev/null || echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "🕸️ MEGA credentials decoded and secured in Spidey's web!"

      - name: 🔍 Spider-Sense: Searching for Previous Backups
        id: backup_search
        run: |
          echo "🕷️ Spider-sense activated! Searching for previous web backups..."
          
          RESTORE_SUCCESS=false
          BACKUP_SOURCE=""
          
          # Try GitHub Artifacts first
          echo "🕸️ Searching GitHub's web for artifacts..."
          if gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.name=="vps-backup") | .archive_download_url' | head -1 > /dev/null 2>&1; then
            echo "🕷️ Found GitHub artifact! Attempting download..."
            # Note: This would need proper GitHub token handling in real implementation
            echo "🕸️ GitHub artifact found but download needs proper token setup"
          fi
          
          # Try MEGA backup
          echo "🕷️ Checking MEGA's web for previous backups..."
          if rclone ls mega:spidey-vps/backup.tar.gz >/dev/null 2>&1; then
            echo "🕸️ Found MEGA backup! Downloading Spidey's previous web..."
            rclone copy mega:spidey-vps/backup.tar.gz ./
            if [ -f backup.tar.gz ]; then
              echo "🕷️ MEGA backup downloaded successfully!"
              RESTORE_SUCCESS=true
              BACKUP_SOURCE="MEGA"
            fi
          fi
          
          if [ "$RESTORE_SUCCESS" = "true" ]; then
            echo "🕸️ Backup found! Source: $BACKUP_SOURCE"
            echo "restore_needed=true" >> $GITHUB_OUTPUT
            echo "backup_source=$BACKUP_SOURCE" >> $GITHUB_OUTPUT
          else
            echo "🕷️ No previous web found! Time for a fresh spider installation!"
            echo "restore_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔄 Restoring Spidey's Previous Web
        if: steps.backup_search.outputs.restore_needed == 'true' && github.event.inputs.force_fresh_install != 'true'
        run: |
          echo "🕷️ =========================================="
          echo "🕷️  RESTORING SPIDEY'S PREVIOUS WEB! 🕸️"
          echo "🕷️ =========================================="
          echo "🕸️ Backup source: ${{ steps.backup_search.outputs.backup_source }}"
          
          if [ -f backup.tar.gz ]; then
            echo "🕷️ Extracting Spidey's web components..."
            sudo tar -xzf backup.tar.gz -C / 2>/dev/null || {
              echo "🕸️ Extraction failed! Falling back to fresh installation..."
              echo "restore_failed=true" >> $GITHUB_OUTPUT
            }
            
            if [ "$?" -eq 0 ]; then
              echo "🕸️ Web restoration successful! Spidey's back in action!"
              
              # Restore Tailscale if possible
              if [ -d /var/lib/tailscale ]; then
                echo "🕷️ Restarting Tailscale with previous identity..."
                sudo systemctl restart tailscale || echo "🕸️ Tailscale restart queued for later"
              fi
              
              echo "restoration_success=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 👤 Creating Spidey's Web Users
        run: |
          echo "🕷️ Creating Spidey's web users..."
          
          # Create jacky user
          if ! id jacky >/dev/null 2>&1; then
            echo "🕸️ Creating user 'jacky' with spider powers..."
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:spidey" | sudo chpasswd
            sudo usermod -aG sudo jacky
            echo "🕷️ User 'jacky' created with sudo powers!"
          else
            echo "🕸️ User 'jacky' already exists in the web!"
          fi

      - name: 🕸️ Installing Tailscale (Spidey's Secret Network)
        run: |
          echo "🕷️ Installing Tailscale for Spidey's secret web network..."
          curl -fsSL https://tailscale.com/install.sh | sh
          
          if [ -f /var/lib/tailscale/tailscaled.state ] && [ "${{ steps.backup_search.outputs.restore_needed }}" == "true" ]; then
            echo "🕸️ Reusing previous Tailscale identity..."
            sudo systemctl start tailscale
          else
            echo "🕷️ Connecting to Tailscale web with new identity..."
            sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=spidey-vps
          fi
          
          echo "🕸️ Tailscale connected! Spidey's secret network is active!"

      - name: 🗄️ Installing MariaDB (Spidey's Data Web)
        run: |
          echo "🕷️ Setting up MariaDB for Spidey's data web..."
          
          # Pre-configure MariaDB root password
          sudo debconf-set-selections <<< "mariadb-server mysql-server/root_password password ${{ secrets.DB_ROOT_PASSWORD }}"
          sudo debconf-set-selections <<< "mariadb-server mysql-server/root_password_again password ${{ secrets.DB_ROOT_PASSWORD }}"
          
          sudo apt update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt install -y mariadb-server
          
          # Secure installation
          sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "DELETE FROM mysql.user WHERE User='';"
          sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
          sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "DROP DATABASE IF EXISTS test;"
          sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "FLUSH PRIVILEGES;"
          
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          
          echo "🕸️ MariaDB installed and secured! Spidey's data web is ready!"

      - name: 🎛️ Installing aaPanel (Spidey's Control Center)
        run: |
          echo "🕷️ =========================================="
          echo "🕷️  INSTALLING SPIDEY'S CONTROL CENTER! 🕸️"
          echo "🕷️ =========================================="
          
          # Get the latest aaPanel installer
          echo "🕸️ Fetching latest aaPanel installer from the web..."
          AAPANEL_URL="http://www.aapanel.com/script/install_7.0_en.sh"
          
          echo "🕷️ Downloading Spidey's control panel installer..."
          wget -O install_aapanel.sh "$AAPANEL_URL"
          chmod +x install_aapanel.sh
          
          echo "🕸️ Starting automated aaPanel installation..."
          echo "🕷️ Auto-answering installation prompts..."
          
          # Use expect to handle prompts automatically
          sudo apt install -y expect
          
          expect << 'EOF'
          set timeout 1800
          spawn sudo bash install_aapanel.sh
          
          expect {
            "*Do you want to install aaPanel to the*" {
              send "y\r"
              exp_continue
            }
            "*please enter*" {
              send "y\r"
              exp_continue
            }
            "*nter y to install*" {
              send "y\r"
              exp_continue
            }
            "*force install*" {
              send "yes\r"
              exp_continue
            }
            "*Are you sure*" {
              send "yes\r"
              exp_continue
            }
            "*continue*" {
              send "y\r"
              exp_continue
            }
            "*Y/n*" {
              send "y\r"
              exp_continue
            }
            "*y/N*" {
              send "y\r"
              exp_continue
            }
            eof
          }
          EOF
          
          echo "🕸️ aaPanel installation completed!"
          
          # Wait for aaPanel to fully initialize
          echo "🕷️ Waiting for aaPanel to initialize..."
          sleep 30
          
          # Configure aaPanel credentials
          echo "🕸️ Setting up Spidey's control panel credentials..."
          if [ -f /www/server/panel/pyenv/bin/python ]; then
            sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py panel Jacky
            sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py password spidey
          elif [ -f /www/server/panel/tools.py ]; then
            sudo python /www/server/panel/tools.py panel Jacky
            sudo python /www/server/panel/tools.py password spidey
          else
            echo "🕸️ aaPanel CLI not found, will configure manually later"
          fi
          
          echo "🕷️ aaPanel control center is ready!"
          echo "🕸️ Username: Jacky | Password: spidey"

      - name: 🚀 Starting All Spidey Services
        run: |
          echo "🕷️ Starting all of Spidey's web services..."
          
          # Start MariaDB
          sudo systemctl start mariadb
          sudo systemctl enable mariadb
          echo "🕸️ MariaDB web started!"
          
          # Start aaPanel if service exists
          if systemctl list-unit-files | grep -q bt; then
            sudo systemctl start bt
            sudo systemctl enable bt
            echo "🕸️ aaPanel service started!"
          fi
          
          # Start any other web services from backup
          if [ -f /var/backups/services.txt ]; then
            echo "🕷️ Starting restored services..."
            while read service; do
              sudo systemctl start "$service" 2>/dev/null || echo "🕸️ Service $service not available"
            done < /var/backups/services.txt
          fi
          
          echo "🕷️ All services activated! Spidey's web is fully operational!"

      - name: 🕸️ Spidey's Patrol Loop (6 hours of web-slinging)
        run: |
          echo "🕷️ =========================================="
          echo "🕷️  SPIDEY'S PATROL BEGINS! 🕸️"
          echo "🕷️ =========================================="
          echo "🕸️ Patrol duration: 6 hours of web-slinging!"
          echo "🕷️ Create /tmp/stop to signal early shutdown"
          
          START_TIME=$(date +%s)
          PATROL_DURATION=$((6 * 60 * 60))  # 6 hours in seconds
          CHECK_INTERVAL=300  # 5 minutes
          
          echo "🕸️ Spider-sense monitoring activated..."
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            REMAINING=$((PATROL_DURATION - ELAPSED))
            
            if [ $REMAINING -le 0 ]; then
              echo "🕷️ Patrol shift complete! Time for backup and rest!"
              break
            fi
            
            # Check for early shutdown signal
            if [ -f /tmp/stop ]; then
              echo "🕸️ Emergency signal detected! Spidey is wrapping up..."
              rm -f /tmp/stop
              break
            fi
            
            # Status update every 30 minutes
            if [ $((ELAPSED % 1800)) -eq 0 ]; then
              HOURS_REMAINING=$((REMAINING / 3600))
              MINUTES_REMAINING=$(((REMAINING % 3600) / 60))
              echo "🕷️ Status: Still web-slinging! ${HOURS_REMAINING}h ${MINUTES_REMAINING}m remaining"
              
              # Check services health
              echo "🕸️ Checking web services health..."
              sudo systemctl is-active mariadb >/dev/null && echo "🕷️ MariaDB: Active" || echo "🕸️ MariaDB: Issue detected"
              sudo systemctl is-active tailscale >/dev/null && echo "🕷️ Tailscale: Connected" || echo "🕸️ Tailscale: Issue detected"
            fi
            
            sleep $CHECK_INTERVAL
          done
          
          echo "🕷️ Patrol completed! Preparing for backup and shutdown..."

      - name: 🎒 Creating Backup of Spidey's Web
        run: |
          echo "🕷️ =========================================="
          echo "🕷️  BACKING UP SPIDEY'S WEB! 🕸️"
          echo "🕷️ =========================================="
          
          # Create backup directory
          BACKUP_DIR="/tmp/spidey-backup"
          mkdir -p "$BACKUP_DIR"
          
          echo "🕸️ Gathering Spidey's important web components..."
          
          # Create backup manifest
          echo "🕷️ Creating backup manifest..."
          cat > "$BACKUP_DIR/backup-manifest.txt" << EOF
          Spidey's Web Backup Manifest 🕷️
          ================================
          Backup created: $(date)
          Backup contains:
          - /home (user data)
          - /root (root user data)  
          - /etc (selected configs)
          - /var/www (web files)
          - /opt (optional software)
          - /var/lib/tailscale (Tailscale state)
          - /var/lib/mysql (MariaDB data)
          - /www (aaPanel data)
          
          🕸️ This backup preserves Spidey's complete web state!
          EOF
          
          # Stop services for clean backup
          echo "🕷️ Temporarily stopping services for clean backup..."
          sudo systemctl stop mariadb 2>/dev/null || true
          
          # Create backup paths
          echo "🕸️ Packing up the web components..."
          sudo tar -czf backup.tar.gz \
            -C / \
            --exclude='home/*/.cache' \
            --exclude='home/*/tmp' \
            --exclude='var/lib/mysql/ib_logfile*' \
            --exclude='var/lib/mysql/*.log' \
            home \
            root \
            etc/hostname \
            etc/hosts \
            etc/ssh \
            etc/crontab \
            $([ -d /var/www ] && echo "var/www") \
            $([ -d /opt ] && echo "opt") \
            $([ -d /var/lib/tailscale ] && echo "var/lib/tailscale") \
            $([ -d /var/lib/mysql ] && echo "var/lib/mysql") \
            $([ -d /www ] && echo "www") \
            2>/dev/null || true
          
          # Restart services
          echo "🕷️ Restarting services..."
          sudo systemctl start mariadb 2>/dev/null || true
          
          if [ -f backup.tar.gz ]; then
            BACKUP_SIZE=$(du -h backup.tar.gz | cut -f1)
            echo "🕸️ Backup created successfully! Size: $BACKUP_SIZE"
          else
            echo "🕸️ Warning: Backup file not created!"
          fi

      - name: 📤 Uploading to GitHub Artifacts (Primary Backup)
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup.tar.gz
          retention-days: 30
        continue-on-error: true

      - name: ☁️ Uploading to MEGA (Secondary Backup)
        run: |
          echo "🕷️ Uploading backup to MEGA's web storage..."
          
          if [ -f backup.tar.gz ]; then
            # Upload to MEGA
            rclone copy backup.tar.gz mega:spidey-vps/ -v
            
            if [ $? -eq 0 ]; then
              echo "🕸️ MEGA backup uploaded successfully!"
              
              # Try to get public link (if MEGA supports it)
              rclone link mega:spidey-vps/backup.tar.gz > mega-backup-link.txt 2>/dev/null || echo "Direct link not available" > mega-backup-link.txt
              
              echo "🕷️ MEGA backup link saved to mega-backup-link.txt"
            else
              echo "🕸️ MEGA upload failed, but primary backup is in GitHub artifacts"
            fi
          else
            echo "🕸️ No backup file to upload to MEGA"
          fi

      - name: 🏁 Spidey's Mission Complete!
        run: |
          echo "🕷️ =========================================="
          echo "🕷️  SPIDEY'S MISSION COMPLETE! 🕸️"
          echo "🕷️ =========================================="
          echo "🕸️ Session ended at: $(date)"
          echo "🕷️ Backup status: Complete"
          echo "🕸️ All services secured"
          echo "🕷️ Tailscale identity preserved"
          echo "🕸️ Ready for next web-slinging session!"
          echo ""
          echo "🕷️ With great power comes great responsibility!"
          echo "🕸️ See you in the next session, true believers!"
          echo "🕷️ =========================================="
