name: Persistent VPS Management

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-next-session]

env:
  BACKUP_NAME: vps-backup-${{ github.run_number }}
  SESSION_DURATION: 19800  # 5.5 hours in seconds
  BACKUP_DURATION: 1800    # 30 minutes in seconds

jobs:
  restore:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      restore-status: ${{ steps.restore-check.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo mkdir -p /opt/vps-data
          sudo chown $USER:$USER /opt/vps-data
          echo "$(date): Starting restore process" >> /tmp/vps.log

      - name: Download previous backup from artifacts
        id: artifact-restore
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BACKUP_NAME }}
          path: /tmp/backup/

      - name: Fallback to Mega.nz download
        id: mega-restore
        if: steps.artifact-restore.outcome == 'failure'
        continue-on-error: true
        run: |
          if [ -f "mega.txt" ]; then
            MEGA_URL=$(cat mega.txt)
            echo "Downloading from Mega.nz: $MEGA_URL"
            
            # Install megacmd
            wget https://mega.nz/linux/MEGAsync/xUbuntu_20.04/amd64/megacmd-xUbuntu_20.04_amd64.deb
            sudo dpkg -i megacmd-xUbuntu_20.04_amd64.deb || sudo apt-get install -f -y
            
            # Download backup
            mkdir -p /tmp/backup
            mega-get "$MEGA_URL" /tmp/backup/
            
            if [ -f "/tmp/backup/vps-backup.tar.gz" ]; then
              echo "backup-found=true" >> $GITHUB_OUTPUT
            else
              echo "backup-found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "mega.txt not found"
            echo "backup-found=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract and restore backup
        id: restore-data
        if: steps.artifact-restore.outcome == 'success' || steps.mega-restore.outputs.backup-found == 'true'
        run: |
          cd /tmp/backup
          if [ -f "vps-backup.tar.gz" ]; then
            echo "Extracting backup..."
            sudo tar -xzf vps-backup.tar.gz -C /
            echo "Backup restored successfully"
            echo "status=restored" >> $GITHUB_OUTPUT
          else
            echo "No backup file found"
            echo "status=fresh" >> $GITHUB_OUTPUT
          fi

      - name: Set restore status
        id: restore-check
        run: |
          if [ "${{ steps.restore-data.outputs.status }}" == "restored" ]; then
            echo "status=restored" >> $GITHUB_OUTPUT
          else
            echo "status=fresh" >> $GITHUB_OUTPUT
          fi
          echo "$(date): Restore status: ${{ steps.restore-check.outputs.status }}" >> /tmp/vps.log

  setup:
    runs-on: ubuntu-latest
    needs: restore
    timeout-minutes: 45
    steps:
      - name: Setup system basics
        run: |
          echo "$(date): Starting system setup" >> /tmp/vps.log
          
          # Update system
          sudo apt-get update
          sudo apt-get upgrade -y
          
          # Set hostname
          sudo hostnamectl set-hostname Spidey
          echo "127.0.0.1 Spidey" | sudo tee -a /etc/hosts

      - name: Create user Jacky
        run: |
          # Create user if not exists
          if ! id "Jacky" &>/dev/null; then
            sudo useradd -m -s /bin/bash Jacky
            echo "Jacky:${{ secrets.USER_PASSWORD || 'spidey' }}" | sudo chpasswd
            sudo usermod -aG sudo Jacky
            
            # Configure sudo without password
            echo "Jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
            
            echo "$(date): User Jacky created" >> /tmp/vps.log
          else
            echo "$(date): User Jacky already exists" >> /tmp/vps.log
          fi

      - name: Install and configure Tailscale
        run: |
          # Install Tailscale
          curl -fsSL https://tailscale.com/install.sh | sudo sh
          
          # Wait for installation to complete
          sleep 5
          
          # Check if tailscale binary exists
          if ! command -v tailscale &> /dev/null; then
            echo "$(date): Tailscale installation failed" >> /tmp/vps.log
            exit 1
          fi
          
          # Start tailscaled daemon
          sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/var/run/tailscale/tailscaled.sock &
          TAILSCALED_PID=$!
          
          # Wait for daemon to start
          sleep 10
          
          # Check if we have restored state
          if [ "${{ needs.restore.outputs.restore-status }}" == "restored" ] && [ -f "/var/lib/tailscale/tailscaled.state" ]; then
            echo "$(date): Using restored Tailscale state" >> /tmp/vps.log
            # Kill current daemon and restart with restored state
            sudo kill $TAILSCALED_PID 2>/dev/null || true
            sleep 2
            sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/var/run/tailscale/tailscaled.sock &
            sleep 10
          else
            echo "$(date): Authenticating new Tailscale connection" >> /tmp/vps.log
            # Authenticate with authkey
            if [ -n "${{ secrets.TAILSCALE_AUTHKEY }}" ]; then
              sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=Spidey --accept-routes
            else
              echo "$(date): TAILSCALE_AUTHKEY not set, skipping authentication" >> /tmp/vps.log
              exit 1
            fi
          fi
          
          # Wait for connection and get IP
          sleep 15
          for i in {1..12}; do
            TAILSCALE_IP=$(sudo tailscale ip -4 2>/dev/null || echo "")
            if [ -n "$TAILSCALE_IP" ]; then
              echo "$(date): Tailscale IP: $TAILSCALE_IP" >> /tmp/vps.log
              break
            fi
            echo "$(date): Waiting for Tailscale connection... attempt $i" >> /tmp/vps.log
            sleep 5
          done
          
          if [ -z "$TAILSCALE_IP" ]; then
            echo "$(date): Failed to get Tailscale IP" >> /tmp/vps.log
          fi

      - name: Install aaPanel
        run: |
          if [ "${{ needs.restore.outputs.restore-status }}" == "fresh" ] || [ ! -f "/www/server/panel/BT-Panel" ]; then
            echo "$(date): Installing aaPanel" >> /tmp/vps.log
            
            # Download aaPanel installation script
            wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
            
            # Make script executable
            chmod +x install.sh
            
            # Install aaPanel with automated responses
            export DEBIAN_FRONTEND=noninteractive
            echo -e "y\nyes\n" | sudo bash install.sh aapanel
            
            # Wait for installation to complete
            sleep 60
            
            # Check if installation was successful
            if [ -f "/www/server/panel/BT-Panel" ]; then
              echo "$(date): aaPanel installed successfully" >> /tmp/vps.log
              
              # Start aaPanel service
              sudo /etc/init.d/bt start
              
              # Configure aaPanel credentials
              sleep 10
              
              # Set username and password
              cd /www/server/panel
              echo "Jacky" | sudo python3 tools.py panel Jacky
              echo "${{ secrets.USER_PASSWORD || 'spidey' }}" | sudo python3 tools.py panel ${{ secrets.USER_PASSWORD || 'spidey' }}
              
              echo "$(date): aaPanel configured with username: Jacky" >> /tmp/vps.log
            else
              echo "$(date): aaPanel installation failed" >> /tmp/vps.log
              
              # Try alternative installation method
              echo "$(date): Trying alternative aaPanel installation" >> /tmp/vps.log
              wget -O install_panel.sh https://raw.githubusercontent.com/aaPanel/aaPanel/master/script/install_6.0_en.sh
              chmod +x install_panel.sh
              echo -e "y\ny\ny\n" | sudo bash install_panel.sh
              sleep 30
            fi
          else
            echo "$(date): aaPanel already installed" >> /tmp/vps.log
            sudo /etc/init.d/bt start
          fi

      - name: Install additional dependencies
        run: |
          # Install common tools
          sudo apt-get install -y htop curl wget git vim nano screen tmux
          
          # Install development tools
          sudo apt-get install -y build-essential python3 python3-pip nodejs npm
          
          # Install backup tools
          sudo apt-get install -y rsync tar gzip
          
          echo "$(date): Additional dependencies installed" >> /tmp/vps.log

      - name: Restore application data
        if: needs.restore.outputs.restore-status == 'restored'
        run: |
          echo "$(date): Restoring application data" >> /tmp/vps.log
          
          # Restart services
          if pgrep tailscaled > /dev/null; then
            echo "$(date): Restarting Tailscale daemon" >> /tmp/vps.log
            sudo pkill tailscaled
            sleep 2
            sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/var/run/tailscale/tailscaled.sock &
            sleep 5
          fi
          
          sudo /etc/init.d/bt start
          
          # Fix permissions
          sudo chown -R Jacky:Jacky /home/Jacky
          
          echo "$(date): Application data restored" >> /tmp/vps.log

  run:
    runs-on: ubuntu-latest
    needs: [restore, setup]
    timeout-minutes: 360  # 6 hours maximum
    steps:
      - name: Start session monitoring
        run: |
          echo "$(date): Starting VPS session" >> /tmp/vps.log
          echo "Session will run for ${{ env.SESSION_DURATION }} seconds" >> /tmp/vps.log
          
          # Create stop signal handler
          cat << 'EOF' > /tmp/monitor.sh
          #!/bin/bash
          SESSION_START=$(date +%s)
          SESSION_END=$((SESSION_START + ${{ env.SESSION_DURATION }}))
          
          while true; do
            CURRENT_TIME=$(date +%s)
            
            # Check for stop signal
            if [ -f "/tmp/stop" ]; then
              echo "$(date): Stop signal detected" >> /tmp/vps.log
              break
            fi
            
            # Check session timeout
            if [ $CURRENT_TIME -ge $SESSION_END ]; then
              echo "$(date): Session timeout reached" >> /tmp/vps.log
              touch /tmp/stop
              break
            fi
            
            # Log status every 30 minutes
            if [ $((CURRENT_TIME % 1800)) -eq 0 ]; then
              REMAINING=$((SESSION_END - CURRENT_TIME))
              echo "$(date): Session running. Time remaining: $((REMAINING / 60)) minutes" >> /tmp/vps.log
            fi
            
            sleep 60
          done
          EOF
          
          chmod +x /tmp/monitor.sh

      - name: Run VPS services
        run: |
          # Start monitoring in background
          /tmp/monitor.sh &
          MONITOR_PID=$!
          
          # Start main services
          if ! pgrep tailscaled > /dev/null; then
            sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/var/run/tailscale/tailscaled.sock &
            sleep 5
          fi
          sudo /etc/init.d/bt start
          
          echo "$(date): All services started" >> /tmp/vps.log
          
          # Keep session alive
          while [ ! -f "/tmp/stop" ]; do
            sleep 10
            
            # Health checks
            if ! pgrep tailscaled > /dev/null; then
              echo "$(date): Tailscale daemon down, restarting" >> /tmp/vps.log
              sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/var/run/tailscale/tailscaled.sock &
              sleep 5
            fi
            
            if ! pgrep bt > /dev/null; then
              echo "$(date): aaPanel service down, restarting" >> /tmp/vps.log
              sudo /etc/init.d/bt start
            fi
          done
          
          echo "$(date): Session ending" >> /tmp/vps.log
          kill $MONITOR_PID 2>/dev/null || true

  backup:
    runs-on: ubuntu-latest
    needs: [restore, setup, run]
    if: always()
    timeout-minutes: 30
    steps:
      - name: Create backup
        run: |
          echo "$(date): Starting backup process" >> /tmp/vps.log
          
          mkdir -p /tmp/backup-staging
          
          # Backup user data
          sudo tar -czf /tmp/backup-staging/home-jacky.tar.gz -C /home Jacky/ 2>/dev/null || true
          
          # Backup Tailscale state
          if [ -d "/var/lib/tailscale" ]; then
            sudo tar -czf /tmp/backup-staging/tailscale-state.tar.gz -C /var/lib tailscale/ 2>/dev/null || true
          fi
          
          # Backup aaPanel configuration
          if [ -d "/www/server/panel" ]; then
            sudo tar -czf /tmp/backup-staging/aapanel-config.tar.gz -C /www/server panel/config/ 2>/dev/null || true
          fi
          
          # Backup databases
          if [ -d "/www/server/data" ]; then
            sudo tar -czf /tmp/backup-staging/databases.tar.gz -C /www/server data/ 2>/dev/null || true
          fi
          
          # Backup custom scripts and configurations
          sudo tar -czf /tmp/backup-staging/etc-configs.tar.gz -C /etc hostname hosts sudoers.d/ 2>/dev/null || true
          
          # Create final backup archive
          cd /tmp/backup-staging
          tar -czf /tmp/vps-backup.tar.gz *.tar.gz
          
          echo "$(date): Backup created successfully" >> /tmp/vps.log

      - name: Upload backup to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup-${{ github.run_number }}
          path: /tmp/vps-backup.tar.gz
          retention-days: 30

      - name: Upload backup to Mega.nz
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.MEGA_EMAIL }}" ] && [ -n "${{ secrets.MEGA_PASSWORD }}" ]; then
            # Install megacmd
            wget https://mega.nz/linux/MEGAsync/xUbuntu_20.04/amd64/megacmd-xUbuntu_20.04_amd64.deb
            sudo dpkg -i megacmd-xUbuntu_20.04_amd64.deb || sudo apt-get install -f -y
            
            # Login to Mega
            mega-login ${{ secrets.MEGA_EMAIL }} ${{ secrets.MEGA_PASSWORD }}
            
            # Upload backup
            mega-put /tmp/vps-backup.tar.gz /vps-backups/
            
            # Get public link
            MEGA_LINK=$(mega-export /vps-backups/vps-backup.tar.gz | grep "Exported:" | awk '{print $2}')
            echo $MEGA_LINK > mega.txt
            
            echo "$(date): Backup uploaded to Mega.nz: $MEGA_LINK" >> /tmp/vps.log
            mega-logout
          fi

      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const vpsBackups = artifacts.artifacts
              .filter(artifact => artifact.name.startsWith('vps-backup-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Keep only the latest 5 backups
            const toDelete = vpsBackups.slice(5);
            
            for (const artifact of toDelete) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted old backup: ${artifact.name}`);
            }

  shutdown:
    runs-on: ubuntu-latest
    needs: [restore, setup, run, backup]
    if: always()
    steps:
      - name: Graceful shutdown
        run: |
          echo "$(date): Performing graceful shutdown" >> /tmp/vps.log
          
          # Stop services
          sudo /etc/init.d/bt stop 2>/dev/null || true
          sudo pkill tailscaled 2>/dev/null || true
          
          # Create stop signal for any running processes
          touch /tmp/stop
          
          echo "$(date): Shutdown completed" >> /tmp/vps.log

      - name: Schedule next session
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'trigger-next-session'
            });

      - name: Send notification on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `VPS Session Failed - Run #${context.runNumber}`,
              body: `
                The VPS session has failed.
                
                **Run Details:**
                - Run Number: ${context.runNumber}
                - Triggered: ${context.eventName}
                - Failed At: ${new Date().toISOString()}
                
                Please check the workflow logs for more details.
              `,
              labels: ['vps-failure', 'automated']
            });

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-logs-${{ github.run_number }}
          path: /tmp/vps.log
          retention-days: 7
