name: Continuous Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-22.04
    timeout-minutes: 350

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Display startup info
        run: |
          echo "üîë VPS starting with hostname 'notfleppy'"
          echo "Creating username 'not' with password 'fleppy'"
          echo "Root password = fleppy"

      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname notfleppy
          echo "127.0.0.1 notfleppy" | sudo tee -a /etc/hosts

      - name: Set root password
        run: |
          echo "root:fleppy" | sudo chpasswd

      - name: Create user 'not' with password 'fleppy'
        run: |
          if ! id -u not >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash not
            echo "not:fleppy" | sudo chpasswd
            sudo usermod -aG sudo not
            echo "not ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/not
          fi

      - name: Install prerequisites and rclone
        run: |
          sudo apt update
          sudo apt install -y tmate curl unzip sudo net-tools neofetch rclone zip

      - name: Set up rclone config
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [gdrivveed]
          type = drive
          client_id = 534417340383-f4b86oa9dffhjuhdh4ekd38b0l9llnum.apps.googleusercontent.com
          client_secret = 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
          scope = drive.appfolder
          root_folder_id = appDataFolder
          token = {"access_token":"ya29.A0AS3H6Nzwim-1TEvkN3nVfRGSdWwIMFqMote2k5sALdNknVC7AJfpI7ZBThjQMC9pc4MU4FUopSyTYItIDf6cGLk2ICZxCuYwXkfv0-zSeRFcCSimdBeQaioIO_HU-BBNcVjNOkS0VUZQNJKbmByA6RE_l-yq-qYmEKrfTnBic1fmElS9BABnm7PROKcBK9YkJ99r4rMaCgYKAVUSARQSFQHGX2Mie4AeWO1kmPiOezxMExxkPw0206","token_type":"Bearer","refresh_token":"1//0gTA-49Cokc9pCgYIARAAGBASNwF-L9IrMXcOxDQi4ZO_l0F8H4atiKYtcPJ04imdqKqhiRPcDpwmRPeyna34BIS44P6TjU70n3o","expiry":"2025-08-30T04:25:26.737745722Z","expires_in":3599}
          team_drive = 
          EOF
          rclone listremotes

      - name: Restore VPS user data archive and Tailscale state
        id: restore
        run: |
          if rclone lsf gdrivveed:vps-backup/archive.zip >/dev/null 2>&1; then
            echo "Backup archive found. Restoring..."
            sudo rclone copy gdrivveed:vps-backup/archive.zip /tmp/ --progress
            echo "Extracting archive..."
            sudo unzip /tmp/archive.zip -d /
            sudo rm /tmp/archive.zip
            echo "User data restored successfully."

            echo "Restoring Tailscale state..."
            sudo rclone copy gdrivveed:vps-backup/var/lib/tailscale/tailscaled.state /var/lib/tailscale/ --progress
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
            echo "Tailscale state restored successfully."
            
            echo "backup_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "No backup archive found. Starting with a fresh VPS."
            echo "backup_found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=notfleppy || echo "Tailscale already up"
          echo "üîó Tailscale IP:"
          tailscale ip -4 || echo "Tailscale IP not found"
        if: ${{ steps.restore.outputs.backup_found == 'true' }}

      - name: Start Tailscale (New IP) and immediately back up
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=notfleppy || echo "Tailscale already up"
          echo "üîó Tailscale IP:"
          tailscale ip -4 || echo "Tailscale IP not found"
          echo "Backup up new Tailscale state immediately."
          sudo chown -R $USER:$USER /var/lib/tailscale
          rclone copy /var/lib/tailscale/tailscaled.state gdrivveed:vps-backup/var/lib/tailscale/ --progress
        if: ${{ steps.restore.outputs.backup_found == 'false' }}

      - name: Start manual tmate session
        run: |
          # Install tmate
          sudo apt-get install -y tmate
          # Create socket
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo ""
          echo "üîë SSH:"
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
          echo ""
          echo "üåê Web:"
          tmate -S /tmp/tmate.sock display -p '#{tmate_web}'

      - name: Sleep to keep VPS alive
        run: sleep 21600

      - name: Backup user data and Tailscale state (on completion)
        run: |
          echo "Creating user data archive..."
          sudo zip -r /tmp/archive.zip /root /home/not -x /root/.rclone.conf\*
          echo "Uploading archive to rclone..."
          sudo rclone copy /tmp/archive.zip gdrivveed:vps-backup/ --progress
          sudo rm /tmp/archive.zip

          echo "Backing up Tailscale state..."
          sudo chown -R $USER:$USER /var/lib/tailscale
          sudo rclone copy /var/lib/tailscale/tailscaled.state gdrivveed:vps-backup/var/lib/tailscale/ --progress
          echo "Backup completed."

      - name: Final Backup on Cancel 
        if: ${{ cancelled() }}
        run: |
          echo "Workflow canceled. Performing final backup..."
          echo "Creating user data archive..."
          sudo zip -r /tmp/archive.zip /root /home/not -x /root/.rclone.conf\*
          echo "Uploading archive to rclone..."
          sudo rclone copy /tmp/archive.zip gdrivveed:vps-backup/ --progress
          sudo rm /tmp/archive.zip

          echo "Backing up Tailscale state..."
          sudo chown -R $USER:$USER /var/lib/tailscale
          sudo rclone copy /var/lib/tailscale/tailscaled.state gdrivveed:vps-backup/var/lib/tailscale/ --progress
          echo "Final backup completed."
