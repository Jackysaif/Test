
name: 🕷️ Spidey's Persistent VPS Adventure

on:
  workflow_dispatch:
    inputs:
      force_fresh_install:
        description: '🔄 Force fresh install (ignore backups)'
        required: false
        default: 'false'
        type: boolean
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 420  # 7 hours to be safe
    
    steps:
      - name: 🕸️ Web-slinging into action
        run: |
          echo "🕷️ ===================================================="
          echo "🕷️ SPIDEY'S VPS IS SWINGING INTO ACTION! 🕸️"
          echo "🕷️ Time: $(date)"
          echo "🕷️ Your friendly neighborhood VPS is starting up! 🏢"
          echo "🕷️ ===================================================="
          
      - name: 🔧 Installing Spidey's web-tools (rclone)
        run: |
          echo "🕷️ Installing rclone - Spidey's file-slinging tool! 🕸️"
          curl https://rclone.org/install.sh | sudo bash
          echo "✅ Rclone installed! Ready to swing files around! 🕸️"

      - name: 🔐 Setting up MEGA web connection
        run: |
          echo "🕷️ Decoding MEGA secrets with spider sense... 🕸️"
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf 2>/dev/null || echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          echo "✅ MEGA connection established! 🕸️"

      - name: 🔍 Spider-sense:Checking for existing backups
        id: backup_check
        run: |
          echo "🕷️ Spider-sense is tingling... checking for backups! 🕸️"
          
          RESTORE_SUCCESS=false
          
          if [ "${{ github.event.inputs.force_fresh_install }}" = "true" ]; then
            echo "🔄 Force fresh install requested! Skipping all backups! 🕷️"
          else
            # Try GitHub artifacts first
            echo "🔍 Searching for GitHub artifacts..."
            # Note: In a real scenario, you'd need to download from previous workflow runs
            # This is a placeholder for the artifact download logic
            
            # Try MEGA backup
            echo "🔍 Checking MEGA for backup files..."
            if rclone ls mega:spidey-vps-backup/vps-backup.tar.gz > /dev/null 2>&1; then
              echo "🎯 Found MEGA backup! Spider-sense was right! 🕸️"
              echo "📥 Downloading backup from MEGA web..."
              rclone copy mega:spidey-vps-backup/vps-backup.tar.gz ./
              if [ -f "vps-backup.tar.gz" ]; then
                echo "🕷️ Extracting backup with spider precision..."
                sudo tar -xzf vps-backup.tar.gz -C / 2>/dev/null || echo "⚠️ Some files couldn't be restored (probably normal)"
                RESTORE_SUCCESS=true
                echo "✅ Backup restored! The web is back! 🕸️"
              fi
            else
              echo "🤷 No MEGA backup found. Time for a fresh start! 🕷️"
            fi
          fi
          
          echo "restore_success=$RESTORE_SUCCESS" >> $GITHUB_OUTPUT

      - name: 🏠 Setting up Spidey's new home
        if: steps.backup_check.outputs.restore_success != 'true'
        run: |
          echo "🏗️ Building Spidey's new web-base from scratch! 🕸️"
          
          # Set hostname
          echo "🏷️ Setting hostname to Spidey..."
          sudo hostnamectl set-hostname Spidey
          echo "✅ Hostname set! This machine is now officially Spidey! 🕷️"

      - name: 👤 Creating Spidey's alter ego (jacky user)
        run: |
          echo "🕷️ Creating secret identity: jacky 🥷"
          if ! id jacky > /dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:spidey" | sudo chpasswd
            sudo usermod -aG sudo jacky
            echo "✅ Secret identity created! jacky is ready with spider powers! 🕸️"
          else
            echo "👤 Secret identity already exists! jacky is still in the game! 🕷️"
          fi

      - name: 🕸️ Installing Tailscale (Spidey's private web)
        run: |
          echo "🕸️ Setting up Spidey's private web network... 🕷️"
          
          # Restore Tailscale state if available
          if [ -d "/var/lib/tailscale" ] && [ -f "/var/lib/tailscale/tailscaled.state" ]; then
            echo "🔄 Found existing Tailscale web! Preserving identity... 🕸️"
            sudo systemctl enable --now tailscaled
            sudo systemctl start tailscaled
          else
            echo "🆕 Fresh Tailscale installation! 🕸️"
            curl -fsSL https://tailscale.com/install.sh | sh
            sudo systemctl enable --now tailscaled
            sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --accept-routes
            echo "✅ Spidey's private web is now active! 🕸️"
          fi

      - name: 🗄️ Setting up MariaDB (Spidey's data vault)
        run: |
          echo "🗄️ Setting up Spidey's secure data vault! 🕷️"
          
          sudo apt-get update
          sudo apt-get install -y mariadb-server
          
          if [ ! -d "/var/lib/mysql/mysql" ]; then
            echo "🔧 Initializing fresh database..."
            sudo mysql_secure_installation << EOF
          

          y
          ${{ secrets.DB_ROOT_PASSWORD }}
          ${{ secrets.DB_ROOT_PASSWORD }}
          y
          y
          y
          y
          EOF
          else
            echo "📊 Database already initialized! Data vault is secure! 🕸️"
          fi
          
          sudo systemctl enable --now mariadb
          echo "✅ Data vault is operational! 🕸️"

      - name: 🎛️ Installing aaPanel (Spidey's control center)
        run: |
          echo "🎛️ Installing Spidey's web control center! 🕷️"
          
          # Check if aaPanel is already installed
          if command -v bt > /dev/null 2>&1; then
            echo "✅ aaPanel already installed! Control center is ready! 🕸️"
          else
            echo "📥 Downloading latest aaPanel installer..."
            wget -O install.sh http://www.aapanel.com/script/install_7.0_en.sh
            chmod +x install.sh
            
            echo "🤖 Starting automated installation with spider precision..."
            # Automated installation with prompts handled
            expect << 'EOF'
          spawn sudo bash install.sh
          expect "Do you want to install aaPanel to the /www directory now?(y/n):" { send "y\r" }
          expect "Do you want to install aaPanel by force?(yes/no):" { send "yes\r" }
          expect eof
          EOF
            
            # Install expect if not available and retry
            if ! command -v expect > /dev/null 2>&1; then
              echo "📦 Installing expect for automated prompts..."
              sudo apt-get update && sudo apt-get install -y expect
              
              echo "🔄 Retrying aaPanel installation with expect..."
              expect << 'EOF'
          spawn sudo bash install.sh
          expect "Do you want to install aaPanel to the /www directory now?(y/n):" { send "y\r" }
          expect "Do you want to install aaPanel by force?(yes/no):" { send "yes\r" }
          expect eof
          EOF
            fi
          fi
          
          echo "🔧 Configuring aaPanel credentials..."
          if command -v bt > /dev/null 2>&1; then
            sudo bt 5 << EOF
          Jacky
          EOF
            sudo bt 6 << EOF
          spidey
          EOF
            echo "✅ aaPanel configured! Username: Jacky, Password: spidey 🕸️"
          else
            echo "⚠️ aaPanel command not found, trying alternative setup..."
          fi

      - name: 🌐 Starting all Spidey services
        run: |
          echo "🚀 Firing up all of Spidey's web services! 🕷️"
          
          # Start essential services
          sudo systemctl start mariadb || echo "📊 MariaDB already running"
          sudo systemctl start tailscaled || echo "🕸️ Tailscale already running"
          sudo systemctl start nginx || sudo systemctl start apache2 || echo "🌐 Web server status unknown"
          
          # Start aaPanel if installed
          if command -v bt > /dev/null 2>&1; then
            sudo systemctl start bt || echo "🎛️ aaPanel service status unknown"
          fi
          
          echo "✅ All services are web-slinging! 🕸️"

      - name: 🕷️ Spidey's patrol loop (6 hours of web-slinging)
        run: |
          echo "🕷️ Starting Spidey's patrol! Watching over the web for 6 hours... 🕸️"
          echo "💡 Create /tmp/stop to trigger graceful shutdown! 🛑"
          
          START_TIME=$(date +%s)
          SIX_HOURS=21600  # 6 hours in seconds
          CHECK_INTERVAL=60  # Check every minute
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            REMAINING=$((SIX_HOURS - ELAPSED))
            
            if [ -f "/tmp/stop" ]; then
              echo "🛑 Stop signal detected! Spidey is preparing for graceful shutdown... 🕷️"
              break
            fi
            
            if [ $ELAPSED -ge $SIX_HOURS ]; then
              echo "⏰ 6 hours completed! Time for Spidey to swing home! 🕸️"
              break
            fi
            
            # Friendly status update every 30 minutes
            if [ $((ELAPSED % 1800)) -eq 0 ] && [ $ELAPSED -gt 0 ]; then
              HOURS=$((ELAPSED / 3600))
              MINUTES=$(((ELAPSED % 3600) / 60))
              echo "🕷️ Patrol status: ${HOURS}h ${MINUTES}m elapsed, still watching the web! 🕸️"
            fi
            
            sleep $CHECK_INTERVAL
          done
          
          echo "🕷️ Patrol completed! Time to secure the web base! 🕸️"

      - name: 💾 Creating backup of Spidey's web
        run: |
          echo "💾 Creating backup of Spidey's entire web! 🕸️"
          
          # Create backup manifest
          cat > backup-manifest.txt << EOF
          🕷️ SPIDEY'S BACKUP MANIFEST 🕸️
          Backup created: $(date)
          Hostname: $(hostname)
          
          📁 Included directories:
          - /home (Spidey's personal files)
          - /root (Root's secret files)
          - /etc (System configurations)
          - /var/www (Web files)
          - /opt (Optional applications)
          - /www (aaPanel data)
          - /var/lib/tailscale (Private web state)
          - /var/lib/mysql (Data vault)
          
          🔒 This backup contains everything needed to restore Spidey's web!
          EOF
          
          echo "📦 Creating compressed backup archive..."
          sudo tar -czf vps-backup.tar.gz \
            -C / \
            --exclude='proc/*' \
            --exclude='sys/*' \
            --exclude='dev/*' \
            --exclude='tmp/*' \
            --exclude='var/log/*' \
            --exclude='var/cache/*' \
            home root etc/hostname etc/hosts etc/passwd etc/group etc/shadow \
            var/www opt www var/lib/tailscale var/lib/mysql \
            backup-manifest.txt 2>/dev/null || true
            
          echo "✅ Backup archive created! Size: $(du -h vps-backup.tar.gz | cut -f1) 🕸️"

      - name: 🎯 Uploading to GitHub Artifacts (Primary backup)
        uses: actions/upload-artifact@v3
        with:
          name: spidey-vps-backup
          path: vps-backup.tar.gz
          retention-days: 30

      - name: ☁️ Uploading to MEGA (Secondary backup)
        run: |
          echo "☁️ Uploading backup to MEGA cloud web! 🕸️"
          
          # Create backup directory on MEGA if it doesn't exist
          rclone mkdir mega:spidey-vps-backup
          
          # Upload backup
          if rclone copy vps-backup.tar.gz mega:spidey-vps-backup/; then
            echo "✅ Backup uploaded to MEGA successfully! 🕸️"
            
            # Try to create a public link (if supported)
            MEGA_LINK=$(rclone link mega:spidey-vps-backup/vps-backup.tar.gz 2>/dev/null || echo "Direct link not available")
            echo "🔗 MEGA Link: $MEGA_LINK" | tee mega-backup-link.txt
          else
            echo "❌ Failed to upload to MEGA, but GitHub artifact backup exists! 🕷️"
          fi

      - name: 🏁 Spidey's mission complete!
        run: |
          echo "🕷️ ===================================================="
          echo "🎯 SPIDEY'S MISSION COMPLETE! 🕸️"
          echo "✅ Backup created and uploaded"
          echo "⏰ Session duration: ~6 hours"
          echo "🔒 All services secured"
          echo "🕷️ Your friendly neighborhood VPS will be back!"
          echo "🕷️ ===================================================="
          echo ""
          echo "📊 FINAL STATUS REPORT:"
          echo "🏠 Hostname: $(hostname)"
          echo "👤 User: jacky (with spider powers!)"
          echo "🌐 aaPanel: Configured (Jacky/spidey)"
          echo "🗄️ MariaDB: Running and secured"
          echo "🕸️ Tailscale: Connected to private web"
          echo "💾 Backup: Stored in GitHub + MEGA"
          echo ""
          echo "🕷️ Until next time, keep the web safe! 🕸️"
