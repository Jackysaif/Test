name: 🕷️ Spidey Persistent VPS - Optimized

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch:

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  MEGA_REMOTE: mega:vps-backup # Rclone remote path

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350
    steps:
      - name: 👤 Create user 'jacky' & Set Hostname
        run: |
          echo "🚀 Creating universal user and hostname setup..."
          sudo useradd -m -s /bin/bash jacky || true
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) ALL" | sudo tee /etc/sudoers.d/jacky
          sudo hostnamectl set-hostname github-vps
          echo "✅ User 'jacky' created and configured with password 'root'."

      - name: 🕸️ Checkout Code
        uses: actions/checkout@v4

      - name: ⚡ Install System Tools & Rclone
        run: |
          echo "Installing core system tools..."
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar psmisc screen openssh-server mariadb-server apache2 php php-mysql
          curl -fsSL https://rclone.org/install.sh | sudo bash
          sudo systemctl enable --now ssh
          echo "✅ Core tools installed."

      - name: ♻️ Restore from Backup OR Initialize
        id: restore
        run: |
          echo "🔍 Checking for existing backup on MEGA..."
          if rclone ls ${MEGA_REMOTE}/${BACKUP_NAME} >/dev/null 2>&1; then
            echo "✅ Backup found. Restoring system state..."
            rclone copy ${MEGA_REMOTE}/${BACKUP_NAME} /tmp/
            sudo tar -xzf /tmp/${BACKUP_NAME} --absolute-names -C /
            echo "is_new_install=false" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No backup found. This will be a fresh installation."
            sudo mkdir -p /home/jacky /opt /srv /var/www /var/lib/mysql /www/server
            echo "is_new_install=true" >> $GITHUB_OUTPUT
          fi

      - name: 🗑️ Delete Backup from MEGA
        if: steps.restore.outputs.is_new_install == 'false'
        run: |
          echo "Deleting backup file from MEGA remote..."
          rclone delete ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}
          echo "✅ Backup deleted from MEGA."

      - name: 🚀 Aapanel Setup
        run: |
          echo "Running Aapanel installer to configure over restored files..."
          curl -sSLo /tmp/install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
          (echo "y" && echo "yes") | sudo bash /tmp/install.sh

      - name: 🚀 Start System Services
        run: |
          set -e
          echo "🔄 (Re)loading system services..."
          sudo systemctl daemon-reload
          echo "🕸️ Installing and starting Tailscale..."
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=github-vps --reset
          sleep 10
          echo "⚙️ Starting database, Aapanel, and web services..."
          sudo systemctl start mariadb
          sudo bt restart || true
          sudo systemctl start apache2
          echo "✅ All services are running."
          echo "🌐 Tailscale IP: $(sudo tailscale ip -4 || echo 'Not available')"

      - name: 🔐 Set Aapanel Username & Password
        run: |
          echo "Setting Aapanel username and password..."
          echo "jacky" | sudo bt 6
          echo "spidey" | sudo bt 5
          echo "✅ Aapanel username is 'jacky' and password has been set to 'spidey'."

      - name: 🔗 Start tmate session (detached via screen)
        run: |
          echo "Starting detached tmate session..."
          # Start tmate inside detached screen so the step does not block
          screen -dmS tmate-session bash -c "tmate -F"
          echo "✅ Detached tmate session started."
          # Let the socket become available before next step
          sleep 10

      - name: Show Tailscale IP and tmate info
        run: |
          echo "🔗 Tailscale IP:"
          tailscale ip -4 || echo "Tailscale IP not found"
          echo ""
          echo "🔑 tmate SSH session:"
          TMATE_SSH_INFO=$(tmate show-messages | grep -m 1 'ssh ')
          if [ -z "$TMATE_SSH_INFO" ]; then
            echo "tmate SSH info not found, trying socket..."
            if [ -f $HOME/.tmate.sock/ssh ]; then
              cat $HOME/.tmate.sock/ssh
            else
              echo "No SSH info available."
            fi
          else
            echo "$TMATE_SSH_INFO"
          fi

      - name: ⏳ Maintain VPS Session
        run: |
          echo "🖥️ VPS is now running. To trigger a graceful shutdown and backup, create a file named '/tmp/stop_session' inside the VPS."
          SECS=0
          TIMEOUT=$((350*60)) # 350 minutes in seconds
          while [ ! -f /tmp/stop_session ] && [ $SECS -lt $TIMEOUT ]; do
            echo "Session is active. Sleeping for 60 seconds..."
            sleep 60
            SECS=$((SECS+60))
          done
          if [ -f /tmp/stop_session ]; then
            echo "Graceful shutdown initiated. Proceeding to backup step."
          else
            echo "Session ended due to timeout ($TIMEOUT seconds reached). Proceeding to backup step."
          fi

      - name: 📦 Create and Upload Backup to MEGA
        if: ${{ !cancelled() }}
        run: |
          echo "Preparing to create new backup..."
          mkdir -p ~/.config/rclone
          echo -e "[mega]\ntype = mega\nuser = ${{ secrets.MEGA_USER }}\npass = ${{ secrets.MEGA_PASS }}" > ~/.config/rclone/rclone.conf
          sudo systemctl stop apache2 mariadb bt
          echo "Creating system backup archive..."
          sudo tar --exclude-from <(printf '%s\n' \
            '/var/backups' \
            '/var/cache' \
            '/var/log' \
            '/tmp' \
            '/run' \
            '/proc' \
            '/dev' \
            '/sys' \
            '.cache' \
          ) -czf /tmp/${BACKUP_NAME} -C / .
          echo "Uploading new backup to MEGA remote..."
          rclone copy /tmp/${BACKUP_NAME} ${MEGA_REMOTE}/
          echo "✅ New backup uploaded successfully."
