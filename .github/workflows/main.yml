name: Persistent VPS with GitHub Artifact Backup

on:
  workflow_dispatch:
  workflow_call:

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1. Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y curl tmate

      # 2. Create jacky:root WITH SUDO PRIVILEGES
      - name: Create restricted user with sudo access
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            # Add jacky to sudo group
            sudo usermod -aG sudo jacky
            echo "User jacky created with password root and sudo privileges"
          else
            echo "User jacky already exists, ensuring sudo privileges..."
            sudo usermod -aG sudo jacky
          fi

      # 3. Set hostname
      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname github-vps
          echo "Hostname set to $(hostname)"

      # 4. Download and restore backup from previous workflow artifact
      - name: Download previous backup artifact
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: restore/
        continue-on-error: true

      # 5. Restore backup if exists
      - name: Restore backup if exists
        run: |
          if [ -f "restore/latest.tar.gz" ]; then
            echo "📦 Restoring backup..."
            sudo tar -xzf restore/latest.tar.gz -C /
            echo "✅ User data and system configuration restored successfully"
            
            # Reinstall previously installed packages
            if [ -f "restore/installed-packages.list" ]; then
              echo "📦 Reinstalling previous packages..."
              sudo apt-get update
              sudo dpkg --set-selections < restore/installed-packages.list
              sudo apt-get upgrade -y
              sudo apt-get dselect-upgrade -y
            fi
            
            # Restore services if they were installed
            if [ -f "restore/services-backup.tar.gz" ]; then
              echo "🔄 Restoring system services (Apache, MySQL, etc)..."
              sudo tar -xzf restore/services-backup.tar.gz -C /
            fi
            
            # Restore jacky user data (all files including hidden)
            if [ -f "restore/jacky-home-full.tar.gz" ]; then
              echo "🔄 Restoring jacky user data (all files)..."
              sudo tar -xzf restore/jacky-home-full.tar.gz -C /
            fi
            
          else
            echo "⚠️ No previous backup found, starting fresh"
          fi

      # 6. Setup Tailscale
      - name: Setup Tailscale
        run: |
          # Install using official script
          curl -fsSL https://tailscale.com/install.sh | sh
          
          # Check if we have a restored state
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "🔄 Using existing Tailscale state with existing IP"
            sudo systemctl start tailscaled
            # Wait a moment for tailscale to initialize
            sleep 3
            echo "🎉 Connected to Tailscale with existing state!"
          else
            echo "🆕 Setting up new Tailscale connection (new IP)"
            sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname github-vps --ssh
            echo "🎉 Connected to Tailscale with new IP!"
          fi
          
          echo "IP Address: $(tailscale ip -4 || echo 'Not available yet')"
          echo "👤 Username: jacky"
          echo "🔑 Password: root"
          echo "✅ Sudo access: Enabled (use 'sudo su' to become root)"
          echo "Tailscale status:"
          tailscale status || echo "Status check failed - may need more time to initialize"

      # 7. Start tmate session
      - name: Start tmate session
        run: |
          echo "🔗 Starting tmate session..."
          echo "✅ User jacky has sudo privileges (password: root)"
          echo "Use 'sudo su' to become root user"
          echo "Connect with: ssh $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo "Session will remain active for up to 6 hours"
          # Start tmate in foreground mode to keep the workflow running
          tmate -F -S /tmp/tmate.sock

      # 8. Backup ALL user data when session ends
      - name: Backup VPS data on session end
        if: always() && !cancelled()
        run: |
          mkdir -p backup
          
          echo "📦 Backing up ALL jacky user data (including hidden files)..."
          # Use --warning=no-file-changed to ignore files that change during backup
          sudo tar -czf backup/jacky-home-full.tar.gz \
            -C /home jacky \
            --exclude='*.tar.gz' \
            --exclude='.cache' \
            --warning=no-file-changed \
            . 2>/dev/null || echo "Home directory backup completed (some files may have changed)"
          
          echo "📦 Backing up installed packages..."
          dpkg --get-selections > backup/installed-packages.list
          
          echo "📦 Backing up system services (Apache, MySQL, PHP, aapanel)..."
          # Backup common web service directories with ignore-failed-read
          sudo tar -czf backup/services-backup.tar.gz \
            --ignore-failed-read \
            /etc/apache2 /etc/nginx /etc/mysql /etc/php \
            /var/www /var/lib/mysql \
            /usr/local/aapanel /opt/aapanel \
            /root/.aapanel 2>/dev/null || echo "Services backup completed"
          
          echo "📦 Backing up system configurations..."
          sudo tar -czf backup/system-config.tar.gz \
            --ignore-failed-read \
            /etc/ssh /etc/ssl /etc/cron.d /etc/systemd \
            /root/.ssh /home/jacky/.ssh 2>/dev/null || echo "Config backup completed"
          
          echo "📦 Creating full backup archive..."
          tar -czf backup/latest.tar.gz -C backup .
          echo "Backup contents:"
          ls -lh backup/

      # 9. Upload backup as GitHub artifact when session ends
      - name: Upload backup as GitHub artifact
        if: always() && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup/
          retention-days: 90
          if-no-files-found: warn

      # 10. Backup on workflow cancellation
      - name: Backup on workflow cancellation
        if: cancelled()
        run: |
          mkdir -p backup
          echo "⚠️ Workflow cancelled, backing up data..."
          
          echo "📦 Backing up ALL jacky user data (including hidden files)..."
          sudo tar -czf backup/jacky-home-full.tar.gz \
            -C /home jacky \
            --exclude='*.tar.gz' \
            --exclude='.cache' \
            --warning=no-file-changed \
            . 2>/dev/null || echo "Home directory backup completed (some files may have changed)"
          
          echo "📦 Backing up installed packages..."
          dpkg --get-selections > backup/installed-packages.list
          
          echo "📦 Backing up system services (Apache, MySQL, PHP, aapanel)..."
          sudo tar -czf backup/services-backup.tar.gz \
            --ignore-failed-read \
            /etc/apache2 /etc/nginx /etc/mysql /etc/php \
            /var/www /var/lib/mysql \
            /usr/local/aapanel /opt/aapanel \
            /root/.aapanel 2>/dev/null || echo "Services backup completed"
          
          echo "📦 Backing up system configurations..."
          sudo tar -czf backup/system-config.tar.gz \
            --ignore-failed-read \
            /etc/ssh /etc/ssl /etc/cron.d /etc/systemd \
            /root/.ssh /home/jacky/.ssh 2>/dev/null || echo "Config backup completed"
          
          echo "📦 Creating backup archive..."
          tar -czf backup/latest.tar.gz -C backup .
          
          echo "📦 Uploading backup as artifact..."
          # Upload using GitHub's artifact system
          ls -lh backup/

      # 11. Upload final backup on cancellation
      - name: Upload final backup on cancellation
        if: cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup-cancelled
          path: backup/
          retention-days: 90
          if-no-files-found: warn

      # 12. Display connection info after session
      - name: Display session results
        if: always()
        run: |
          if cancelled(); then
            echo "🏁 Session was cancelled - backup should be available in artifacts"
          else
            echo "🏁 Session ended normally - backup available in artifacts"
          fi
          echo "📦 Next session will restore from this backup"
