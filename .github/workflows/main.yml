name: Persistent VPS Session with Auto-Recovery

on:
  workflow_dispatch:
  schedule:
    # Run every 6 hours to maintain persistence
    - cron: '0 */6 * * *'

env:
  BACKUP_NAME: vps-state-backup
  SESSION_DURATION: 21600  # 6 hours in seconds
  BACKUP_WINDOW: 1800      # 30 minutes in seconds
  
jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours
    
    steps:
      # Step 1: Initial Environment Setup
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Setup Environment Variables
        run: |
          echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "BACKUP_ARTIFACT_NAME=${BACKUP_NAME}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          echo "MEGA_BACKUP_URL=$(cat mega_backup_url.txt 2>/dev/null || echo '')" >> $GITHUB_ENV
          
      # Step 2: Attempt to Restore from Previous Session
      - name: Try to Restore from GitHub Artifacts
        id: restore-artifact
        continue-on-error: true
        run: |
          echo "::group::Attempting to download latest backup from GitHub Artifacts"
          
          # Get the most recent artifact
          ARTIFACTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.name | startswith("'"${BACKUP_NAME}"'")) | .id' \
            | head -1)
          
          if [ -n "$ARTIFACTS" ]; then
            echo "Found artifact ID: $ARTIFACTS"
            gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/actions/artifacts/$ARTIFACTS/zip \
              > backup.zip
            
            unzip backup.zip
            if [ -f "vps-backup.tar.gz" ]; then
              echo "restore_success=true" >> $GITHUB_OUTPUT
              echo "Backup downloaded successfully"
            else
              echo "restore_success=false" >> $GITHUB_OUTPUT
              echo "Backup file not found in artifact"
            fi
          else
            echo "restore_success=false" >> $GITHUB_OUTPUT
            echo "No artifacts found"
          fi
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ github.token }}
          
      # Step 3: Fallback to MEGA if GitHub Artifacts failed
      - name: Restore from MEGA Backup (Fallback)
        if: steps.restore-artifact.outputs.restore_success != 'true' && env.MEGA_BACKUP_URL != ''
        continue-on-error: true
        run: |
          echo "::group::Attempting to restore from MEGA backup"
          sudo apt-get update && sudo apt-get install -y megatools wget
          
          # Download from MEGA
          if megadl "${{ env.MEGA_BACKUP_URL }}" --path=/tmp/; then
            mv /tmp/vps-backup.tar.gz ./vps-backup.tar.gz 2>/dev/null || true
            echo "MEGA backup downloaded successfully"
          else
            echo "Failed to download from MEGA"
          fi
          echo "::endgroup::"
          
      # Step 4: Create User and Basic System Setup
      - name: System Initialization
        run: |
          echo "::group::Creating user and setting up system"
          
          # Create user Jacky with sudo privileges
          sudo useradd -m -s /bin/bash -G sudo jacky || echo "User may already exist"
          echo "jacky:spidey" | sudo chpasswd
          echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          
          # Set hostname
          sudo hostnamectl set-hostname Spidey || sudo hostname Spidey
          echo "127.0.1.1 Spidey" | sudo tee -a /etc/hosts
          
          echo "::endgroup::"
          
      # Step 5: Restore Backup Data if Available
      - name: Restore VPS State
        if: steps.restore-artifact.outputs.restore_success == 'true' || env.MEGA_BACKUP_URL != ''
        run: |
          echo "::group::Restoring VPS state from backup"
          
          if [ -f "vps-backup.tar.gz" ]; then
            # Create temporary extraction directory
            sudo mkdir -p /tmp/restore
            sudo tar -xzf vps-backup.tar.gz -C /tmp/restore
            
            # Restore home directories
            if [ -d "/tmp/restore/home" ]; then
              sudo cp -rpf /tmp/restore/home/* /home/ 2>/dev/null || true
              sudo chown -R jacky:jacky /home/jacky
            fi
            
            # Restore application configurations
            if [ -d "/tmp/restore/etc" ]; then
              sudo cp -rpf /tmp/restore/etc/* /etc/ 2>/dev/null || true
            fi
            
            # Restore web data
            if [ -d "/tmp/restore/var/www" ]; then
              sudo mkdir -p /var/www
              sudo cp -rpf /tmp/restore/var/www/* /var/www/ 2>/dev/null || true
            fi
            
            # Restore package list and reinstall
            if [ -f "/tmp/restore/installed-packages.txt" ]; then
              sudo apt-get update
              cat /tmp/restore/installed-packages.txt | xargs sudo apt-get install -y || true
            fi
            
            # Restore cron jobs
            if [ -f "/tmp/restore/crontab-backup.txt" ]; then
              sudo crontab -u jacky /tmp/restore/crontab-backup.txt 2>/dev/null || true
            fi
            
            # Restore systemd services
            if [ -d "/tmp/restore/systemd" ]; then
              sudo cp -rpf /tmp/restore/systemd/* /etc/systemd/system/ 2>/dev/null || true
              sudo systemctl daemon-reload
            fi
            
            # Clean up
            sudo rm -rf /tmp/restore
            echo "State restoration completed"
          else
            echo "No backup file found to restore"
          fi
          
          echo "::endgroup::"
          
      # Step 6: Install aaPanel
      - name: Install aaPanel
        run: |
          echo "::group::Installing aaPanel"
          
          # Check if aaPanel is already installed
          if ! command -v bt &> /dev/null; then
            # Download and install aaPanel with auto-yes
            wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
            echo "y" | sudo bash install.sh aapanel
            
            # Configure aaPanel credentials
            sudo bt << EOF
          14
          Jacky
          EOF
            
            sudo bt << EOF
          5
          spidey
          EOF
          else
            echo "aaPanel already installed"
          fi
          
          echo "::endgroup::"
          
      # Step 7: Setup Tailscale (if previously configured)
      - name: Restore Tailscale Identity
        continue-on-error: true
        run: |
          echo "::group::Restoring Tailscale configuration"
          
          # Install Tailscale if not present
          if ! command -v tailscale &> /dev/null; then
            curl -fsSL https://tailscale.com/install.sh | sh
          fi
          
          # If Tailscale state was restored, restart the service
          if [ -d "/var/lib/tailscale" ]; then
            sudo systemctl restart tailscaled
            sleep 5
            sudo tailscale up --accept-routes --accept-dns=false || true
          fi
          
          echo "::endgroup::"
          
      # Step 8: Main Session with Monitoring
      - name: Run Main Session
        run: |
          echo "::group::Starting main VPS session"
          
          # Calculate end times
          CURRENT_TIME=$(date +%s)
          END_TIME=$((START_TIME + SESSION_DURATION))
          BACKUP_START_TIME=$((END_TIME - BACKUP_WINDOW))
          
          echo "Session will run until $(date -d @$END_TIME)"
          echo "Backup will start at $(date -d @$BACKUP_START_TIME)"
          
          # Create a monitoring script
          cat << 'MONITOR_SCRIPT' | sudo tee /usr/local/bin/session-monitor.sh
          #!/bin/bash
          START_TIME=$1
          SESSION_DURATION=$2
          BACKUP_WINDOW=$3
          
          while true; do
            CURRENT_TIME=$(date +%s)
            END_TIME=$((START_TIME + SESSION_DURATION))
            BACKUP_START_TIME=$((END_TIME - BACKUP_WINDOW))
            
            # Check for graceful shutdown trigger
            if [ -f /tmp/stop ]; then
              echo "Graceful shutdown triggered"
              touch /tmp/start-backup
              exit 0
            fi
            
            # Check if it's time for scheduled backup
            if [ $CURRENT_TIME -ge $BACKUP_START_TIME ]; then
              echo "Backup window reached"
              touch /tmp/start-backup
              exit 0
            fi
            
            # Log session status every 5 minutes
            if [ $((CURRENT_TIME % 300)) -lt 30 ]; then
              REMAINING=$((END_TIME - CURRENT_TIME))
              echo "Session status: $(($REMAINING / 60)) minutes remaining"
            fi
            
            sleep 30
          done
          MONITOR_SCRIPT
          
          sudo chmod +x /usr/local/bin/session-monitor.sh
          
          # Start the monitor in background
          sudo /usr/local/bin/session-monitor.sh $START_TIME $SESSION_DURATION $BACKUP_WINDOW &
          MONITOR_PID=$!
          
          # Wait for backup signal
          while [ ! -f /tmp/start-backup ]; do
            sleep 30
          done
          
          echo "::endgroup::"
          
      # Step 9: Create Backup
      - name: Create VPS State Backup
        id: create-backup
        run: |
          echo "::group::Creating VPS state backup"
          
          # Create backup directory
          sudo mkdir -p /tmp/backup-staging
          
          # Backup home directories
          sudo cp -rp /home /tmp/backup-staging/
          
          # Backup important configurations
          sudo mkdir -p /tmp/backup-staging/etc
          sudo cp -rp /etc/apache2 /tmp/backup-staging/etc/ 2>/dev/null || true
          sudo cp -rp /etc/nginx /tmp/backup-staging/etc/ 2>/dev/null || true
          sudo cp -rp /etc/mysql /tmp/backup-staging/etc/ 2>/dev/null || true
          sudo cp -rp /etc/systemd/system /tmp/backup-staging/systemd 2>/dev/null || true
          
          # Backup web data
          sudo mkdir -p /tmp/backup-staging/var
          sudo cp -rp /var/www /tmp/backup-staging/var/ 2>/dev/null || true
          
          # Backup aaPanel data
          sudo cp -rp /www/server/panel /tmp/backup-staging/ 2>/dev/null || true
          
          # Backup Tailscale state
          sudo cp -rp /var/lib/tailscale /tmp/backup-staging/ 2>/dev/null || true
          
          # Save installed packages list
          dpkg --get-selections | grep -v deinstall | awk '{print $1}' > /tmp/backup-staging/installed-packages.txt
          
          # Backup cron jobs
          sudo crontab -u jacky -l > /tmp/backup-staging/crontab-backup.txt 2>/dev/null || true
          
          # Create the backup archive
          cd /tmp/backup-staging
          sudo tar -czf /tmp/vps-backup.tar.gz .
          
          # Move to workspace
          mv /tmp/vps-backup.tar.gz ${{ github.workspace }}/vps-backup.tar.gz
          
          echo "backup_created=true" >> $GITHUB_OUTPUT
          echo "Backup created successfully"
          echo "::endgroup::"
          
      # Step 10: Upload to GitHub Artifacts
      - name: Upload to GitHub Artifacts
        if: steps.create-backup.outputs.backup_created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKUP_ARTIFACT_NAME }}
          path: vps-backup.tar.gz
          retention-days: 7
          
      # Step 11: Upload to MEGA
      - name: Upload to MEGA and Update URL
        if: steps.create-backup.outputs.backup_created == 'true'
        env:
          MEGA_EMAIL: ${{ secrets.MEGA_EMAIL }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        run: |
          echo "::group::Uploading backup to MEGA"
          
          if [ -n "$MEGA_EMAIL" ] && [ -n "$MEGA_PASSWORD" ]; then
            # Login to MEGA
            mega-login "$MEGA_EMAIL" "$MEGA_PASSWORD"
            
            # Upload the backup
            BACKUP_FILENAME="vps-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
            mega-put vps-backup.tar.gz /$BACKUP_FILENAME
            
            # Get the public link
            MEGA_LINK=$(mega-export -a /$BACKUP_FILENAME | grep "https")
            
            # Update the URL file
            echo "$MEGA_LINK" > mega_backup_url.txt
            
            # Commit the updated URL
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add mega_backup_url.txt
            git commit -m "Update MEGA backup URL [skip ci]" || true
            git push || true
            
            echo "Backup uploaded to MEGA successfully"
          else
            echo "MEGA credentials not configured"
          fi
          
          echo "::endgroup::"
          
      # Step 12: Cleanup and Final Status
      - name: Session Cleanup
        if: always()
        run: |
          echo "::group::Session cleanup"
          echo "Session completed at $(date)"
          
          # Kill monitor process if still running
          sudo pkill -f session-monitor.sh || true
          
          # Clean up temporary files
          sudo rm -f /tmp/stop /tmp/start-backup
          sudo rm -rf /tmp/backup-staging
          
          echo "::endgroup::"
