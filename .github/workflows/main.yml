# GitHub Actions Workflow for Persistent VPS Session - Ben 10 Edition! 🛸👽
# Required Secrets:
# - TAILSCALE_AUTHKEY: Tailscale authentication key (string)
# - MEGA_RCLONE: Base64-encoded rclone configuration text for MEGA remote
# - DB_ROOT_PASSWORD: Root password for MariaDB (string)

name: Persistent VPS - Ben 10 Alien Force

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 400
    steps:
      - name: Checkout repository 🛒
        uses: actions/checkout@v4

      - name: Prepare environment 🚀 Omnitrix Loading!
        run: |
          set -euo pipefail
          echo "👽 Ben 10 transforming! Installing packages... 🔥"
          sudo apt update || { echo "😱 Apt update failed! Alien invasion detected!"; exit 1; }
          sudo apt install -y rclone jq tar gzip expect mariadb-server wget curl tmate || { echo "🚨 Package install error! Call Grandpa Max!"; exit 1; }
          echo "🦸 Tailscale install initiating... Four Arms punching through!"
          curl -fsSL https://tailscale.com/install.sh | sh || { echo "😤 Tailscale install failed! Try Heatblast next time."; exit 1; }
          echo "🔐 Decoding rclone config... XLR8 speed mode! ⚡"
          mkdir -p ~/.config/rclone
          echo "${{ secrets.MEGA_RCLONE }}" | base64 -d > ~/.config/rclone/rclone.conf || { echo "🤯 Decode failed! Diamondhead unbreakable error."; exit 1; }
          echo "🎉 Environment ready! It's Hero Time! 🕰️"

      - name: Create user and set hostname 👤 Spidey Alien Unlocked!
        run: |
          set -euo pipefail
          echo "🕷️ Creating user jacky... Swampfire growing roots!"
          id -u jacky &>/dev/null || sudo useradd -m -s /bin/bash jacky || { echo "😠 Useradd failed! Echo Echo duplicating errors."; exit 1; }
          echo "jacky:spidey" | sudo chpasswd || { echo "🔑 Chpasswd error! Ghostfreak haunting passwords."; exit 1; }
          sudo usermod -aG sudo jacky || { echo "👥 Usermod failed! Big Chill freezing groups."; exit 1; }
          sudo hostnamectl set-hostname Spidey || { echo "🏷️ Hostname set failed! Upgrade to Ultimate Spidey."; exit 1; }
          echo "✅ User and hostname set! Ben 10 wins again! 🏆"

      - name: Install aaPanel 🛠️ Panel Power-Up!
        run: |
          set -euo pipefail
          echo "📦 Fetching aaPanel installer... Jetray flying in! ✈️"
          /usr/bin/expect <<EOF
          set timeout 300
          spawn bash -c "URL=https://www.aapanel.com/script/install_7.0_en.sh && if [ -f /usr/bin/curl ];then curl -ksSO \"\\\$URL\" ;else wget --no-check-certificate -O install_7.0_en.sh \"\\\$URL\";fi;bash install_7.0_en.sh"
          expect {
            "install panel" { send "y\r"; exp_continue }
            "force install" { send "yes\r"; exp_continue }
            eof
          }
          EOF
          if [ $? -ne 0 ]; then
            echo "💥 aaPanel install exploded! Chromastone absorbing failure."
            exit 1
          fi
          echo "🌟 aaPanel installed! Time to go hero! 💪"

      - name: Restore or provision 🔄 Omnitrix Scan for Backups!
        run: |
          set -euo pipefail

          # Define directories to backup/restore
          DIRS=("/home" "/root" "/etc/mysql" "/etc/systemd/system" "/var/www" "/opt" "/www" "/var/lib/tailscale" "/var/lib/mysql")
          echo "📁 Directories targeted: ${DIRS[@]} ... Brainstorm calculating! 🧠"

          # Function to download from artifact
          download_from_artifact() {
            echo "🔍 Searching GitHub artifacts... Wildmutt sniffing! 🐕"
            GITHUB_TOKEN="${{ github.token }}"
            REPO="${{ github.repository }}"
            curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/artifacts?per_page=100" > artifacts.json || { echo "🌐 Curl failed! Nanomech tiny error."; return 1; }
            ARTIFACT_ID=$(jq -r '.artifacts | sort_by(.created_at) | reverse | .[] | select(.name == "vps-backup") | .id' artifacts.json | head -1)
            if [ -z "$ARTIFACT_ID" ]; then
              echo "❌ No artifact found! Rath smashing disappointment! 😡"
              return 1
            fi
            echo "🎯 Found artifact ID: $ARTIFACT_ID ... Armodrillo drilling down!"
            curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/actions/artifacts/$ARTIFACT_ID" > artifact.json || { echo "📄 Artifact info fetch failed!"; return 1; }
            DOWNLOAD_URL=$(jq -r '.archive_download_url' artifact.json)
            curl -L -o artifact.zip -H "Authorization: token $GITHUB_TOKEN" "$DOWNLOAD_URL" || { echo "⬇️ Download failed! Water Hazard flooding errors."; return 1; }
            unzip -q artifact.zip -d temp_artifact || { echo "🤐 Unzip error!"; return 1; }
            mv temp_artifact/*.tar.gz backup.tar.gz || { echo "🚚 Move failed!"; return 1; }
            rm -rf temp_artifact artifact.zip artifacts.json artifact.json
            echo "✅ Artifact downloaded! Heroic success! 🦸‍♂️"
            return 0
          }

          # Function to download from MEGA
          download_from_mega() {
            echo "☁️ Listing MEGA backups... Stinkfly scouting! 🦟"
            rclone lsjson mega:vps-backups/ > files.json || { echo "📋 Rclone lsjson failed!"; return 1; }
            LATEST_FILE=$(jq -r '[ .[] | select(.Name | endswith(".tar.gz")) ] | sort_by(.ModifiedTime) | reverse | .[0].Name' files.json)
            if [ -z "$LATEST_FILE" ] || [ "$LATEST_FILE" = "null" ]; then
              echo "🚫 No MEGA backup found! Goop slipping away."
              return 1
            fi
            echo "📥 Downloading $LATEST_FILE ... AmpFibian electrifying! ⚡"
            rclone copy "mega:vps-backups/$LATEST_FILE" . || { echo "🔄 Rclone copy failed!"; return 1; }
            mv "$LATEST_FILE" backup.tar.gz
            rm files.json
            echo "✅ MEGA download complete! Alien force united!"
            return 0
          }

          # Function to restore from backup.tar.gz
          perform_restore() {
            echo "🛠️ Extracting backup... Humungousaur strength! 💥"
            mkdir -p restore_dir
            tar xzf backup.tar.gz -C restore_dir || { echo "📦 Tar extract failed!"; exit 1; }
            echo "🛑 Stopping services... Kickin' Hawk pausing! 🦅"
            sudo systemctl stop mariadb tailscaled || true
            sudo bt stop || true
            echo "📂 Restoring files... Lodestar guiding! ⭐"
            sudo cp -rp restore_dir/* / || { echo "📁 Copy failed! Terraspin spinning errors."; exit 1; }
            echo "🔒 Setting permissions... Cannonbolt rolling secure! 🔴"
            sudo chown -R mysql:mysql /var/lib/mysql
            sudo chown -R root:root /var/lib/tailscale
            sudo chown -R www:www /www || true  # Assuming aaPanel uses www user/group
            echo "🔄 Reloading services... Feedback amplifying! 📢"
            sudo systemctl daemon-reload
            sudo systemctl start mariadb || { echo "🚨 MariaDB start failed!"; exit 1; }
            sudo systemctl start tailscaled || { echo "🚨 Tailscaled start failed!"; exit 1; }
            sudo tailscale up || true  # Reconnect with restored state
            sudo bt restart || true
            echo "🩺 Health checks incoming... Clockwork timing! ⏰"
            sleep 10
            sudo systemctl status mariadb --no-pager || echo "😷 MariaDB health check failed - Call Dr. Animo!"
            tailscale status || echo "😷 Tailscale health check failed - Vilgax attack?"
            sudo bt default || echo "😷 aaPanel health check failed - Plumber alert!"
            rm -rf restore_dir backup.tar.gz
            echo "🎊 Restore complete! Ben 10 saves the day! 🌟"
          }

          # Function for fresh provision
          perform_fresh() {
            echo "🆕 Starting fresh provision... Ripjaws diving in! 🦈"
            # Set aaPanel credentials
            sudo bt 5 Jacky || { echo "👤 aaPanel username set failed!"; exit 1; }
            sudo bt 6 spidey || { echo "🔑 aaPanel password set failed!"; exit 1; }
            DB_PASS="${{ secrets.DB_ROOT_PASSWORD }}"
            echo "🗝️ Setting MariaDB root password... Grey Matter intelligence! 🧠"
            sudo mysql -u root <<EOF
            ALTER USER 'root'@'localhost' IDENTIFIED BY '$DB_PASS';
            FLUSH PRIVILEGES;
            EOF
            if [ $? -ne 0 ]; then
              echo "🛑 MySQL command failed! Alien X rewriting reality?"
              exit 1
            fi
            echo "📊 Creating test database... Way Big stomping! 👣"
            mysql -u root -p"$DB_PASS" -e "CREATE DATABASE IF NOT EXISTS test;" || { echo "🏗️ Database create failed!"; exit 1; }
            echo "🌐 Starting Tailscale... Blitzwolfer howling! 🐺"
            sudo tailscale up --authkey "${{ secrets.TAILSCALE_AUTHKEY }}" || { echo "🔗 Tailscale up failed!"; exit 1; }
            # Immediate backup of new Tailscale state to MEGA
            cd /tmp
            echo "💾 Backing up Tailscale state... Snare-oh wrapping! 🧻"
            sudo tar czf tailscale-state.tar.gz /var/lib/tailscale || { echo "📦 Tar failed!"; exit 1; }
            rclone copy tailscale-state.tar.gz mega:vps-backups/ || { echo "☁️ Rclone upload failed!"; exit 1; }
            rm tailscale-state.tar.gz
            # Start services (already started, but ensure)
            sudo systemctl start mariadb || { echo "🚨 MariaDB start failed!"; exit 1; }
            sudo bt restart || true
            echo "🚀 Fresh provision done! Ultimate Ben 10,000! 🔮"
          }

          # Attempt restores or fresh
          echo "🕵️ Attempting artifact restore... Eye Guy watching! 👀"
          if download_from_artifact; then
            perform_restore
            echo "🔙 Restored from GitHub artifact - Time travel success!"
          else
            echo "🔄 Falling back to MEGA... Frankenstrike shocking! ⚡"
            if download_from_mega; then
              perform_restore
              echo "🔙 Restored from MEGA - Backup heroes!"
            else
              perform_fresh
              echo "🆕 Performed fresh provision - New alien unlocked!"
            fi
          fi

      - name: Run persistent session ⏳ Session in Alien Mode!
        run: |
          set -euo pipefail

          # Define directories for backup (same as above)
          DIRS=("/home" "/root" "/etc/mysql" "/etc/systemd/system" "/var/www" "/opt" "/www" "/var/lib/tailscale" "/var/lib/mysql")
          echo "📁 Backup dirs: ${DIRS[@]} ... Computron computing! 🤖"

          # Function to perform backup
          perform_backup() {
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            BACKUP_FILE="/tmp/vps-backup-$TIMESTAMP.tar.gz"
            MANIFEST="/tmp/backup-manifest.txt"
            echo "📝 Creating manifest... Ditto duplicating! 👥"
            cat <<EOF > $MANIFEST
           Backed up directories:
           $(printf "%s\n" "${DIRS[@]}")
            EOF
            cd /
            echo "🔒 Tarring files... Ball Weevil rolling! 🟡"
            sudo tar czf "$BACKUP_FILE" "$MANIFEST" "${DIRS[@]}" || { echo "💥 Tar failed! Crashhopper jumping errors."; exit 1; }
            rm "$MANIFEST"
            echo "$BACKUP_FILE" > /tmp/backup_file_path.txt
            echo "✅ Backup created: $BACKUP_FILE - Saved the universe! 🌌"
          }

          # Start tmate for debugging
          echo "🔧 Starting tmate debug session... Pesky Dust sprinkling! 🧚"
          tmate -F &

          # Run loop for ~6 hours (21600 seconds), check every 5 minutes (300 seconds)
          END_TIME=$(( $(date +%s) + 21600 ))
          echo "⏱️ Starting session loop... Chromastone absorbing time! 💎"
          while [ $(date +%s) -lt $END_TIME ]; do
            if [ -f /tmp/stop ]; then
              echo "🛑 Graceful shutdown triggered! Toepick scaring off! 😱"
              perform_backup
              break
            fi
            echo "🔄 Loop check... Still going strong! NRG energizing! ☢️"
            sleep 300
          done

          # Final backup if not already done
          if [ ! -f /tmp/backup_file_path.txt ]; then
            echo "🛡️ Final backup initiating... Ultimos supreme! 🦸‍♂️"
            perform_backup
          fi

      - name: Set backup file path environment variable 📥 Prep Artifact Upload!
        run: |
          set -euo pipefail
          echo "🔧 Setting backup path... Upgrade transforming! 🔧"
          BACKUP_FILE=$(cat /tmp/backup_file_path.txt || echo "/tmp/vps-backup-default.tar.gz")
          echo "BACKUP_PATH=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Upload backup as GitHub artifact 📤 Artifact Beam!
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: ${{ env.BACKUP_PATH }}
          retention-days: 7  # Short retention to avoid accumulation
        # Note: Imagine: echo "🚀 Uploading to GitHub... Skurd attaching!"

      - name: Upload backup to MEGA and generate link ☁️ MEGA Warp!
        if: always()
        run: |
          set -euo pipefail
          BACKUP_FILE=$(cat /tmp/backup_file_path.txt)
          if [ -f "$BACKUP_FILE" ]; then
            echo "📤 Uploading to MEGA... Gravattack pulling! 🪐"
            rclone copy "$BACKUP_FILE" mega:vps-backups/ || { echo "☁️ Rclone copy failed! Atomix atomic error."; exit 1; }
            FILENAME=$(basename "$BACKUP_FILE")
            echo "🔗 Generating link... Buzzshock buzzing! ⚡"
            LINK=$(rclone link "mega:vps-backups/$FILENAME") || { echo "🔗 Link failed!"; exit 1; }
            echo "$LINK" > mega-backup-link.txt
            echo "✅ MEGA upload and link ready! Ben 10 ultimate victory! 🎉"
          else
            echo "🚫 No backup file found, skipping MEGA upload - Feedback loop broken?"
          fi

      - name: Upload MEGA link as artifact 📎 Link Artifact!
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mega-backup-link
          path: mega-backup-link.txt
          retention-days: 7
        # Note: Imagine echo "📎 Uploading link... Walkatrout swimming upstream! 🐟"
