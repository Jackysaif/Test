name: Persistent VPS Session Manager

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual triggering

env:
  VPS_USER: Jacky
  VPS_PASSWORD: spidey
  HOSTNAME: Spidey
  AAPANEL_USER: Jacky
  AAPANEL_PASSWORD: spidey
  SESSION_TIMEOUT: 330m  # 5 hours 30 minutes
  BACKUP_TIMEOUT: 30m

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours total
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy and configure VPS
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.VPS_HOST }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          #!/bin/bash
          set -e

          # Function to backup data
          backup_data() {
            echo "Starting backup process..."
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_FILE="/tmp/backup_${TIMESTAMP}.tar.gz"
            
            # Create backup of important data
            tar -czf $BACKUP_FILE \
              /home/$VPS_USER/ \
              /etc/tailscale/ \
              /var/lib/tailscale/ \
              /www/ \
              /wwwroot/ \
              /var/www/ \
              /etc/nginx/ \
              /etc/apache2/ \
              /etc/mysql/ \
              /var/lib/mysql/ \
              /opt/ \
              /usr/local/aapanel/ \
              /root/.ssh/ \
              /home/$VPS_USER/.ssh/ \
              /etc/hosts \
              /etc/hostname \
              /etc/systemd/ \
              /var/log/ 2>/dev/null | true
            
            echo "Backup created: $BACKUP_FILE"
            echo $BACKUP_FILE
          }

          # Function to restore data
          restore_data() {
            echo "Checking for previous backup..."
            
            # Try to download from GitHub artifact first
            if [ -f "/tmp/previous_backup.txt" ]; then
              BACKUP_URL=$(cat /tmp/previous_backup.txt)
              echo "Found backup URL: $BACKUP_URL"
              
              if curl -s -f -L "$BACKUP_URL" -o /tmp/restore_backup.tar.gz; then
                echo "Downloaded backup from GitHub artifact"
                tar -xzf /tmp/restore_backup.tar.gz -C /
                rm /tmp/restore_backup.tar.gz
                return 0
              fi
            fi

            # Try Mega.nz backup
            if command -v mega-get &> /dev/null; then
              echo "Trying Mega.nz backup..."
              if mega-get /backup_latest.tar.gz /tmp/restore_backup.tar.gz; then
                tar -xzf /tmp/restore_backup.tar.gz -C /
                rm /tmp/restore_backup.tar.gz
                return 0
              fi
            fi

            echo "No backup found, starting fresh session"
            return 1
          }

          # Set hostname
          hostnamectl set-hostname $HOSTNAME
          echo "127.0.0.1 $HOSTNAME" >> /etc/hosts

          # Create user if not exists
          if ! id "$VPS_USER" &>/dev/null; then
            useradd -m -G sudo -s /bin/bash "$VPS_USER"
            echo "$VPS_USER:$VPS_PASSWORD" | chpasswd
            echo "$VPS_USER ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$VPS_USER
          fi

          # Install Tailscale if not installed
          if ! command -v tailscale &> /dev/null; then
            curl -fsSL https://tailscale.com/install.sh | sh
          fi

          # Start Tailscale
          tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --accept-routes --accept-dns || true

          # Install aaPanel if not installed
          if ! command -v bt &> /dev/null; then
            wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
            echo "y" | bash install.sh
          fi

          # Configure aaPanel
          bt << EOF
5
6
$AAPANEL_USER
$AAPANEL_PASSWORD
$AAPANEL_PASSWORD
y
EOF

          # Restore previous session data
          restore_data || echo "Starting new session without restore"

          # Start services
          systemctl start nginx || true
          systemctl start mysql || true
          systemctl start apache2 || true
          systemctl start tailscale || true

          # Session monitoring loop
          echo "Session started at $(date)"
          echo "Session will run for $SESSION_TIMEOUT"
          
          END_TIME=$(( $(date +%s) + 330 * 60 ))  # 5.5 hours from now
          
          while [ $(date +%s) -lt $END_TIME ]; do
            # Check for stop command
            if [ -f "/tmp/stop" ]; then
              echo "Stop command detected, initiating graceful shutdown"
              rm /tmp/stop
              break
            fi
            
            # Check system health
            if ! systemctl is-active --quiet tailscale; then
              echo "Tailscale not active, restarting..."
              systemctl restart tailscale
            fi
            
            sleep 30
          done

          # Create final backup
          BACKUP_FILE=$(backup_data)
          
          # Upload backup to GitHub artifact (via base64 encoding for transfer)
          base64 $BACKUP_FILE > /tmp/backup.b64
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

          # Also upload to Mega.nz if configured
          if command -v mega-put &> /dev/null && [ -n "${{ secrets.MEGA_EMAIL }}" ] && [ -n "${{ secrets.MEGA_PASSWORD }}" ]; then
            mega-login "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}" || true
            mega-put $BACKUP_FILE / || true
            mega-backup || true
          fi

          # Cleanup
          rm -f $BACKUP_FILE
          echo "Session completed at $(date)"

    - name: Download backup from VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "/tmp/backup.b64"
        target: "."

    - name: Decode and store backup
      run: |
        base64 -d backup.b64 > backup_final.tar.gz
        rm backup.b64

    - name: Upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: vps-backup-$(date +%Y%m%d_%H%M%S)
        path: backup_final.tar.gz
        retention-days: 7

    - name: Store artifact download URL
      run: |
        ARTIFACT_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV
        echo "Backup available at: $ARTIFACT_URL" > artifact_url.txt

    - name: Upload to Mega.nz (fallback)
      if: always() && secrets.MEGA_EMAIL != '' && secrets.MEGA_PASSWORD != ''
      run: |
        pip3 install megatools
        mega-login "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}"
        mega-put backup_final.tar.gz /
        MEGA_URL=$(mega-export -a /backup_final.tar.gz | grep -o 'https://mega\.nz/[^"]*')
        echo "MEGA_URL=$MEGA_URL" >> $GITHUB_ENV
        echo "Mega backup: $MEGA_URL" >> mega_url.txt

    - name: Update backup URL file
      run: |
        if [ -n "$ARTIFACT_URL" ]; then
          echo "$ARTIFACT_URL" > backup_url.txt
        elif [ -n "$MEGA_URL" ]; then
          echo "$MEGA_URL" > backup_url.txt
        else
          echo "No backup available" > backup_url.txt
        fi

    - name: Upload backup URL to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "backup_url.txt"
        target: "/tmp/previous_backup.txt"

    - name: Cleanup
      run: |
        rm -f backup_final.tar.gz backup_url.txt artifact_url.txt mega_url.txt

    - name: Notify completion
      if: always()
      uses: techulus/push-github-action@v1.0.14
      with:
        api_key: ${{ secrets.PUSH_API_KEY }}
        title: VPS Session Completed
        body: Session completed with status ${{ job.status }}. Backup: ${{ env.ARTIFACT_URL || env.MEGA_URL || 'None' }}
