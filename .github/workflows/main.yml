name: Persistent VPS Session

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual trigger

env:
  BACKUP_NAME: vps-backup-${{ github.run_number }}
  SESSION_DURATION: 21600  # 6 hours in seconds
  BACKUP_START_TIME: 19800  # 5.5 hours in seconds

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          echo "SESSION_START=$(date +%s)" >> $GITHUB_ENV
          echo "BACKUP_TRIGGERED=false" >> $GITHUB_ENV
          
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget tar gzip rclone expect jq
          
      - name: Try to restore from GitHub Artifacts
        id: restore-artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: vps-backup-latest
          path: /tmp/restore
          
      - name: Setup rclone for MEGA (fallback)
        if: steps.restore-artifact.outcome == 'failure'
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ secrets.MEGA_RCLONE }}" > ~/.config/rclone/rclone.conf
          
      - name: Try to restore from MEGA
        if: steps.restore-artifact.outcome == 'failure'
        id: restore-mega
        continue-on-error: true
        run: |
          rclone copy mega:vps-backups/latest.tar.gz /tmp/restore/
          
      - name: Extract backup if found
        id: extract-backup
        run: |
          if [ -f "/tmp/restore/latest.tar.gz" ] || [ -f "/tmp/restore/backup.tar.gz" ]; then
            echo "RESTORE_SUCCESS=true" >> $GITHUB_ENV
            cd /tmp/restore
            tar -xzf *.tar.gz
          else
            echo "RESTORE_SUCCESS=false" >> $GITHUB_ENV
            echo "No backup found, starting fresh session"
          fi
          
      - name: Create user and set hostname
        run: |
          # Create user Jacky with sudo privileges
          sudo useradd -m -s /bin/bash -G sudo jacky || true
          echo "jacky:spidey" | sudo chpasswd
          echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          
          # Set hostname
          sudo hostnamectl set-hostname Spidey || sudo hostname Spidey
          echo "127.0.0.1 Spidey" | sudo tee -a /etc/hosts
          
      - name: Install and configure Tailscale
        run: |
          # Install Tailscale
          curl -fsSL https://tailscale.com/install.sh | sh
          
          # Restore Tailscale state if available
          if [ "$RESTORE_SUCCESS" = "true" ] && [ -d "/tmp/restore/tailscale" ]; then
            sudo cp -r /tmp/restore/tailscale/* /var/lib/tailscale/ || true
          fi
          
          # Start Tailscale with auth key
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=Spidey
          
      - name: Install MariaDB
        run: |
          sudo apt-get install -y mariadb-server mariadb-client
          
          # Start MariaDB
          sudo systemctl start mariadb
          
          # Restore database if available
          if [ "$RESTORE_SUCCESS" = "true" ] && [ -f "/tmp/restore/mariadb/backup.sql" ]; then
            sudo mysql < /tmp/restore/mariadb/backup.sql
          else
            # Set root password and create test database
            sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';"
            sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS test;"
            sudo mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "FLUSH PRIVILEGES;"
          fi
          
      - name: Install aapanel
        run: |
          # Create expect script for automated installation
          cat > install_aapanel.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          spawn wget -O install.sh https://www.aapanel.com/script/install_7.0_en.sh && sudo bash install.sh
          expect {
            "Do you want to install aaPanel to the" {
              send "y\r"
              exp_continue
            }
            "Do you want to force the installation" {
              send "yes\r"
              exp_continue
            }
            eof
          }
          EOF
          
          chmod +x install_aapanel.exp
          ./install_aapanel.exp
          
          # Set panel credentials
          sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py username jacky
          sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py password spidey
          
      - name: Restore additional data
        if: env.RESTORE_SUCCESS == 'true'
        run: |
          # Restore user data
          if [ -d "/tmp/restore/userdata" ]; then
            sudo cp -r /tmp/restore/userdata/* /home/jacky/ || true
            sudo chown -R jacky:jacky /home/jacky/
          fi
          
          # Restore aapanel data
          if [ -d "/tmp/restore/aapanel" ]; then
            sudo cp -r /tmp/restore/aapanel/* /www/ || true
          fi
          
          # Restore installed apps list and reinstall
          if [ -f "/tmp/restore/installed_apps.txt" ]; then
            while IFS= read -r app; do
              sudo apt-get install -y "$app" || true
            done < /tmp/restore/installed_apps.txt
          fi
          
          # Start all services
          sudo systemctl start mariadb || true
          sudo systemctl start bt || true
          
      - name: Create backup script
        run: |
          cat > /tmp/backup.sh << 'EOF'
          #!/bin/bash
          BACKUP_DIR="/tmp/backup_$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Backup Tailscale state
          sudo mkdir -p "$BACKUP_DIR/tailscale"
          sudo cp -r /var/lib/tailscale/* "$BACKUP_DIR/tailscale/" 2>/dev/null || true
          
          # Backup MariaDB
          sudo mkdir -p "$BACKUP_DIR/mariadb"
          sudo mysqldump -u root -p${{ secrets.DB_ROOT_PASSWORD }} --all-databases > "$BACKUP_DIR/mariadb/backup.sql" 2>/dev/null || true
          
          # Backup user data
          sudo mkdir -p "$BACKUP_DIR/userdata"
          sudo cp -r /home/jacky/* "$BACKUP_DIR/userdata/" 2>/dev/null || true
          
          # Backup aapanel
          sudo mkdir -p "$BACKUP_DIR/aapanel"
          sudo cp -r /www/server/panel/data "$BACKUP_DIR/aapanel/" 2>/dev/null || true
          sudo cp -r /www/wwwroot "$BACKUP_DIR/aapanel/" 2>/dev/null || true
          
          # Save installed packages
          dpkg --get-selections | grep -v deinstall | awk '{print $1}' > "$BACKUP_DIR/installed_apps.txt"
          
          # Create tarball
          cd /tmp
          tar -czf backup.tar.gz -C "$BACKUP_DIR" .
          
          echo "$BACKUP_DIR"
          EOF
          
          chmod +x /tmp/backup.sh
          
      - name: Main session loop
        run: |
          # Create stop handler
          cat > /tmp/check_stop.sh << 'EOF'
          #!/bin/bash
          while true; do
            if [ -f /tmp/stop ]; then
              echo "Stop signal detected, initiating backup..."
              /tmp/backup.sh
              touch /tmp/stop_confirmed
              exit 0
            fi
            
            # Check if it's time for scheduled backup
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - $SESSION_START))
            
            if [ "$ELAPSED" -ge "$BACKUP_START_TIME" ] && [ "$BACKUP_TRIGGERED" != "true" ]; then
              echo "Scheduled backup time reached..."
              export BACKUP_TRIGGERED=true
              /tmp/backup.sh
            fi
            
            sleep 10
          done
          EOF
          
          chmod +x /tmp/check_stop.sh
          
          # Run stop checker in background
          /tmp/check_stop.sh &
          CHECKER_PID=$!
          
          # Keep session alive
          START_TIME=$(date +%s)
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ "$ELAPSED" -ge "$SESSION_DURATION" ] || [ -f /tmp/stop_confirmed ]; then
              echo "Session time limit reached or stop signal confirmed"
              break
            fi
            
            # Display session info every minute
            if [ $((ELAPSED % 60)) -eq 0 ]; then
              echo "Session active for $((ELAPSED / 60)) minutes..."
              echo "Tailscale IP: $(tailscale ip -4 2>/dev/null || echo 'Not available')"
            fi
            
            sleep 10
          done
          
          # Kill checker process
          kill $CHECKER_PID 2>/dev/null || true
          
      - name: Final backup
        if: always()
        run: |
          echo "Creating final backup..."
          BACKUP_OUTPUT=$(/tmp/backup.sh)
          echo "BACKUP_PATH=/tmp/backup.tar.gz" >> $GITHUB_ENV
          
      - name: Upload backup to GitHub Artifacts
        if: always()
        id: upload-artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup-latest
          path: /tmp/backup.tar.gz
          retention-days: 7
          
      - name: Upload backup to MEGA (fallback)
        if: always() && steps.upload-artifact.outcome == 'failure'
        run: |
          rclone copy /tmp/backup.tar.gz mega:vps-backups/latest.tar.gz
          
      - name: Cleanup
        if: always()
        run: |
          # Stop services gracefully
          sudo systemctl stop mariadb || true
          sudo systemctl stop bt || true
          sudo tailscale down || true
          
          # Clean sensitive data
          rm -f /tmp/backup.sh /tmp/check_stop.sh /tmp/install_aapanel.exp
          
      - name: Schedule next run
        if: always()
        run: |
          echo "Session completed. Next session will start automatically in 6 hours."
          echo "Total session duration: $(($(date +%s) - $SESSION_START)) seconds"
