# Persistent VPS Session Manager with Automated Backup & Restoration
name: Persistent VPS Session Manager

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_restore:
        description: 'Force restore from backup (true/false)'
        required: false
        default: 'false'
      backup_source:
        description: 'Backup source preference (artifacts/mega/auto)'
        required: false
        default: 'auto'

env:
  SESSION_DURATION: 330  # 5.5 hours in minutes (5:30 runtime + 30 min backup)
  BACKUP_DURATION: 30    # 30 minutes for backup operations
  HOSTNAME: 'Spidey'
  USERNAME: 'Jacky'
  PASSWORD: 'spidey'
  
jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours total timeout
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Environment
      run: |
        echo "SESSION_START=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
        echo "BACKUP_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
        echo "SESSION_ID=session_$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
        
        # Create necessary directories
        sudo mkdir -p /opt/vps-manager/{backups,logs,temp}
        sudo chown -R $USER:$USER /opt/vps-manager
        
        # Install required packages
        sudo apt-get update -qq
        sudo apt-get install -y curl wget jq tar gzip megatools expect

    - name: 📦 Download Previous Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: vps-backup-*
        path: /opt/vps-manager/artifacts/
        merge-multiple: true
      continue-on-error: true

    - name: 🔄 Initialize MEGA Client
      run: |
        # Setup MEGA configuration
        echo "machine mega.nz login ${{ secrets.MEGA_EMAIL }} password ${{ secrets.MEGA_PASSWORD }}" > ~/.netrc
        chmod 600 ~/.netrc
        
        # Test MEGA connection
        if megals / &>/dev/null; then
          echo "✅ MEGA connection successful"
          echo "MEGA_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "❌ MEGA connection failed"
          echo "MEGA_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: 🔍 Check for Existing Backups
      id: backup_check
      run: |
        # Check GitHub artifacts
        if find /opt/vps-manager/artifacts -name "*.tar.gz" -type f | head -1 | grep -q .; then
          LATEST_ARTIFACT=$(find /opt/vps-manager/artifacts -name "*.tar.gz" -type f -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
          echo "LATEST_ARTIFACT_BACKUP=$LATEST_ARTIFACT" >> $GITHUB_ENV
          echo "ARTIFACT_BACKUP_AVAILABLE=true" >> $GITHUB_ENV
          echo "✅ Found artifact backup: $(basename $LATEST_ARTIFACT)"
        else
          echo "ARTIFACT_BACKUP_AVAILABLE=false" >> $GITHUB_ENV
          echo "ℹ️ No artifact backups found"
        fi
        
        # Check MEGA backups
        if [ "$MEGA_AVAILABLE" = "true" ]; then
          if megals /vps-backups/ 2>/dev/null | grep -q "\.tar\.gz"; then
            LATEST_MEGA=$(megals /vps-backups/ | grep "\.tar\.gz" | sort -r | head -1 | awk '{print $NF}')
            echo "LATEST_MEGA_BACKUP=$LATEST_MEGA" >> $GITHUB_ENV
            echo "MEGA_BACKUP_AVAILABLE=true" >> $GITHUB_ENV
            echo "✅ Found MEGA backup: $LATEST_MEGA"
          else
            echo "MEGA_BACKUP_AVAILABLE=false" >> $GITHUB_ENV
            echo "ℹ️ No MEGA backups found"
          fi
        fi

    - name: 📥 Restore System State
      if: env.ARTIFACT_BACKUP_AVAILABLE == 'true' || env.MEGA_BACKUP_AVAILABLE == 'true'
      run: |
        echo "🔄 Starting system restoration..."
        
        # Determine backup source
        RESTORE_SOURCE=""
        if [ "${{ github.event.inputs.backup_source }}" = "artifacts" ] && [ "$ARTIFACT_BACKUP_AVAILABLE" = "true" ]; then
          RESTORE_SOURCE="artifact"
        elif [ "${{ github.event.inputs.backup_source }}" = "mega" ] && [ "$MEGA_BACKUP_AVAILABLE" = "true" ]; then
          RESTORE_SOURCE="mega"
        elif [ "$ARTIFACT_BACKUP_AVAILABLE" = "true" ]; then
          RESTORE_SOURCE="artifact"
        elif [ "$MEGA_BACKUP_AVAILABLE" = "true" ]; then
          RESTORE_SOURCE="mega"
        fi
        
        if [ -n "$RESTORE_SOURCE" ]; then
          echo "📦 Restoring from $RESTORE_SOURCE backup..."
          
          if [ "$RESTORE_SOURCE" = "artifact" ]; then
            cp "$LATEST_ARTIFACT_BACKUP" /opt/vps-manager/temp/restore.tar.gz
          else
            megaget "/vps-backups/$LATEST_MEGA_BACKUP" /opt/vps-manager/temp/restore.tar.gz
          fi
          
          # Extract and restore
          cd /opt/vps-manager/temp
          tar -tf restore.tar.gz | head -20  # List contents for verification
          
          # Restore system files
          sudo tar -xzf restore.tar.gz -C /
          
          # Fix permissions
          sudo chown -R Jacky:Jacky /home/Jacky/ 2>/dev/null || true
          sudo chown -R www-data:www-data /www/ 2>/dev/null || true
          
          echo "✅ System state restored successfully"
          echo "SYSTEM_RESTORED=true" >> $GITHUB_ENV
        else
          echo "❌ No backup source available for restoration"
          echo "SYSTEM_RESTORED=false" >> $GITHUB_ENV
        fi

    - name: 👤 Create User and Configure System
      run: |
        echo "🔧 Configuring system..."
        
        # Set hostname
        sudo hostnamectl set-hostname "$HOSTNAME"
        echo "127.0.1.1 $HOSTNAME" | sudo tee -a /etc/hosts
        
        # Create user if not exists
        if ! id "$USERNAME" &>/dev/null; then
          # Create user with password
          echo "Creating user $USERNAME..."
          sudo useradd -m -s /bin/bash "$USERNAME"
          echo "$USERNAME:$PASSWORD" | sudo chpasswd
          
          # Add to sudo group
          sudo usermod -aG sudo "$USERNAME"
          
          # Configure sudo without password for automation
          echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" | sudo tee "/etc/sudoers.d/$USERNAME"
        fi
        
        echo "✅ User and system configuration complete"

    - name: 📦 Install Tailscale
      run: |
        echo "🔧 Installing Tailscale..."
        
        # Install Tailscale
        curl -fsSL https://tailscale.com/install.sh | sh
        
        # Restore Tailscale state if available
        if [ -d "/etc/tailscale" ] && [ -f "/etc/tailscale/tailscaled.state" ]; then
          echo "🔄 Tailscale state found, restarting service..."
          sudo systemctl enable tailscaled
          sudo systemctl start tailscaled
          sleep 5
          
          # Check if already authenticated
          if sudo tailscale status &>/dev/null; then
            echo "✅ Tailscale restored with existing state"
            sudo tailscale status
          else
            echo "⚠️ Tailscale state corrupted, manual authentication may be required"
          fi
        else
          echo "ℹ️ No previous Tailscale state found"
          echo "⚠️ Tailscale requires manual authentication: sudo tailscale up"
        fi

    - name: 🌐 Install AAPanel
      run: |
        echo "🔧 Installing AAPanel..."
        
        # Check if AAPanel is already installed
        if [ -d "/usr/local/aapanel" ] && [ -f "/usr/local/aapanel/data/default.pl" ]; then
          echo "✅ AAPanel already installed, starting services..."
          sudo systemctl enable aapanel
          sudo systemctl start aapanel
        else
          echo "📦 Installing fresh AAPanel..."
          
          # Download and install AAPanel
          wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh
          
          # Install with automatic yes responses
          expect << 'EOF'
          spawn bash install.sh aapanel
          expect {
        "*y/n*" { send "y\r"; exp_continue }
        "*Y/N*" { send "Y\r"; exp_continue }
        "*yes/no*" { send "yes\r"; exp_continue }
        "*continue*" { send "\r"; exp_continue }
        eof
        }
        EOF
        fi
        
        # Wait for AAPanel to start
        sleep 30
        
        # Set AAPanel credentials
        if [ -f "/usr/local/aapanel/pyenv/bin/python" ]; then
          sudo /usr/local/aapanel/pyenv/bin/python /usr/local/aapanel/panel.py panel $PASSWORD
          sudo /usr/local/aapanel/pyenv/bin/python /usr/local/aapanel/panel.py username $USERNAME
          echo "✅ AAPanel credentials set"
        fi

    - name: 📦 Restore Installed Packages
      if: env.SYSTEM_RESTORED == 'true'
      run: |
        if [ -f "/opt/vps-manager/temp/packages.list" ]; then
          echo "📦 Restoring installed packages..."
          while read package; do
            if [ -n "$package" ]; then
              sudo apt-get install -y "$package" || echo "⚠️ Failed to install $package"
            fi
          done < /opt/vps-manager/temp/packages.list
          echo "✅ Package restoration complete"
        fi

    - name: 🏃 Start Session Monitor
      run: |
        echo "🚀 Starting VPS session..."
        
        # Create session monitor script
        cat > /opt/vps-manager/session_monitor.sh << 'EOF'
        #!/bin/bash

        SESSION_START=$(date +%s)
        SESSION_DURATION_SECONDS=$((SESSION_DURATION * 60))
        BACKUP_START_TIME=$((SESSION_DURATION_SECONDS - BACKUP_DURATION * 60))

        echo "Session started at $(date)"
        echo "Session will run for $SESSION_DURATION minutes"
        echo "Backup will start at $(date -d "@$((SESSION_START + BACKUP_START_TIME))")"

        # Monitor for stop signal
        while true; do
        CURRENT_TIME=$(date +%s)
        ELAPSED=$((CURRENT_TIME - SESSION_START))
  
        # Check for manual stop signal
         if [ -f "/tmp/stop" ]; then
         echo "Manual stop signal detected"
         break
         fi
  
         # Check if it's time to start backup
         if [ $ELAPSED -ge $BACKUP_START_TIME ]; then
         echo "Backup time reached, starting backup process"
         break
         fi
  
         sleep 60
         done

         echo "Session monitor ending at $(date)"
         EOF

        chmod +x /opt/vps-manager/session_monitor.sh
        
        # Start services
        sudo systemctl start tailscaled || true
        sudo systemctl start aapanel || true
        
        # Display system information
        echo "🖥️ System Information:"
        echo "Hostname: $(hostname)"
        echo "User: $USERNAME created: $(id $USERNAME 2>/dev/null && echo 'Yes' || echo 'No')"
        echo "Tailscale status:"
        sudo tailscale status || echo "Not connected"
        echo "AAPanel status:"
        sudo systemctl is-active aapanel || echo "Not running"
        
        # Log session start
        echo "$(date): Session $SESSION_ID started" >> /opt/vps-manager/logs/session.log

    - name: ⏱️ Run Session
      timeout-minutes: 330  # 5.5 hours
      run: |
        echo "🏃‍♂️ Running VPS session for $SESSION_DURATION minutes..."
        
        # Execute session monitor
        /opt/vps-manager/session_monitor.sh
        
        echo "⏰ Session runtime completed"

    - name: 💾 Create Backup
      if: always()
      run: |
        echo "💾 Starting backup process..."
        
        # Create backup directory
        BACKUP_DIR="/opt/vps-manager/backups/$BACKUP_TIMESTAMP"
        mkdir -p "$BACKUP_DIR"
        
        # Create backup script
        cat > /opt/vps-manager/create_backup.sh << 'EOF'
        #!/bin/bash
        set -e

        BACKUP_DIR="$1"
        echo "Creating backup in: $BACKUP_DIR"

        # Create directory structure
        mkdir -p "$BACKUP_DIR"/{home,etc,www,usr,system}
 
        # Backup user data
        if [ -d "/home/Jacky" ]; then
        echo "Backing up user data..."
        sudo cp -r /home/Jacky "$BACKUP_DIR/home/" || true
        fi

        # Backup Tailscale configuration
        if [ -d "/etc/tailscale" ]; then
        echo "Backing up Tailscale configuration..."
        sudo cp -r /etc/tailscale "$BACKUP_DIR/etc/" || true
        fi

        # Backup web directory
        if [ -d "/www" ]; then
        echo "Backing up web directory..."
        sudo cp -r /www "$BACKUP_DIR/" || true
        fi

        # Backup AAPanel configuration
        if [ -d "/usr/local/aapanel" ]; then
        echo "Backing up AAPanel configuration..."
        sudo cp -r /usr/local/aapanel "$BACKUP_DIR/usr/" || true
        fi

        # Backup systemd configurations
        if [ -d "/etc/systemd/system" ]; then
        echo "Backing up systemd configurations..."
        sudo find /etc/systemd/system -name "*tailscale*" -o -name "*aapanel*" | while read file; do
        if [ -f "$file" ]; then
        sudo cp "$file" "$BACKUP_DIR/system/" || true
        fi
        done
        fi

        # Create installed packages list
        echo "Creating packages list..."
        dpkg --get-selections | grep -v deinstall | awk '{print $1}' > "$BACKUP_DIR/packages.list"

        # Create backup metadata
        cat > "$BACKUP_DIR/backup_info.txt" << METADATA
        Backup created: $(date -u)
        Hostname: $(hostname)
        Session ID: $SESSION_ID
        Ubuntu version: $(lsb_release -d | cut -f2)
        Kernel: $(uname -r)
        Tailscale status: $(sudo tailscale status --json 2>/dev/null | jq -r .Self.HostName || echo "Not available")
        METADATA

        echo "Backup directory prepared"
        EOF

        chmod +x /opt/vps-manager/create_backup.sh
        
        # Create backup
        /opt/vps-manager/create_backup.sh "$BACKUP_DIR"
        
        # Create compressed archive
        cd /opt/vps-manager/backups
        sudo tar -czf "vps_backup_$BACKUP_TIMESTAMP.tar.gz" "$BACKUP_TIMESTAMP"
        
        # Set permissions
        sudo chown $USER:$USER "vps_backup_$BACKUP_TIMESTAMP.tar.gz"
        
        echo "BACKUP_FILE=/opt/vps-manager/backups/vps_backup_$BACKUP_TIMESTAMP.tar.gz" >> $GITHUB_ENV
        echo "✅ Backup created: vps_backup_$BACKUP_TIMESTAMP.tar.gz"
        
        # Display backup size
        ls -lh "/opt/vps-manager/backups/vps_backup_$BACKUP_TIMESTAMP.tar.gz"

    - name: ☁️ Upload to MEGA
      if: always() && env.MEGA_AVAILABLE == 'true'
      run: |
        echo "☁️ Uploading backup to MEGA..."
        
        # Ensure MEGA directory exists
        megamkdir /vps-backups 2>/dev/null || true
        
        # Upload backup
        if megaput "$BACKUP_FILE" /vps-backups/; then
          echo "✅ Backup uploaded to MEGA successfully"
          
          # Create direct download link
          MEGA_LINK=$(megaexport "/vps-backups/$(basename $BACKUP_FILE)" | grep "https://mega.nz" | head -1)
          if [ -n "$MEGA_LINK" ]; then
            echo "$MEGA_LINK" > "/opt/vps-manager/mega_link_$BACKUP_TIMESTAMP.txt"
            echo "📎 MEGA direct link: $MEGA_LINK"
            echo "MEGA_LINK=$MEGA_LINK" >> $GITHUB_ENV
          fi
          
          # Cleanup old MEGA backups (keep last 5)
          echo "🧹 Cleaning up old MEGA backups..."
          megals /vps-backups/ | grep "vps_backup_" | sort -r | tail -n +6 | while read file; do
            echo "Deleting old backup: $file"
            megarm "/vps-backups/$file" || true
          done
          
        else
          echo "❌ Failed to upload to MEGA"
        fi

    - name: 📦 Upload Backup Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vps-backup-${{ env.BACKUP_TIMESTAMP }}
        path: |
          ${{ env.BACKUP_FILE }}
          /opt/vps-manager/mega_link_${{ env.BACKUP_TIMESTAMP }}.txt
        retention-days: 30
        compression-level: 6

    - name: 🧹 Cleanup and Maintenance
      if: always()
      run: |
        echo "🧹 Performing cleanup..."
        
        # Log session completion
        echo "$(date): Session $SESSION_ID completed" >> /opt/vps-manager/logs/session.log
        
        # Cleanup temporary files
        sudo rm -rf /opt/vps-manager/temp/* || true
        
        # Cleanup old local backups (keep last 3)
        find /opt/vps-manager/backups -name "vps_backup_*.tar.gz" -type f | sort -r | tail -n +4 | while read file; do
          echo "Removing old backup: $(basename $file)"
          rm -f "$file" || true
        done
        
        # Display final status
        echo "📊 Final Session Status:"
        echo "Session ID: $SESSION_ID"
        echo "Duration: $(echo "scale=2; $(date +%s) - $(date -d "$SESSION_START" +%s)" | bc || echo "N/A") seconds"
        echo "Backup created: $(test -f "$BACKUP_FILE" && echo "Yes" || echo "No")"
        echo "MEGA upload: $(test -n "$MEGA_LINK" && echo "Yes" || echo "No")"
        echo "System hostname: $(hostname)"
        echo "Active services:"
        sudo systemctl is-active tailscaled aapanel || true

    - name: 🔔 Session Summary
      if: always()
      run: |
        # Create session summary
        cat > /tmp/session_summary.md << EOF
# VPS Session Summary - $SESSION_ID

## Session Details
- **Start Time**: $SESSION_START
- **Duration**: $SESSION_DURATION minutes
- **Hostname**: $HOSTNAME
- **Username**: $USERNAME

## Backup Information
- **Backup File**: $(basename $BACKUP_FILE)
- **Backup Size**: $(test -f "$BACKUP_FILE" && ls -lh "$BACKUP_FILE" | awk '{print $5}' || echo "N/A")
- **MEGA Upload**: $(test -n "$MEGA_LINK" && echo "✅ Success" || echo "❌ Failed")
- **Artifacts Upload**: ✅ Success

## System Status
- **Tailscale**: $(sudo systemctl is-active tailscaled 2>/dev/null || echo "inactive")
- **AAPanel**: $(sudo systemctl is-active aapanel 2>/dev/null || echo "inactive")
- **System Restored**: $SYSTEM_RESTORED

## Next Session
- **Scheduled**: $(date -d "+6 hours" -u +"%Y-%m-%d %H:%M UTC")

---
*Generated at $(date -u)*
EOF

        echo "📋 Session Summary:"
        cat /tmp/session_summary.md

    - name: ⚠️ Graceful Shutdown
      if: always()
      run: |
        echo "🛑 Initiating graceful shutdown..."
        
        # Stop services gracefully
        sudo systemctl stop aapanel || true
        sudo systemctl stop tailscaled || true
        
        # Remove stop signal if exists
        rm -f /tmp/stop || true
        
        echo "✅ Graceful shutdown completed"
        echo "💤 Session ending - next session will start in 6 hours"
