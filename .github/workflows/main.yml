# GitHub Actions Persistent VPS Session Workflow
# Required secrets:
# - TAILSCALE_AUTHKEY: Tailscale authentication key
# - MEGA_RCLONE: Base64 encoded or raw rclone config for MEGA remote
# - DB_ROOT_PASSWORD: MariaDB root password

name: Persistent VPS Session

on:
  workflow_dispatch:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 400  # 6+ hours with overhead
    
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Prepare environment
      - name: Prepare environment
        run: |
          set -euo pipefail
          
          echo "=== Installing required packages ==="
          sudo apt-get update
          sudo apt-get install -y curl jq tar gzip expect mariadb-server tmate
          
          echo "=== Installing rclone ==="
          curl https://rclone.org/install.sh | sudo bash
          
          echo "=== Installing Tailscale ==="
          curl -fsSL https://tailscale.com/install.sh | sh
          
          echo "=== Setting up rclone config ==="
          mkdir -p ~/.config/rclone
          # Decode MEGA_RCLONE (handle both base64 and raw formats)
          if echo "${{ secrets.MEGA_RCLONE }}" | base64 -d > /dev/null 2>&1; then
            echo "${{ secrets.MEGA_RCLONE }}" | base64 -d > ~/.config/rclone/rclone.conf
          else
            echo "${{ secrets.MEGA_RCLONE }}" > ~/.config/rclone/rclone.conf
          fi
          
          echo "=== Environment prepared ==="

      # Step 3: Attempt restore from GitHub artifact
      - name: Attempt restore from artifact
        id: artifact_restore
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: ./restore-temp/

      - name: Process artifact restore
        id: process_artifact
        run: |
          set -euo pipefail
          
          if [ -f "./restore-temp/vps-backup.tar.gz" ]; then
            echo "=== Found GitHub artifact backup ==="
            cd ./restore-temp
            tar -tf vps-backup.tar.gz | head -10
            
            echo "=== Extracting artifact backup ==="
            sudo tar -xzf vps-backup.tar.gz -C /
            
            if [ -f "/tmp/backup-manifest.txt" ]; then
              echo "=== Backup manifest ==="
              cat /tmp/backup-manifest.txt
              
              echo "=== Running restore operations ==="
              sudo bash -c '
                # Restore Tailscale state if exists
                if [ -d "/tmp/tailscale-restore" ]; then
                  echo "Restoring Tailscale state..."
                  systemctl stop tailscaled || true
                  mkdir -p /var/lib/tailscale
                  cp -r /tmp/tailscale-restore/* /var/lib/tailscale/ 2>/dev/null || true
                  chown -R root:root /var/lib/tailscale
                  chmod -R 600 /var/lib/tailscale/*
                  systemctl start tailscaled
                  # Wait for tailscaled to start
                  sleep 5
                  # Try to bring up existing connection, fallback to new auth if needed
                  if ! tailscale up; then
                    echo "Existing Tailscale state failed, using authkey..."
                    tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
                  fi
                else
                  echo "No Tailscale state to restore, using authkey..."
                  systemctl start tailscaled
                  tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
                fi
                
                # Restore MariaDB data if exists
                if [ -d "/tmp/mysql-restore" ]; then
                  systemctl stop mysql || true
                  cp -r /tmp/mysql-restore/* /var/lib/mysql/ 2>/dev/null || true
                  chown -R mysql:mysql /var/lib/mysql
                  systemctl start mysql
                fi
              '
              
              echo "artifact_restored=true" >> $GITHUB_OUTPUT
            else
              echo "No manifest found, artifact may be corrupted"
              echo "artifact_restored=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No artifact backup found"
            echo "artifact_restored=false" >> $GITHUB_OUTPUT
          fi

      # Step 4: Attempt restore from MEGA if artifact failed
      - name: Attempt restore from MEGA
        if: steps.process_artifact.outputs.artifact_restored != 'true'
        id: mega_restore
        run: |
          set -euo pipefail
          
          echo "=== Attempting MEGA restore ==="
          if rclone lsd mega: > /dev/null 2>&1; then
            echo "MEGA remote accessible"
            
            # Find latest backup
            latest_backup=$(rclone ls mega:vps-backups/ | grep "vps-backup.*\.tar\.gz" | sort -k2 -r | head -1 | awk '{print $2}') || true
            
            if [ -n "$latest_backup" ]; then
              echo "=== Found MEGA backup: $latest_backup ==="
              mkdir -p ./mega-restore-temp
              rclone copy "mega:vps-backups/$latest_backup" ./mega-restore-temp/
              
              cd ./mega-restore-temp
              sudo tar -xzf "$latest_backup" -C /
              
              if [ -f "/tmp/backup-manifest.txt" ]; then
                echo "=== MEGA Backup manifest ==="
                cat /tmp/backup-manifest.txt
                
                echo "=== Running MEGA restore operations ==="
                sudo bash -c '
                  # Restore Tailscale state
                  if [ -d "/tmp/tailscale-restore" ]; then
                    echo "Restoring Tailscale state from MEGA..."
                    systemctl stop tailscaled || true
                    mkdir -p /var/lib/tailscale
                    cp -r /tmp/tailscale-restore/* /var/lib/tailscale/ 2>/dev/null || true
                    chown -R root:root /var/lib/tailscale
                    chmod -R 600 /var/lib/tailscale/*
                    systemctl start tailscaled
                    sleep 5
                    if ! tailscale up; then
                      echo "Existing Tailscale state failed, using authkey..."
                      tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
                    fi
                  else
                    echo "No Tailscale state to restore, using authkey..."
                    systemctl start tailscaled
                    tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
                  fi
                  
                  # Restore MariaDB data
                  if [ -d "/tmp/mysql-restore" ]; then
                    systemctl stop mysql || true
                    cp -r /tmp/mysql-restore/* /var/lib/mysql/ 2>/dev/null || true
                    chown -R mysql:mysql /var/lib/mysql
                    systemctl start mysql
                  fi
                '
                
                echo "mega_restored=true" >> $GITHUB_OUTPUT
              else
                echo "No MEGA manifest found"
                echo "mega_restored=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No MEGA backup found"
              echo "mega_restored=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "MEGA remote not accessible"
            echo "mega_restored=false" >> $GITHUB_OUTPUT
          fi

      # Step 5: Fresh provision if both restores failed
      - name: Fresh provision
        if: steps.process_artifact.outputs.artifact_restored != 'true' && steps.mega_restore.outputs.mega_restored != 'true'
        run: |
          set -euo pipefail
          
          echo "=== Starting fresh provision ==="
          
          # Create user jacky
          sudo useradd -m -s /bin/bash jacky || true
          echo "jacky:spidey" | sudo chpasswd
          sudo usermod -aG sudo jacky
          
          # Set hostname
          sudo hostnamectl set-hostname Spidey
          
          echo "=== Installing aaPanel ==="
          # Create expect script for aaPanel installation
          cat > /tmp/aapanel_install.exp << 'EOF'
          #!/usr/bin/expect -f
           set timeout 300
           spawn bash -c "wget -O install.sh http://www.aapanel.com/script/install_6.0_en.sh && bash install.sh aapanel"
           expect {
            "Do you want to install aaPanel to the" {
                send "y\r"
                exp_continue
            }
            "force install" {
                send "yes\r"
                exp_continue
            }
            timeout {
                puts "Installation timed out"
                exit 1
            }
            eof
            }
          EOF
          
          chmod +x /tmp/aapanel_install.exp
          sudo /tmp/aapanel_install.exp || echo "aaPanel installation completed with warnings"
          
          # Configure aaPanel credentials
          sleep 10
          sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py panel jacky || true
          sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py panel spidey || true
          
          echo "=== Configuring MariaDB ==="
          sudo systemctl start mysql
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';" || true
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "CREATE DATABASE IF NOT EXISTS test;" || true
          
          echo "=== Starting Tailscale ==="
          sudo systemctl start tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
          
          echo "=== Fresh provision completed ==="

      # Step 6: Start tmate session for debugging (optional)
      - name: Start tmate session
        run: |
          echo "=== Starting tmate session ==="
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' > /tmp/tmate_connection.txt
          tmate -S /tmp/tmate.sock display -p '#{tmate_web}' >> /tmp/tmate_connection.txt
          echo "=== tmate connection info ==="
          cat /tmp/tmate_connection.txt

      # Step 7: Service startup and health checks
      - name: Start and verify services
        run: |
          set -euo pipefail
          
          echo "=== Starting services ==="
          sudo systemctl daemon-reload
          
          # Start MariaDB
          sudo systemctl start mysql
          sudo systemctl enable mysql
          
          # Start aaPanel if installed
          if [ -f "/www/server/panel/BT-Panel" ]; then
            sudo systemctl start bt || true
            sudo systemctl enable bt || true
          fi
          
          # Start Tailscale
          echo "=== Starting Tailscale service ==="
          sudo systemctl start tailscaled
          sudo systemctl enable tailscaled
          
          # Check if we have existing Tailscale state, otherwise use authkey
          if [ -d "/var/lib/tailscale" ] && [ "$(ls -A /var/lib/tailscale 2>/dev/null)" ]; then
            echo "Found existing Tailscale state, attempting to restore connection..."
            if ! sudo tailscale up; then
              echo "Existing state failed, using authkey for new connection..."
              sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
            fi
          else
            echo "No existing Tailscale state, using authkey..."
            sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}"
          fi
          
          echo "=== Service health checks ==="
          sudo systemctl status mysql --no-pager || true
          sudo systemctl status tailscaled --no-pager || true
          sudo systemctl status bt --no-pager || true
          
          # Test MariaDB connection
          mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "SHOW DATABASES;" || echo "MariaDB connection test failed"
          
          echo "=== Services started ==="

      # Step 8: Main runtime loop with graceful shutdown detection
      - name: Runtime session with backup and graceful shutdown
        run: |
          set -euo pipefail
          
          echo "=== Starting main runtime session ==="
          
          # Runtime duration (5.5 hours to allow for backup time)
          end_time=$(($(date +%s) + 19800))  # 5.5 hours in seconds
          backup_interval=3600  # Backup every hour
          last_backup=0
          
          while [ $(date +%s) -lt $end_time ]; do
            current_time=$(date +%s)
            
            # Check for graceful shutdown signal
            if [ -f "/tmp/stop" ]; then
              echo "=== Graceful shutdown signal detected ==="
              break
            fi
            
            # Periodic backup (every hour)
            if [ $((current_time - last_backup)) -gt $backup_interval ]; then
              echo "=== Creating periodic backup ==="
              timestamp=$(date +%Y%m%d_%H%M%S)
              
              # Create backup directory structure
              sudo mkdir -p /tmp/backup-staging/{home,root,etc,var-www,opt,mysql-restore,tailscale-restore}
              
              # Backup important directories
              sudo cp -r /home/* /tmp/backup-staging/home/ 2>/dev/null || true
              sudo cp -r /root/* /tmp/backup-staging/root/ 2>/dev/null || true
              sudo cp -r /etc/{hostname,hosts,passwd,group,shadow,sudoers*,ssh} /tmp/backup-staging/etc/ 2>/dev/null || true
              sudo cp -r /var/www/* /tmp/backup-staging/var-www/ 2>/dev/null || true
              sudo cp -r /opt/* /tmp/backup-staging/opt/ 2>/dev/null || true
              sudo cp -r /var/lib/mysql/* /tmp/backup-staging/mysql-restore/ 2>/dev/null || true
              # Backup Tailscale state
          echo "=== Backing up Tailscale state ==="
          sudo mkdir -p /tmp/backup-staging/tailscale-restore
          if [ -d "/var/lib/tailscale" ] && [ "$(sudo ls -A /var/lib/tailscale 2>/dev/null)" ]; then
            sudo cp -r /var/lib/tailscale/* /tmp/backup-staging/tailscale-restore/ 2>/dev/null || true
            echo "Tailscale state backed up"
          else
            echo "No Tailscale state to backup"
          fi
              
              # Create manifest
              echo "Backup created: $timestamp" | sudo tee /tmp/backup-staging/backup-manifest.txt
              echo "Contents:" | sudo tee -a /tmp/backup-staging/backup-manifest.txt
              sudo find /tmp/backup-staging -type d | sudo tee -a /tmp/backup-staging/backup-manifest.txt
              
              # Create tar.gz backup
              cd /tmp/backup-staging
              sudo tar -czf "/tmp/vps-backup-${timestamp}.tar.gz" .
              
              # Move to consistent name for artifact
              sudo cp "/tmp/vps-backup-${timestamp}.tar.gz" /tmp/vps-backup.tar.gz
              
              last_backup=$current_time
              echo "=== Backup created: vps-backup-${timestamp}.tar.gz ==="
            fi
            
            # Short sleep to prevent busy waiting
            sleep 30
          done
          
          echo "=== Main runtime session completed ==="

      # Step 9: Final backup creation
      - name: Create final backup
        run: |
          set -euo pipefail
          
          echo "=== Creating final backup ==="
          timestamp=$(date +%Y%m%d_%H%M%S)
          
          # Create backup directory structure
          sudo mkdir -p /tmp/final-backup-staging/{home,root,etc,var-www,opt,mysql-restore,tailscale-restore}
          
          # Backup important directories
          sudo cp -r /home/* /tmp/final-backup-staging/home/ 2>/dev/null || true
          sudo cp -r /root/* /tmp/final-backup-staging/root/ 2>/dev/null || true
          sudo cp -r /etc/{hostname,hosts,passwd,group,shadow,sudoers*,ssh} /tmp/final-backup-staging/etc/ 2>/dev/null || true
          sudo cp -r /var/www/* /tmp/final-backup-staging/var-www/ 2>/dev/null || true
          sudo cp -r /opt/* /tmp/final-backup-staging/opt/ 2>/dev/null || true
          
          # Backup MariaDB data
          sudo systemctl stop mysql || true
          sudo cp -r /var/lib/mysql/* /tmp/final-backup-staging/mysql-restore/ 2>/dev/null || true
          sudo systemctl start mysql || true
          
          # Backup Tailscale state
          echo "=== Backing up Tailscale state for final backup ==="
          sudo mkdir -p /tmp/final-backup-staging/tailscale-restore  
          if [ -d "/var/lib/tailscale" ] && [ "$(sudo ls -A /var/lib/tailscale 2>/dev/null)" ]; then
            sudo cp -r /var/lib/tailscale/* /tmp/final-backup-staging/tailscale-restore/ 2>/dev/null || true
            echo "Tailscale state backed up to final backup"
          else
            echo "No Tailscale state to backup in final backup"
          fi
          
          # Create manifest
          echo "Final backup created: $timestamp" | sudo tee /tmp/final-backup-staging/backup-manifest.txt
          echo "Session hostname: $(hostname)" | sudo tee -a /tmp/final-backup-staging/backup-manifest.txt
          echo "Contents:" | sudo tee -a /tmp/final-backup-staging/backup-manifest.txt
          sudo find /tmp/final-backup-staging -type d | sudo tee -a /tmp/final-backup-staging/backup-manifest.txt
          
          # Create tar.gz backup
          cd /tmp/final-backup-staging
          sudo tar -czf "/tmp/vps-backup-final-${timestamp}.tar.gz" .
          
          # Copy to consistent name for artifact upload
          sudo cp "/tmp/vps-backup-final-${timestamp}.tar.gz" /tmp/vps-backup.tar.gz
          sudo chmod 644 /tmp/vps-backup.tar.gz
          
          echo "=== Final backup created ==="

      # Step 10: Upload backup as GitHub artifact
      - name: Upload backup as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: /tmp/vps-backup.tar.gz
          retention-days: 30

      # Step 11: Upload backup to MEGA
      - name: Upload backup to MEGA
        run: |
          set -euo pipefail
          
          echo "=== Uploading backup to MEGA ==="
          timestamp=$(date +%Y%m%d_%H%M%S)
          
          # Create MEGA backup directory if not exists
          rclone mkdir mega:vps-backups || true
          
          # Upload backup with timestamp
          if rclone copy /tmp/vps-backup.tar.gz mega:vps-backups/vps-backup-${timestamp}.tar.gz; then
            echo "=== Backup uploaded to MEGA successfully ==="
            
            # Try to create a public link (MEGA specific)
            echo "mega:vps-backups/vps-backup-${timestamp}.tar.gz" > /tmp/mega-backup-link.txt
            echo "Backup timestamp: $timestamp" >> /tmp/mega-backup-link.txt
            
            echo "=== MEGA backup link created ==="
          else
            echo "=== MEGA backup upload failed ==="
            echo "Failed to upload to MEGA" > /tmp/mega-backup-link.txt
          fi

      # Step 12: Upload MEGA link as artifact
      - name: Upload MEGA link as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mega-backup-link
          path: /tmp/mega-backup-link.txt
          retention-days: 30

      # Step 13: Cleanup and final status
      - name: Cleanup and final status
        run: |
          echo "=== VPS Session Summary ==="
          echo "Session completed at: $(date)"
          echo "Hostname: $(hostname)"
          echo "Uptime: $(uptime)"
          
          echo "=== Service Status ==="
          sudo systemctl status mysql --no-pager || true
          sudo systemctl status tailscaled --no-pager || true
          sudo systemctl status bt --no-pager || true
          
          echo "=== Tailscale Status ==="
          sudo tailscale status || true
          
          echo "=== Disk Usage ==="
          df -h
          
          echo "=== Cleanup temporary files ==="
          sudo rm -rf /tmp/backup-staging /tmp/final-backup-staging /tmp/vps-backup-*.tar.gz || true
          
          echo "=== VPS session completed successfully ==="
