name: Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:      # Manual trigger

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350  # 5 hours 50 minutes (GitHub max is 6 hours)
    
    steps:
      - name: '🕸️ Checkout Code'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Restore or Initial Setup Decision
      # ------------------------------------------------------------------

      - name: '🔧 Install Pre-Restore Tools (curl, rclone)'
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y curl tar gzip
          curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: '🛠️ Configure Rclone (MEGA)'
        run: |
          set -euo pipefail
          echo "🔐 Setting up rclone configuration..."
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "❌ RCLONE_CONFIG secret is missing or empty!"
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "✅ Rclone configuration created."
          
      - name: '♻️ Restore from Backup OR Initialize'
        id: restore
        run: |
          set -euo pipefail
          echo "📦 Checking for existing backup on MEGA..."
          
          if rclone ls "${MEGA_REMOTE}/${BACKUP_NAME}" >/dev/null 2>&1; then
            echo "✅ Backup found! Downloading and restoring..."
            mkdir -p /tmp/restore
            
            echo "📥 Downloading backup..."
            rclone copy "${MEGA_REMOTE}/${BACKUP_NAME}" /tmp/restore/ --progress --retries 3
            
            echo "📂 Restoring entire system state from backup..."
            # <-- FIX: This comprehensive restore brings back Aapanel, its software, and all configs.
            sudo tar -xzpf "/tmp/restore/${BACKUP_NAME}" -C /
            
            rm -f "/tmp/restore/${BACKUP_NAME}"
            echo "✅ Restore complete."
            echo "is_new_install=false" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No backup found. Preparing for a fresh installation..."
            echo "is_new_install=true" >> $GITHUB_OUTPUT
          fi

      # ------------------------------------------------------------------
      # Part 2: Fresh Installation (Only runs if no backup was found)
      # ------------------------------------------------------------------

      - name: '⚡ Install Base System Tools (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "🚀 Performing fresh installation of base tools..."
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            psmisc screen openssh-server mariadb-server mariadb-client \
            wget unzip htop nano vim git net-tools tmate
          echo "✅ Base tools installed."

      - name: '🗄️ Configure MariaDB (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "🗄️ Performing fresh configuration of MariaDB..."
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          
          echo "🔒 Securing MariaDB..."
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('root');"
          sudo mysql -u root -proot -e "DELETE FROM mysql.user WHERE User='';"
          sudo mysql -u root -proot -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
          sudo mysql -u root -proot -e "DROP DATABASE IF EXISTS test;"
          sudo mysql -u root -proot -e "FLUSH PRIVILEGES;"
          echo "✅ MariaDB secured."

      - name: '👤 Initial User Setup (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "🚀 Setting up user and hostname..."
          sudo useradd -m -s /bin/bash jacky || echo "User jacky already exists"
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts
          echo "✅ Basic system setup completed."

      - name: '📦 Install Aapanel (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "📥 Installing Aapanel control panel..."
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
          timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || echo "⚠️ Aapanel installation timed out or failed"
          
          if command -v bt >/dev/null 2>&1; then
            echo "✅ Aapanel installed. Setting default credentials for first run..."
            sleep 5
            echo "Jacky" | sudo bt 6
            echo "spidey" | sudo bt 5
          fi

      # ------------------------------------------------------------------
      # Part 3: Service Start & Session (Runs every time)
      # ------------------------------------------------------------------

      - name: '🚀 Start All Services'
        run: |
          set -euo pipefail
          echo "🔄 Configuring and starting all system services..."
          
          # <-- CRITICAL FIX: This reloads service definitions after restoring them from backup.
          echo "Reloading systemd manager configuration..."
          sudo systemctl daemon-reload
          
          # Enable and start services. On restore, this brings your Aapanel services back online.
          sudo systemctl enable ssh mariadb
          sudo systemctl start ssh
          sudo systemctl start mariadb
          
          # Start Aapanel and all services managed by it (Apache, PHP, etc.)
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Starting Aapanel and its services..."
            sudo bt start
            # The 'bt start' command also restarts services managed by Aapanel.
          fi
          
          echo "📊 Final Service Status Check:"
          for service in ssh mariadb; do
            if systemctl is-active --quiet $service; then
              echo "✅ $service (system): active"
            else
              echo "❌ $service (system): inactive"
            fi
          done
          # Aapanel services run under different names, but starting the panel is sufficient.

      - name: '🔗 Configure Remote Access'
        run: |
          set -euo pipefail
          echo "🕸️ Setting up Tailscale VPN..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "❌ TAILSCALE_AUTHKEY secret is missing!"
            exit 1
          fi
          
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes
          
          echo "💬 Starting tmate for SSH access..."
          tmate -S /tmp/tmate.sock new-session -d 'echo "VPS Ready!"; bash'
          tmate -S /tmp/tmate.sock wait tmate-ready
          
          echo "================================================"
          echo "🎉 VPS IS READY FOR CONNECTION! 🎉"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔑 tmate SSH: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Aapanel Panel Details:"
            sudo bt default || true
          fi
          echo "================================================"

      - name: '⏳ Maintain VPS Session'
        run: |
          echo "🖥️ VPS session is running. Auto-stop in ~5.5 hours for backup."
          sleep 19800 # 5.5 hours

      # ------------------------------------------------------------------
      # Part 4: Backup Creation (Runs at the end of every session)
      # ------------------------------------------------------------------
      - name: '📦 Create Full System Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "📦 Creating comprehensive system backup..."
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          echo "🛑 Stopping services for a clean backup..."
          if command -v bt >/dev/null 2>&1; then sudo bt stop; fi
          sudo systemctl stop ssh mariadb tailscaled
          sleep 5
          
          # <-- FIX: This comprehensive list ensures a perfect restore of Aapanel and its software.
          BACKUP_PATHS="
            /etc/
            /home/
            /lib/
            /opt/
            /root/
            /srv/
            /usr/
            /var/lib/dpkg/
            /var/lib/mysql/
            /var/lib/tailscale/
            /var/spool/cron/
            /var/www/
            /www/
          "
          
          echo "📁 Creating backup archive..."
          sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --warning=no-file-changed \
            --exclude='/proc' --exclude='/tmp' --exclude='/sys' \
            --exclude='/dev' --exclude='/run' --exclude='/mnt' \
            --exclude='/media' --exclude='/lost+found' \
            --exclude='*.log*' --exclude='*.pid' --exclude='*.sock' \
            $BACKUP_PATHS
          
          BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
          echo "✅ Backup created successfully. Size: $BACKUP_SIZE"

      - name: '☁️ Upload Backup to MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "🚀 Uploading backup to MEGA..."
          if [[ ! -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            echo "❌ No backup file found to upload."
            exit 1
          fi
          
          echo "🗑️ Removing old backup from MEGA to prevent conflicts..."
          rclone delete "${MEGA_REMOTE}/${BACKUP_NAME}" || echo "No old backup to remove."

          echo "📤 Uploading new backup..."
          rclone copy "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" "${{ env.MEGA_REMOTE }}" --progress
          
          echo "✅ Upload complete."
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: '📋 Final Status Report'
        if: always()
        run: |
          echo "============================================="
          echo "         🕷️ VPS SESSION COMPLETE 🕷️"
          echo "============================================="
          echo "Job Status: ${{ job.status }}"
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Session completed and backup was successful."
          else
            echo "❌ Session failed. A backup was still attempted."
          fi
          echo "============================================="

