# üï∑Ô∏è Spidey Persistent VPS - Production Ready

name: Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:      # Manual trigger

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350  # 5 hours 50 minutes (GitHub max is 6 hours)
    
    steps:
      - name: 'üï∏Ô∏è Checkout Code'
        uses: actions/checkout@v4

      - name: 'üë§ Initial Setup: User, Hostname & Services'
        run: |
          set -euo pipefail
          echo "üöÄ Setting up fresh VPS environment..."
          
          if ! id "jacky" &>/dev/null; then
            sudo useradd -m -s /bin/bash jacky
            echo "‚úÖ User 'jacky' created"
          fi
          
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts
          
          echo "‚úÖ Basic system setup completed."

      - name: '‚ö° Install System Tools & MariaDB'
        run: |
          set -euo pipefail
          echo "üöÄ Installing core system tools, MariaDB, rclone, and tmate..."
          
          sudo apt-get update -qq
          
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            psmisc screen openssh-server apache2 \
            php php-mysql php-cli php-curl php-zip php-gd php-mbstring php-xml \
            mariadb-server \
            curl wget unzip tar gzip htop nano vim git net-tools || {
              echo "‚ùå Package installation failed"
              exit 1
            }
          
          echo "üì• Installing tmate..."
          if ! command -v tmate &>/dev/null; then
            sudo apt-get install -y tmate || {
              wget -q -O /tmp/tmate.tar.xz https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz
              tar -xf /tmp/tmate.tar.xz -C /tmp/
              sudo cp /tmp/tmate-2.4.0-static-linux-amd64/tmate /usr/local/bin/
              sudo chmod +x /usr/local/bin/tmate
            }
          fi
          
          echo "üì• Installing rclone..."
          curl -fsSL https://rclone.org/install.sh | sudo bash || {
            echo "‚ùå Rclone installation failed"
            exit 1
          }
          
          echo "‚úÖ All tools installed successfully."

      - name: 'üõ†Ô∏è Configure MariaDB for Aapanel'
        run: |
          set -euo pipefail
          echo "üîß Unmasking and starting MariaDB service..."
          sudo systemctl unmask mariadb.service || echo "MariaDB service is already unmasked or does not exist."
          sudo systemctl start mariadb.service || {
            echo "‚ùå Failed to start MariaDB service."
            exit 1
          }
          echo "‚úÖ MariaDB service is running."
          
          echo "Creating Aapanel database user..."
          # MariaDB requires root user for management
          sudo mysql -u root -e "
            CREATE USER 'aapanel'@'localhost' IDENTIFIED BY 'aapanelpass';
            GRANT ALL PRIVILEGES ON *.* TO 'aapanel'@'localhost' WITH GRANT OPTION;
            FLUSH PRIVILEGES;
          " || {
            echo "‚ùå Failed to create Aapanel database user."
            exit 1
          }
          echo "‚úÖ Aapanel user for MariaDB created successfully."

      - name: 'üõ†Ô∏è Configure Rclone (MEGA) - Enhanced'
        run: |
          set -euo pipefail
          echo "üîê Setting up rclone configuration..."
          
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "‚ùå RCLONE_CONFIG secret is missing!"
            exit 1
          fi
          
          mkdir -p ~/.config/rclone
          
          cat > ~/.config/rclone/rclone.conf << 'EOF'
          ${{ secrets.RCLONE_CONFIG }}
          EOF
          
          chmod 600 ~/.config/rclone/rclone.conf
          
          if ! rclone config show >/dev/null 2>&1; then
            echo "‚ùå Invalid rclone configuration format"
            exit 1
          fi
          
          echo "‚úÖ Rclone configuration created successfully."

      - name: '‚úÖ Test Rclone Configuration - Robust'
        run: |
          set -euo pipefail
          echo "üîç Testing MEGA connection..."
          
          if rclone listremotes | grep -q "mega:"; then
            echo "‚úÖ MEGA remote found in configuration"
            for i in {1..3}; do
              echo "üîÑ Connection test attempt $i/3..."
              if timeout 60 rclone about ${{ env.MEGA_REMOTE }} >/dev/null 2>&1; then
                echo "‚úÖ MEGA connection successful!"
                break
              elif [[ $i -eq 3 ]]; then
                echo "‚ùå MEGA connection failed after 3 attempts"
                exit 1
              else
                echo "‚ö†Ô∏è Attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            done
          else
            echo "‚ùå MEGA remote not found in configuration"
            exit 1
          fi

      - name: 'üì¶ Install Aapanel'
        run: |
          set -euo pipefail
          echo "üì• Installing Aapanel control panel..."
          
          URL=https://www.aapanel.com/script/install_7.0_en.sh && if [ -f /usr/bin/curl ];then curl -ksSO "$URL" ;else wget --no-check-certificate -O install_7.0_en.sh "$URL";fi;bash install_7.0_en.sh aapanel || {
            echo "‚ùå Aapanel installation failed"
            exit 1
          }
          
          if command -v bt >/dev/null 2>&1; then
            echo "‚úÖ Aapanel installed successfully"
            sudo bt --version 2>/dev/null || true
          else
            echo "‚ö†Ô∏è Aapanel command 'bt' not found in PATH"
          fi
      
      - name: '‚ôªÔ∏è Restore MariaDB Data from Backup or Start Fresh'
        run: |
          set -euo pipefail
          echo "Checking for existing MariaDB backup..."
          
          if rclone ls "${MEGA_REMOTE}/${BACKUP_NAME}" >/dev/null 2>&1; then
            echo "‚úÖ Backup found! Downloading and restoring..."
            
            mkdir -p /tmp/restore
            if rclone copy "${MEGA_REMOTE}/${BACKUP_NAME}" /tmp/restore/ --progress --retries 3; then
              echo "‚úÖ Backup downloaded successfully"
            else
              echo "‚ùå Failed to download backup"
              exit 1
            fi
            
            echo "üõë Stopping services for data restoration..."
            sudo systemctl stop mariadb apache2 || true
            
            echo "üìÅ Restoring data from backup..."
            sudo tar -xzf "/tmp/restore/${BACKUP_NAME}" --absolute-names -C / || true
            
            echo "üîê Setting permissions for restored data..."
            sudo chown -R mysql:mysql /www/server/data
            sudo chmod -R 700 /www/server/data
            
            rm -f "/tmp/restore/${BACKUP_NAME}"
            echo "Ô∏è Cleaning old backup from MEGA..."
            rclone delete "${MEGA_REMOTE}/${BACKUP_NAME}" || true
          
          else
            echo "‚ÑπÔ∏è No backup found. Continuing with fresh installation and configuration."
          fi

      - name: 'üöÄ Finalize Configuration and Start Services'
        run: |
          set -euo pipefail
          
          echo "üóÑÔ∏è Restarting MariaDB and Apache services..."
          sudo systemctl restart mariadb apache2 || {
            echo "‚ùå Failed to start MariaDB/Apache services."
            exit 1
          }

          # Set Aapanel credentials
          echo "üîê Configuring Aapanel credentials..."
          sleep 5
          echo "Jacky" | sudo bt 6 2>/dev/null || echo "‚ö†Ô∏è Could not set Aapanel username"
          echo "spidey" | sudo bt 5 2>/dev/null || echo "‚ö†Ô∏è Could not set Aapanel password"
          
          echo "üìã Aapanel Information:"
          sudo bt default 2>/dev/null || echo "‚ö†Ô∏è Could not retrieve Aapanel info"

      - name: 'üîó Configure Remote Access and Display Info'
        run: |
          set -euo pipefail
          
          echo "üï∏Ô∏è Setting up Tailscale VPN..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "‚ùå TAILSCALE_AUTHKEY secret is missing!"
            exit 1
          fi
          
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable tailscaled
          sudo systemctl start tailscaled
          
          for i in {1..3}; do
            if sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes; then
              echo "‚úÖ Tailscale connected on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Tailscale connection attempt $i failed"
              if [[ $i -eq 3 ]]; then
                echo "‚ùå Tailscale setup failed"
                exit 1
              fi
              sleep 15
            fi
          done
          
          # Get Tailscale IP and grant MariaDB access
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "üåê Granting remote access to MariaDB for Tailscale IP: $TAILSCALE_IP"
          sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'${TAILSCALE_IP}' IDENTIFIED BY '' WITH GRANT OPTION; FLUSH PRIVILEGES;" || {
            echo "‚ùå Failed to grant remote MariaDB access to Tailscale IP."
          }
          echo "‚úÖ MariaDB remote access granted for ${TAILSCALE_IP}."

          # Start tmate session
          echo "üí¨ Starting tmate for SSH access..."
          tmate -S /tmp/tmate.sock new-session -d 'echo "VPS Ready - Welcome to GitHub VPS!"; bash'
          
          timeout 60 tmate -S /tmp/tmate.sock wait tmate-ready || {
            echo "‚ö†Ô∏è tmate session startup timeout"
          }
          
          echo "================================================"
          echo "üéâ VPS IS READY FOR CONNECTION! üéâ"
          echo "================================================"
          
          TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' 2>/dev/null || echo "Failed to get tmate info")
          TMATE_WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}' 2>/dev/null || echo "Not available")
          
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          echo "üîë SSH Access: $TMATE_SSH"
          echo "üåç Web Terminal: $TMATE_WEB"
          
          if command -v bt >/dev/null 2>&1; then
            echo "üéõÔ∏è Aapanel: http://$TAILSCALE_IP:7800 (Jacky/spidey)"
            echo "üóÑÔ∏è MariaDB: Remote access enabled for root user from your Tailscale network."
          fi
          
          echo "================================================"

      - name: '‚è≥ Maintain VPS Session'
        run: |
          set -euo pipefail
          echo "üñ•Ô∏è VPS session is running!"
          echo "üìù To stop gracefully: touch /tmp/stop_session"
          echo "‚è∞ Auto-stop in 5.5 hours for backup"
          
          for minute in {1..330}; do
            if [[ -f /tmp/stop_session ]]; then
              echo "üõë Stop signal detected at minute $minute"
              break
            fi
            
            if (( minute % 30 == 0 )); then
              echo "‚è∞ Runtime: $minute minutes"
              echo "üìä Services: $(systemctl is-active mariadb apache2 ssh tailscaled 2>/dev/null | tr '\n' ' ' || echo 'Not available')"
              if (( minute % 60 == 0 )); then
                echo "üîó Tailscale IP: $(sudo tailscale ip -4 2>/dev/null || echo 'N/A')"
              fi
            fi
            sleep 60
          done
          
          echo "üèÅ VPS session maintenance completed"

      - name: 'üì¶ Create System Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "üì¶ Creating comprehensive backup..."
          
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          echo "üõë Stopping services for clean backup..."
          sudo systemctl stop apache2 mariadb || true
          
          if command -v bt >/dev/null 2>&1; then
            sudo bt stop 2>/dev/null || true
          fi
          
          sleep 5
          
          echo "üìÅ Creating backup archive..."
          sudo tar -czf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --ignore-failed-read \
            --warning=no-file-ignored \
            --exclude='/proc/*' --exclude='/tmp/*' --exclude='/sys/*' \
            --exclude='/dev/*' --exclude='/run/*' --exclude='/mnt/*' \
            --exclude='/media/*' --exclude='/lost+found' \
            --exclude='*.log' --exclude='*.pid' \
            /etc/hostname /etc/hosts /etc/passwd /etc/group /etc/shadow \
            /etc/sudoers.d/ /etc/systemd/system/ /etc/ssh/ \
            /etc/apache2/ /etc/mysql/ /var/lib/tailscale/ \
            /www/server/data/ /www/server/panel/ \
            /var/www/ /opt/ /srv/ /root/ /home/jacky/ \
            /usr/local/bin/ \
            2>/dev/null || {
              echo "‚ö†Ô∏è Some files couldn't be backed up (normal)"
            }
          
          if [[ -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
            echo "‚úÖ Backup created: $BACKUP_SIZE"
            
            if tar -tzf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
              echo "‚úÖ Backup integrity verified"
            else
              echo "‚ùå Backup integrity check failed"
              exit 1
            fi
          else
            echo "‚ùå Backup creation failed"
            exit 1
          fi

      - name: '‚òÅÔ∏è Upload Backup to MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "üöÄ Uploading backup to MEGA..."
          
          if [[ ! -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            echo "‚ùå No backup file found to upload"
            exit 1
          fi
          
          for attempt in {1..5}; do
            echo "üì§ Upload attempt $attempt/5..."
            
            if rclone copy "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" "${{ env.MEGA_REMOTE }}" \
               --progress --transfers 1 --retries 3 --low-level-retries 3; then
              
              echo "‚úÖ Upload successful on attempt $attempt"
              
              if rclone ls "${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
                echo "‚úÖ Upload verified on MEGA"
                break
              else
                echo "‚ùå Upload verification failed"
              fi
            else
              echo "‚ùå Upload attempt $attempt failed"
              
              if [[ $attempt -eq 5 ]]; then
                echo "‚ùå All upload attempts exhausted"
                exit 1
              fi
              
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"
          echo "üóëÔ∏è Local backup cleaned up"

      - name: 'üìã Final Status Report'
        if: always()
        run: |
          echo "============================================="
          echo "         üï∑Ô∏è VPS SESSION COMPLETE üï∑Ô∏è"
          echo "============================================="
          echo "üìÖ Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üè∑Ô∏è Status: ${{ job.status }}"
          echo "üñ•Ô∏è Hostname: $(hostname)"
          echo "üåç Runner: $(whoami)@$(hostname)"
          
          case "${{ job.status }}" in
            "success")
              echo "‚úÖ Session completed successfully!"
              echo "üíæ Backup stored: ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}"
              ;;
            "failure")
              echo "‚ùå Session completed with errors"
              echo "üíæ Backup may be available at: ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}"
              ;;
            *)
              echo "‚èπÔ∏è Session was cancelled or timed out"
              echo "üíæ Backup status unknown"
              ;;
          esac
          
          echo ""
          echo "üìä Final System State:"
          echo "üíø Disk Usage: $(df -h / | tail -1 | awk '{print $3\"/\"$2\" (\"$5\")"}')"
          echo "üß† Memory: $(free -h | grep Mem | awk '{print $3\"/\"$2}')"
          echo "‚è±Ô∏è Uptime: $(uptime -p)"
          echo "üîß Services: $(systemctl is-active mariadb apache2 ssh tailscaled 2>/dev/null | tr '\n' ' ' || echo 'Not available')"
          
          echo "============================================="
          echo "Thank you for using Spidey VPS! üï∏Ô∏è"
          echo "============================================="
