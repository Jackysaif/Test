name: Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:      # Manual trigger

env:
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350  # 5 hours 50 minutes (GitHub max is 6 hours)
    
    steps:
      - name: 'üï∏Ô∏è Checkout Code'
        uses: actions/checkout@v4

      - name: '‚ö° Install Core System Tools'
        run: |
          set -euo pipefail
          echo "üöÄ Installing core system tools..."
          
          # Update package lists
          sudo apt-get update -qq
          
          # Install essential packages (excluding MariaDB for now)
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            psmisc screen openssh-server apache2 \
            php php-cli php-curl php-zip php-gd php-mbstring php-xml \
            curl wget unzip tar gzip htop nano vim git net-tools || {
              echo "‚ùå Package installation failed"
              exit 1
            }
          
          echo "‚úÖ Core tools installed successfully."

      - name: 'üóÑÔ∏è Install and Configure MariaDB'
        run: |
          set -euo pipefail
          echo "üóÑÔ∏è Installing MariaDB Server..."
          
          # Install MariaDB with specific version for stability
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            mariadb-server mariadb-client || {
              echo "‚ùå MariaDB installation failed"
              exit 1
            }
          
          # Start and enable MariaDB
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          
          # Check if MariaDB is running before attempting to connect
          if ! sudo systemctl is-active --quiet mariadb; then
            echo "‚ùå MariaDB service is not running after installation"
            exit 1
          fi

          # Secure MariaDB installation using the root account with sudo
          echo "üîí Securing MariaDB..."
          
          # First, change the authentication method for the 'root' user to use a password
          # This must be done via the socket, which requires sudo
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('root');"
          
          # Then, apply other security settings by connecting with the newly set password
          # Note: using `mysql -u` with a password now works
          sudo mysql -u root -proot -e "DELETE FROM mysql.user WHERE User='';"
          sudo mysql -u root -proot -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
          sudo mysql -u root -proot -e "DROP DATABASE IF EXISTS test;"
          sudo mysql -u root -proot -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
          sudo mysql -u root -proot -e "FLUSH PRIVILEGES;"
          
          # Create Aapanel database and user in advance
          echo "üì¶ Preparing database for Aapanel..."
          sudo mysql -u root -proot -e "CREATE DATABASE IF NOT EXISTS aapanel;"
          sudo mysql -u root -proot -e "CREATE USER IF NOT EXISTS 'aapanel'@'localhost' IDENTIFIED BY 'aapanel123';"
          sudo mysql -u root -proot -e "GRANT ALL PRIVILEGES ON aapanel.* TO 'aapanel'@'localhost';"
          sudo mysql -u root -proot -e "FLUSH PRIVILEGES;"
          
          # Optimize MariaDB settings for performance
          echo "‚ö° Optimizing MariaDB configuration..."
          sudo tee /etc/mysql/conf.d/optimization.cnf > /dev/null << 'EOF'
          [mysqld]
          max_connections = 200
          innodb_buffer_pool_size = 256M
          innodb_log_file_size = 64M
          query_cache_size = 16M
          query_cache_limit = 2M
          tmp_table_size = 32M
          max_heap_table_size = 32M
          EOF
          
          # Restart MariaDB to apply changes
          sudo systemctl restart mariadb
          
          # Verify MariaDB is running
          if systemctl is-active --quiet mariadb; then
            echo "‚úÖ MariaDB installed and configured successfully"
            mysql --version
          else
            echo "‚ùå MariaDB service is not running"
            exit 1
          fi

      - name: 'üîß Install tmate and rclone'
        run: |
          set -euo pipefail
          
          # Install tmate for remote access
          echo "üì• Installing tmate..."
          if ! command -v tmate &>/dev/null; then
            sudo apt-get install -y tmate || {
              # Fallback: manual installation
              wget -q -O /tmp/tmate.tar.xz https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz
              tar -xf /tmp/tmate.tar.xz -C /tmp/
              sudo cp /tmp/tmate-2.4.0-static-linux-amd64/tmate /usr/local/bin/
              sudo chmod +x /usr/local/bin/tmate
            }
          fi
          
          # Install rclone for backup management
          echo "üì• Installing rclone..."
          curl -fsSL https://rclone.org/install.sh | sudo bash || {
            echo "‚ùå Rclone installation failed"
            exit 1
          }
          
          # Install PHP MySQL extension (needed after MariaDB)
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y php-mysql
          
          # Verify installations
          echo "‚úÖ Verifying installations..."
          rclone version
          tmate -V
          php -v | head -1
          
          echo "‚úÖ Remote tools installed successfully."

      - name: 'üõ†Ô∏è Configure Rclone (MEGA) - Enhanced'
        run: |
          set -euo pipefail
          echo "üîê Setting up rclone configuration..."
          
          # Check if RCLONE_CONFIG secret exists and is not empty
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "‚ùå RCLONE_CONFIG secret is missing!"
            echo "‚ÑπÔ∏è  Please add your rclone.conf content to GitHub secrets."
            echo "‚ÑπÔ∏è  To generate: run 'rclone config' locally and copy ~/.config/rclone/rclone.conf"
            exit 1
          fi
          
          # Create rclone config directory
          mkdir -p ~/.config/rclone
          
          # Write config with proper formatting
          cat > ~/.config/rclone/rclone.conf << 'EOF'
          ${{ secrets.RCLONE_CONFIG }}
          EOF
          
          # Set proper permissions
          chmod 600 ~/.config/rclone/rclone.conf
          
          # Validate config format
          if ! rclone config show >/dev/null 2>&1; then
            echo "‚ùå Invalid rclone configuration format"
            echo "Available sections:"
            rclone config show 2>&1 || true
            exit 1
          fi
          
          echo "‚úÖ Rclone configuration created successfully."

      - name: '‚úÖ Test Rclone Configuration - Robust'
        run: |
          set -euo pipefail
          echo "üîç Testing MEGA connection..."
          
          # List available remotes
          echo "Available remotes:"
          rclone listremotes
          
          # Test connection with multiple methods
          if rclone listremotes | grep -q "mega:"; then
            echo "‚úÖ MEGA remote found in configuration"
            
            # Test with timeout and retries
            for i in {1..3}; do
              echo "üîÑ Connection test attempt $i/3..."
              if timeout 60 rclone about ${{ env.MEGA_REMOTE }} >/dev/null 2>&1; then
                echo "‚úÖ MEGA connection successful!"
                break
              elif [[ $i -eq 3 ]]; then
                echo "‚ùå MEGA connection failed after 3 attempts"
                echo "üîç Debugging information:"
                rclone about ${{ env.MEGA_REMOTE }} -vv
                exit 1
              else
                echo "‚ö†Ô∏è Attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            done
          else
            echo "‚ùå MEGA remote not found in configuration"
            echo "Available remotes:"
            rclone listremotes
            exit 1
          fi

      - name: '‚ôªÔ∏è Restore from Backup OR Initialize - Enhanced'
        id: restore
        run: |
          set -euo pipefail
          echo "üì¶ Checking for existing backup..."
          
          # Check if backup exists with proper error handling
          if timeout 90 rclone ls "${MEGA_REMOTE}/${BACKUP_NAME}" >/dev/null 2>&1; then
            echo "‚úÖ Backup found! Downloading and restoring..."
            
            # Create restore directory
            mkdir -p /tmp/restore
            
            # Download backup with progress
            echo "üì• Downloading backup..."
            if rclone copy "${MEGA_REMOTE}/${BACKUP_NAME}" /tmp/restore/ --progress --retries 3; then
              echo "‚úÖ Backup downloaded successfully"
            else
              echo "‚ùå Failed to download backup"
              exit 1
            fi
            
            # Verify backup integrity
            echo "üîç Verifying backup integrity..."
            if tar -tzf "/tmp/restore/${BACKUP_NAME}" >/dev/null 2>&1; then
              echo "‚úÖ Backup integrity verified"
            else
              echo "‚ùå Backup is corrupted"
              rm -f "/tmp/restore/${BACKUP_NAME}"
              exit 1
            fi
            
            # Extract backup
            echo "üìÇ Restoring system state..."
            sudo tar -xzf "/tmp/restore/${BACKUP_NAME}" --absolute-names -C / 2>/dev/null || {
              echo "‚ö†Ô∏è Some files failed to restore (normal for system files)"
            }
            
            # Cleanup
            rm -f "/tmp/restore/${BACKUP_NAME}"
            
            # Remove old backup from MEGA
            echo "üóëÔ∏è Cleaning old backup from MEGA..."
            rclone delete "${MEGA_REMOTE}/${BACKUP_NAME}" || true
            
            echo "is_new_install=false" >> $GITHUB_OUTPUT
            
            # Restore and start MariaDB first
            echo "üóÑÔ∏è Restoring MariaDB service..."
            sudo systemctl enable mariadb
            sudo systemctl start mariadb || {
              echo "‚ö†Ô∏è MariaDB failed to start, reinitializing..."
              sudo mysql_install_db --user=mysql --datadir=/var/lib/mysql || true
              sudo systemctl start mariadb
            }
            
            # Ensure MariaDB is properly configured
            if systemctl is-active --quiet mariadb; then
              echo "‚úÖ MariaDB is running"
              # Re-apply security settings
              sudo mysql -uroot -proot -e "FLUSH PRIVILEGES;" 2>/dev/null || true
            fi
            
            # Install Aapanel after MariaDB is ready
            echo "üì¶ Installing Aapanel control panel (will use existing MariaDB)..."
            if curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"; then
              chmod +x /tmp/install.sh
              echo "‚úÖ Aapanel installer downloaded"
            else
              echo "‚ùå Failed to download Aapanel installer"
              echo "‚ö†Ô∏è Continuing without Aapanel..."
              exit 0
            fi
            
            # Stop Apache to prevent conflicts
            echo "üõë Stopping apache2 to prevent conflicts..."
            sudo systemctl stop apache2
            
            # Install Aapanel with existing MariaDB
            echo "üîß Installing Aapanel with existing MariaDB..."
            # Set environment to skip MariaDB installation
            export DB_INSTALL=0
            timeout 900 bash -c "printf 'y\nyes\n' | sudo -E bash /tmp/install.sh" || {
              echo "‚ö†Ô∏è Aapanel installation timed out or failed"
              echo "‚ö†Ô∏è Continuing without Aapanel..."
            }
            
            # Verify installation
            if command -v bt >/dev/null 2>&1; then
              echo "‚úÖ Aapanel installed successfully"
              sudo bt --version 2>/dev/null || true
              # Configure Aapanel to use existing MariaDB
              sudo bt database set mysql 2>/dev/null || true
            else
              echo "‚ö†Ô∏è Aapanel command 'bt' not found"
            fi
            
          else
            echo "‚ÑπÔ∏è No backup found. Setting up fresh installation..."
            
            # Create essential directories
            sudo mkdir -p \
              /home/jacky/.ssh \
              /opt /srv /var/www/html \
              /www/server \
              /root/.ssh
            
            echo "is_new_install=true" >> $GITHUB_OUTPUT
          fi

      - name: 'üë§ Initial Setup: User, Hostname & Services'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "üöÄ Setting up fresh VPS environment..."
          
          # Create user jacky
          if ! id "jacky" &>/dev/null; then
            sudo useradd -m -s /bin/bash jacky
            echo "‚úÖ User 'jacky' created"
          fi
          
          # Set password and sudo privileges
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          
          # Set hostname
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts
          
          echo "‚úÖ Basic system setup completed."

      - name: 'üì¶ Install Aapanel with Existing MariaDB'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "üì• Installing Aapanel control panel with existing MariaDB..."
          
          # Ensure MariaDB is running before Aapanel installation
          if ! systemctl is-active --quiet mariadb; then
            echo "üîÑ Starting MariaDB..."
            sudo systemctl start mariadb
          fi
          
          # Download Aapanel installer
          if curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"; then
            chmod +x /tmp/install.sh
            echo "‚úÖ Aapanel installer downloaded"
          else
            echo "‚ùå Failed to download Aapanel installer"
            echo "‚ö†Ô∏è Continuing without Aapanel..."
            exit 0
          fi
          
          # Stop Apache to prevent conflicts
          echo "üõë Stopping apache2 to prevent conflicts..."
          sudo systemctl stop apache2
          
          # Prepare environment to use existing MariaDB
          echo "üîß Configuring Aapanel to use existing MariaDB..."
          export DB_INSTALL=0
          export MYSQL_ROOT_PASSWORD="root"
          
          # Install Aapanel
          echo "üîß Installing Aapanel (using existing MariaDB)..."
          timeout 900 bash -c "printf 'y\nyes\n' | sudo -E bash /tmp/install.sh" || {
            echo "‚ö†Ô∏è Aapanel installation timed out or failed"
            echo "‚ö†Ô∏è Continuing without Aapanel..."
          }
          
          # Post-installation configuration
          if command -v bt >/dev/null 2>&1; then
            echo "‚úÖ Aapanel installed successfully"
            sudo bt --version 2>/dev/null || true
            
            # Configure Aapanel database connection
            echo "üîó Configuring Aapanel database connection..."
            sudo bt database set mysql 2>/dev/null || true
            sudo mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION; FLUSH PRIVILEGES;" 2>/dev/null || true
          else
            echo "‚ö†Ô∏è Aapanel command 'bt' not found"
          fi

      - name: 'üöÄ Start and Configure Services'
        run: |
          set -euo pipefail
          echo "üîÑ Starting system services..."
          
          # Reload systemd
          sudo systemctl daemon-reload
          
          # MariaDB should already be running, just verify
          echo "üóÑÔ∏è Verifying MariaDB..."
          if systemctl is-active --quiet mariadb; then
            echo "‚úÖ MariaDB is running"
          else
            echo "üîÑ Starting MariaDB..."
            sudo systemctl start mariadb || {
              echo "‚ö†Ô∏è MariaDB failed to start"
              sudo systemctl status mariadb --no-pager || true
            }
          fi
          
          # Configure and start Apache
          echo "üåê Configuring Apache..."
          sudo systemctl enable apache2
          sudo systemctl start apache2 || {
            echo "‚ö†Ô∏è Apache failed to start"
            sudo systemctl status apache2 --no-pager || true
          }
          
          # Configure SSH
          echo "üîë Configuring SSH..."
          sudo systemctl enable ssh
          sudo systemctl start ssh
          
          # Start Aapanel if available
          if command -v bt >/dev/null 2>&1; then
            echo "üéõÔ∏è Starting Aapanel..."
            sudo bt start 2>/dev/null || {
              echo "‚ö†Ô∏è Aapanel failed to start"
            }
          fi
          
          # Service status check with details
          echo "üìä Service Status:"
          for service in mariadb apache2 ssh; do
            if systemctl is-active --quiet $service; then
              echo "‚úÖ $service: active"
            else
              echo "‚ùå $service: inactive"
            fi
          done
          
          echo "‚úÖ Services configured and started."

      - name: 'üîó Configure Remote Access'
        run: |
          set -euo pipefail
          
          # Configure Aapanel credentials for both new installs and restores
          if command -v bt >/dev/null 2>&1; then
            echo "üîê Configuring Aapanel credentials..."
            sleep 5 # Give the panel a moment to fully initialize
            
            # Set Aapanel credentials using the 'bt' command
            # bt 6 => Change username
            # bt 5 => Change password
            echo "Jacky" | sudo bt 6 2>/dev/null || echo "‚ö†Ô∏è Could not set Aapanel username"
            echo "spidey" | sudo bt 5 2>/dev/null || echo "‚ö†Ô∏è Could not set Aapanel password"
            
            # Get panel information to display in logs
            echo "üìã Aapanel Information:"
            sudo bt default 2>/dev/null || echo "‚ö†Ô∏è Could not retrieve Aapanel info"
          fi
          
          # Install and configure Tailscale
          echo "üï∏Ô∏è Setting up Tailscale VPN..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "‚ùå TAILSCALE_AUTHKEY secret is missing!"
            echo "‚ÑπÔ∏è Please add your Tailscale auth key to GitHub secrets."
            echo "‚ÑπÔ∏è Get it from: https://login.tailscale.com/admin/settings/keys"
            exit 1
          fi
          
          # Install Tailscale
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable tailscaled
          sudo systemctl start tailscaled
          
          # Connect with retry logic
          for i in {1..3}; do
            if sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes; then
              echo "‚úÖ Tailscale connected on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Tailscale connection attempt $i failed"
              if [[ $i -eq 3 ]]; then
                echo "‚ùå Tailscale setup failed"
                exit 1
              fi
              sleep 15
            fi
          done
          
          # Start tmate session
          echo "üí¨ Starting tmate for SSH access..."
          tmate -S /tmp/tmate.sock new-session -d 'echo "VPS Ready - Welcome to GitHub VPS!"; bash'
          
          # Wait for tmate with timeout
          timeout 60 tmate -S /tmp/tmate.sock wait tmate-ready || {
            echo "‚ö†Ô∏è tmate session startup timeout"
          }
          
          echo "================================================"
          echo "üéâ VPS IS READY FOR CONNECTION! üéâ"
          echo "================================================"
          
          # Get connection details
          TAILSCALE_IP=$(sudo tailscale ip -4 2>/dev/null || echo "Failed to get IP")
          TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' 2>/dev/null || echo "Failed to get tmate info")
          TMATE_WEB=$(tmate -S /tmp/tmate.sock display -p '#{tmate_web}' 2>/dev/null || echo "Not available")
          
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          echo "üîë SSH Access: $TMATE_SSH"
          echo "üåç Web Terminal: $TMATE_WEB"
          echo "üë§ Local User: ssh jacky@localhost (password: root)"
          
          if command -v bt >/dev/null 2>&1; then
            echo "üéõÔ∏è Aapanel: http://$TAILSCALE_IP:7800 (Jacky/spidey)"
          fi
          
          echo "================================================"

      - name: '‚è≥ Maintain VPS Session'
        run: |
          set -euo pipefail
          echo "üñ•Ô∏è VPS session is running!"
          echo "üìù To stop gracefully: touch /tmp/stop_session"
          echo "‚è∞ Auto-stop in 5.5 hours for backup"
          
          # Main monitoring loop
          for minute in {1..330}; do
            # Check for stop signal
            if [[ -f /tmp/stop_session ]]; then
              echo "üõë Stop signal detected at minute $minute"
              break
            fi
            
            # Status update every 30 minutes
            if (( minute % 30 == 0 )); then
              echo "‚è∞ Runtime: $minute minutes"
              echo "üìä Services: $(systemctl is-active mariadb apache2 ssh tailscaled 2>/dev/null | tr '\n' ' ')"
              
              # Connection info reminder
              if (( minute % 60 == 0 )); then
                echo "üîó Tailscale IP: $(sudo tailscale ip -4 2>/dev/null || echo 'N/A')"
              fi
            fi
            
            sleep 60
          done
          
          echo "üèÅ VPS session maintenance completed"

      - name: 'üì¶ Create System Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "üì¶ Creating comprehensive backup..."
          
          # Create backup directory
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          # Stop services gracefully in correct order
          echo "üõë Stopping services for clean backup..."
          
          # Stop Aapanel first if it exists
          if command -v bt >/dev/null 2>&1; then
            echo "Stopping Aapanel..."
            sudo bt stop 2>/dev/null || true
            sleep 2
          fi
          
          # Stop Apache
          echo "Stopping Apache..."
          sudo systemctl stop apache2 2>/dev/null || true
          
          # Stop MariaDB last
          echo "Stopping MariaDB..."
          sudo systemctl stop mariadb 2>/dev/null || true
          
          # Wait for all services to fully stop
          sleep 5
          
          # Create optimized backup with compression
          echo "üìÅ Creating optimized backup archive..."
          
          # Create file list for selective backup
          BACKUP_PATHS="
            /etc/hostname /etc/hosts /etc/passwd /etc/group /etc/shadow
            /etc/sudoers.d/ /etc/systemd/system/ /etc/ssh/
            /etc/apache2/ /etc/mysql/ /var/lib/tailscale/
            /var/lib/mysql/ /var/www/ /opt/ /srv/
            /root/.ssh/ /root/.bashrc /root/.profile
            /home/jacky/
          "
          
          # Add Aapanel paths if it exists
          if [[ -d /www ]]; then
            BACKUP_PATHS="$BACKUP_PATHS /www/"
          fi
          
          if command -v bt >/dev/null 2>&1; then
            BT_PATH=$(which bt)
            BACKUP_PATHS="$BACKUP_PATHS $BT_PATH"
          fi
          
          # Create backup with better compression
          sudo tar -czf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --ignore-failed-read \
            --warning=no-file-ignored \
            --exclude='/proc/*' --exclude='/tmp/*' --exclude='/sys/*' \
            --exclude='/dev/*' --exclude='/run/*' --exclude='/mnt/*' \
            --exclude='/media/*' --exclude='/lost+found' \
            --exclude='*.log' --exclude='*.pid' --exclude='*.sock' \
            --exclude='node_modules' --exclude='.git' \
            $BACKUP_PATHS \
            2>/dev/null || {
              echo "‚ö†Ô∏è Some files couldn't be backed up (normal)"
            }
          
          # Verify backup
          if [[ -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
            echo "‚úÖ Backup created: $BACKUP_SIZE"
            
            # Test integrity
            if tar -tzf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
              echo "‚úÖ Backup integrity verified"
            else
              echo "‚ùå Backup integrity check failed"
              exit 1
            fi
          else
            echo "‚ùå Backup creation failed"
            exit 1
          fi

      - name: '‚òÅÔ∏è Upload Backup to MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "üöÄ Uploading backup to MEGA..."
          
          # Verify backup exists
          if [[ ! -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            echo "‚ùå No backup file found to upload"
            exit 1
          fi
          
          # Upload with retry mechanism
          for attempt in {1..5}; do
            echo "üì§ Upload attempt $attempt/5..."
            
            if rclone copy "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" "${{ env.MEGA_REMOTE }}" \
               --progress --transfers 1 --retries 3 --low-level-retries 3; then
              
              echo "‚úÖ Upload successful on attempt $attempt"
              
              # Verify upload
              if rclone ls "${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
                echo "‚úÖ Upload verified on MEGA"
                break
              else
                echo "‚ùå Upload verification failed"
              fi
            else
              echo "‚ùå Upload attempt $attempt failed"
              
              if [[ $attempt -eq 5 ]]; then
                echo "‚ùå All upload attempts exhausted"
                exit 1
              fi
              
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          # Cleanup local backup
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"
          echo "üóëÔ∏è Local backup cleaned up"

      - name: 'üìã Final Status Report'
        if: always()
        run: |
          echo "============================================="
          echo "         üï∑Ô∏è VPS SESSION COMPLETE üï∑Ô∏è"
          echo "============================================="
          echo "üìÖ Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üè∑Ô∏è Status: ${{ job.status }}"
          echo "üñ•Ô∏è Hostname: $(hostname)"
          echo "üåç Runner: $(whoami)@$(hostname)"
          
          case "${{ job.status }}" in
            "success")
              echo "‚úÖ Session completed successfully!"
              echo "üíæ Backup stored: ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}"
              ;;
            "failure")
              echo "‚ùå Session completed with errors"
              echo "üíæ Backup may be available at: ${{ env.MEGA_REMOTE }}/${{ env.BACKUP_NAME }}"
              ;;
            *)
              echo "‚èπÔ∏è Session was cancelled or timed out"
              echo "üíæ Backup status unknown"
              ;;
          esac
          
          # Final system state
          echo ""
          echo "üìä Final System State:"
          echo "üíø Disk Usage: $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5")"}')"
          echo "üß† Memory: $(free -h | grep Mem | awk '{print $3"/"$2}')"
          echo "‚è±Ô∏è Uptime: $(uptime -p)"
          echo "üîß Services: $(systemctl is-active mariadb apache2 ssh tailscaled 2>/dev/null | tr '\n' ' ' || echo 'Not available')"
          
          echo "============================================="
          echo "Thank you for using Spidey VPS! üï∏Ô∏è"
          echo "============================================="
