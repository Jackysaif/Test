name: Persistent VPS (Sparta Edition)

on:
  schedule:
    # Runs automatically every 6 hours to refresh the session.
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allows for manual triggering of the workflow from the Actions tab.

env:
  # Configuration for the full system backup.
  BACKUP_STORE: /mnt/backups/vps
  BACKUP_NAME: vps-full-backup.tar.gz
  # Rclone remote and path for cloud storage.
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    # Set a generous timeout. GitHub Actions max is 6 hours (360 minutes).
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write

    steps:
      - name: '🕸️ Checkout Code'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Initial Setup & Environment Preparation
      # ------------------------------------------------------------------

      - name: '🔧 Install Core Tools & Rclone'
        run: |
          set -euo pipefail
          echo "🌐 Updating package list..."
          sudo apt-get update -qq
          echo "☁️ Installing Rclone..."
          curl -fsSL https://rclone.org/install.sh | sudo bash
          echo "📦 Installing essential system tools..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            tar gzip openssh-server htop nano vim git net-tools tmate jq curl \
            software-properties-common apt-transport-https ca-certificates \
            gnupg lsb-release psmisc screen
          echo "✅ All core tools installed."

      - name: '🛠️ Configure Rclone'
        run: |
          set -euo pipefail
          echo "🔐 Setting up rclone configuration..."
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "❌ ERROR: RCLONE_CONFIG secret is missing!" >&2
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "✅ Rclone configured successfully."

      - name: '🔍 Check for Data Backup'
        id: check_backup
        run: |
          set -euo pipefail
          echo "🔎 Checking for existing data backup..."
          if rclone ls "${MEGA_REMOTE}/latest_backup_link.txt" >/dev/null 2>&1; then
              ARTIFACT_LINK=$(rclone cat "${MEGA_REMOTE}/latest_backup_link.txt")
              echo "✅ Data backup link found in MEGA!"
              echo "has_backup=true" >> $GITHUB_OUTPUT
              echo "artifact_url=${ARTIFACT_LINK}" >> $GITHUB_OUTPUT
          else
              echo "🔍 No MEGA link found. Searching recent artifacts..."
              RECENT_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
                | jq -r '.workflows[] | select(.name == "Persistent VPS (Sparta Edition)") | .id' | head -1)
              if [[ -n "$RECENT_RUN" && "$RECENT_RUN" != "null" ]]; then
                LATEST_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${RECENT_RUN}/runs?status=success&per_page=3" \
                  | jq -r '.workflow_runs[] | select(.id != ${{ github.run_id }}) | .id' | head -1)
                if [[ -n "$LATEST_RUN" && "$LATEST_RUN" != "null" ]]; then
                  ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/runs/${LATEST_RUN}/artifacts" \
                    | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')
                  if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
                    ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
                    echo "✅ Found data backup in recent run!"
                    echo "has_backup=true" >> $GITHUB_OUTPUT
                    echo "artifact_url=${ARTIFACT_URL}" >> $GITHUB_OUTPUT
                  else
                    echo "ℹ️ No backup found. Starting fresh."
                    echo "has_backup=false" >> $GITHUB_OUTPUT
                  fi
                else
                  echo "ℹ️ No recent runs found. Starting fresh."
                  echo "has_backup=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "ℹ️ Workflow not found. Starting fresh."
                echo "has_backup=false" >> $GITHUB_OUTPUT
              fi
          fi

      - name: '📥 Download & Restore Data Backup'
        if: steps.check_backup.outputs.has_backup == 'true'
        run: |
          set -euo pipefail
          echo "📥 Downloading and restoring full system backup..."
          
          # Use /mnt for temporary storage to save root disk space
          mkdir -p /mnt/restore
          cd /mnt/restore
          
          # Download the backup
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ steps.check_backup.outputs.artifact_url }}" \
            -o "backup.zip"
          
          # Extract the GitHub artifact (always a zip)
          unzip -q backup.zip
          
          # Verify backup file
          if [[ ! -f "${{ env.BACKUP_NAME }}" ]]; then
            echo "❌ Backup file not found after extraction!"
            ls -la
            exit 1
          fi
          
          echo "📋 Backup file details:"
          ls -lh "${{ env.BACKUP_NAME }}"
          
          # Test backup integrity
          echo "🧪 Testing backup integrity..."
          if ! tar -tzf "${{ env.BACKUP_NAME }}" >/dev/null 2>&1; then
            echo "❌ Backup is corrupted!"
            exit 1
          fi
          
          echo "📂 Restoring data..."
          # Restore the entire filesystem from the backup
          sudo tar -xzpf "${{ env.BACKUP_NAME }}" -C / --warning=no-timestamp
          
          echo "✅ Full system restoration complete."

      # ------------------------------------------------------------------
      # Part 2: System Configuration & Services Setup
      # ------------------------------------------------------------------

      - name: '👤 Setup User Account'
        run: |
          set -euo pipefail
          echo "👤 Configuring user account..."
          if [[ -z "${{ secrets.USER_PASSWORD || '' }}" ]]; then
            echo "❌ ERROR: USER_PASSWORD secret missing!" >&2
            exit 1
          fi
          sudo useradd -m -s /bin/bash jacky 2>/dev/null || echo "User exists"
          echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
          sudo usermod -aG sudo,docker jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky > /dev/null
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts > /dev/null
          echo "✅ User account configured."

      - name: '📦 Install/Configure Aapanel'
        run: |
          set -euo pipefail
          if command -v bt >/dev/null 2>&1; then
            echo "✅ Aapanel already installed (from backup)."
          else
            echo "📥 Installing Aapanel (fresh install)..."
            curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
            chmod +x /tmp/install.sh
            timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || {
              echo "⚠️ Aapanel installation timed out, continuing..."
            }
          fi
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Setting Aapanel credentials..."
            sleep 5
            echo "Jacky" | sudo bt 6 || true
            echo "spidey" | sudo bt 5 || true
          fi
          
      - name: '🚀 Start All Services'
        run: |
          set -euo pipefail
          echo "🔄 Configuring and starting all system services..."
          sudo systemctl daemon-reload
          sudo systemctl enable --now ssh docker mariadb || true
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Starting Aapanel..."
            sudo bt start || true
          fi
          sleep 3
          echo "📊 Final Service Status Check:"
          for service in ssh docker mariadb; do
            if systemctl is-active --quiet $service; then
              echo "  ✅ $service is active."
            else
              echo "  ❌ $service is INACTIVE."
            fi
          done
          
      - name: '🔗 Configure Remote Access (Tailscale & tmate)'
        run: |
          set -euo pipefail
          echo "🕸️ Setting up Tailscale VPN for secure access..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "❌ ERROR: TAILSCALE_AUTHKEY secret is missing!" >&2
            exit 1
          fi
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes
          echo "💬 Starting tmate for emergency SSH access..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "================================================"
          echo "🎉          VPS IS READY FOR CONNECTION         🎉"
          echo "================================================"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔑 tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if command -v bt >/dev/null 2>&1; then
            echo ""
            echo "🎛️ Aapanel Panel Details:"
            sudo bt default || true
          fi
          echo "================================================"
          
      - name: '⏳ Maintain Session'
        run: |
          echo "🖥️ VPS session active. Will run for ~5.5 hours."
          echo "💡 To stop early: touch /tmp/stop"
          echo "🕐 Started: $(date)"
          end_time=$((SECONDS + 19800))
          while [ $SECONDS -lt $end_time ]; do
            if [ -f "/tmp/stop" ]; then
              echo "✅ Graceful shutdown requested."
              rm -f "/tmp/stop"
              break
            fi
            if [ $((SECONDS % 600)) -eq 0 ]; then
              remaining=$(((end_time - SECONDS) / 60))
              echo "🔄 Session active - $remaining minutes remaining - $(date)"
            fi
            sleep 60
          done
          echo "⏰ Session ending, preparing backup..."
          
      - name: '💾 Create Smart Data Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "💾 Creating smart data backup..."
          # Use /mnt for backup storage to save root disk space
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          echo "🛑 Stopping services cleanly for consistent backup..."
          if command -v bt >/dev/null 2>&1; then sudo bt stop || true; fi
          sudo systemctl stop mariadb || true
          sudo systemctl stop docker || true
          sleep 5
          
          # Create backup of only essential data to prevent hangs
          echo "📦 Backing up essential data only..."
          
          sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --warning=no-file-changed \
            --warning=no-file-removed \
            --exclude='/var/lib/docker/overlay2' \
            --exclude='/var/lib/docker/containers' \
            --exclude='/var/log' \
            --exclude='/var/cache' \
            --exclude='/var/tmp' \
            --exclude='/var/spool' \
            --exclude='/var/backups' \
            /home/ \
            /root/ \
            /var/lib/mysql/ \
            /var/lib/docker/volumes/ \
            /www/ \
            /srv/ \
            /opt/ \
            /etc/ssh/ \
            /etc/letsencrypt/ \
            /etc/sudoers.d/ \
            /etc/hostname \
            /etc/hosts \
            /etc/default/docker \
            /etc/docker/daemon.json \
            /etc/apache2/ \
            /etc/php/ \
            /etc/nginx/ \
            /etc/fail2ban/ \
            /var/spool/cron/crontabs \
            /etc/bt/ \
            /etc/init.d/bt \
            2>/dev/null || {
            echo "⚠️ Some paths were missing (normal for fresh install)"
          }
          
          if [[ -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
            echo "✅ Smart backup created. Size: $BACKUP_SIZE"
            echo "📋 Backup contents:"
            sudo tar -tzf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | head -10
          else
            echo "❌ Backup creation failed!"
            exit 1
          fi

      - name: '⬆️ Upload Data Backup'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKUP_NAME }}
          path: ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}
          retention-days: 7
          if-no-files-found: error

      - name: '🔗 Store Backup Link in MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "🔗 Storing backup link in MEGA..."
          sleep 30
          for attempt in {1..5}; do
            ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq -r '.artifacts[] | select(.name == "${{ env.BACKUP_NAME }}") | .id')
            if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
              break
            fi
            echo "⏳ Waiting for artifact ($attempt/5)..."
            sleep 30
          done
          if [[ -z "$ARTIFACT_ID" || "$ARTIFACT_ID" == "null" ]]; then
            echo "❌ Could not get artifact ID!"
            exit 1
          fi
          ARTIFACT_LINK="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
          rclone delete "${MEGA_REMOTE}/latest_backup_link.txt" 2>/dev/null || true
          echo "$ARTIFACT_LINK" | rclone rcat "${MEGA_REMOTE}/latest_backup_link.txt"
          echo "✅ Backup link stored in MEGA."
          # Clean up local backup file from /mnt to free up disk space
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: '📋 Session Summary'
        if: always()
        run: |
          echo "============================================="
          echo "    ✅ SPARTA VPS SESSION COMPLETE ✅"
          echo "============================================="
          echo "Status: ${{ job.status }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "End Time: $(date)"
          echo "Had Previous Backup: ${{ steps.check_backup.outputs.has_backup }}"
          echo "Runtime: $((SECONDS / 60)) minutes"
          echo ""
          echo "💾 Smart Data Backup Used"
          echo "   ✓ Essential configuration files"
          echo "   ✓ User data, databases, and Docker volumes"
          echo "   ✓ Installed application data (Aapanel, web content)"
          echo "   ✗ Large, non-essential files (Docker images, logs)"
          echo "============================================="
