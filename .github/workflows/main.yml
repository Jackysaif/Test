name: Persistent VPS with Backup & Restore

on:
  workflow_dispatch:
  workflow_call:

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Tailscale + rclone + tools)
        run: |
          sudo apt update
          sudo apt install -y curl unzip zip tmate net-tools neofetch gnupg lsb-release

          # Install Tailscale from official repo
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/$(lsb_release -cs).gpg \
            | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/$(lsb_release -cs).list \
            | sudo tee /etc/apt/sources.list.d/tailscale.list
          sudo apt update
          sudo apt install -y tailscale

          # Install rclone (latest)
          curl -fsSL https://downloads.rclone.org/rclone-current-linux-amd64.zip -o rclone.zip
          unzip rclone.zip
          cd rclone-*-linux-amd64
          sudo install -m 755 rclone /usr/bin/
          cd ..
          rm -rf rclone*

          rclone version
          tailscale version

      - name: Create restricted user and set hostname
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            echo "User jacky created with password root"
          else
            echo "User jacky already exists"
          fi

          echo "github-vps" | sudo tee /etc/hostname
          sudo hostname github-vps
          echo "‚úÖ Hostname set to github-vps"

      - name: Setup rclone with MEGA
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF

          echo "üîë MEGA rclone configured successfully!"
          rclone lsd mega:/ || echo "‚ö†Ô∏è Could not list MEGA (maybe empty?)"

      - name: Restore Tailscale state if exists
        run: |
          mkdir -p restore
          if rclone copy mega:/vps-backup/tailscale.state restore/; then
            echo "‚úÖ Found Tailscale state, restoring..."
            sudo mkdir -p /var/lib/tailscale
            sudo cp restore/tailscale.state /var/lib/tailscale/tailscaled.state
          else
            echo "‚ÑπÔ∏è No previous Tailscale state found"
          fi

      - name: Setup Tailscale
        run: |
          sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/run/tailscale/tailscaled.sock &
          sleep 5
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=github-vps --ssh
          echo "üéâ Connected to Tailscale!"
          tailscale ip -4
          echo "üë§ Username: jacky"
          echo "üîë Password: root"

          # Backup updated Tailscale state
          rclone copy /var/lib/tailscale/tailscaled.state mega:/vps-backup/ --progress || true

      - name: Download latest VPS backup from MEGA
        run: |
          mkdir -p restore
          if rclone copy mega:/vps-backup/latest.tar.gz restore/ --progress; then
            echo "‚úÖ Backup found, restoring..."
          else
            echo "‚ÑπÔ∏è No previous VPS backup found"
          fi

      - name: Restore VPS backup if exists
        run: |
          if [ -f restore/latest.tar.gz ]; then
            echo "üì¶ Restoring VPS backup..."
            sudo tar -xzf restore/latest.tar.gz -C /
          else
            echo "‚ö†Ô∏è No backup to restore"
          fi

      - name: Start tmate session (keep VPS alive ~6h)
        run: |
          echo "üîó Starting tmate session..."
          tmate -F

      - name: Backup VPS data
        if: always()
        run: |
          mkdir -p backup
          echo "üì¶ Backing up user jacky home directory..."
          sudo tar --exclude='*.tar.gz' -czf backup/jacky-home.tar.gz /home/jacky

          echo "üì¶ Backing up installed package list..."
          dpkg --get-selections > backup/installed-packages.list

          echo "‚úÖ Backup complete"
          ls -lh backup/

      - name: Upload VPS backup to MEGA
        if: always()
        run: |
          BACKUP_FILE="latest.tar.gz"
          tar --exclude='*.tar.gz' -czf $BACKUP_FILE -C backup .
          rclone mkdir mega:/vps-backup || true
          echo "‚òÅÔ∏è Uploading backup to MEGA..."
          rclone copy $BACKUP_FILE mega:/vps-backup --progress
          echo "‚úÖ Backup uploaded to MEGA"

      - name: Final backup on cancel
        if: cancelled()
        run: |
          echo "‚ö†Ô∏è Workflow cancelled, saving backup..."
          BACKUP_FILE="cancelled-$(date +%s).tar.gz"
          tar --exclude='*.tar.gz' -czf $BACKUP_FILE -C backup .
          rclone copy $BACKUP_FILE mega:/vps-backup --progress
