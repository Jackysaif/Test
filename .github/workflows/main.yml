name: VPS Backup and Restore

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Choose operation'
        required: true
        default: 'backup'
        type: choice
        options:
        - backup
        - restore

env:
  GDRIVE_REMOTE: gdrivveed
  BACKUP_PATH: vps-backup
  BACKUP_DATE: $(date +%Y%m%d_%H%M%S)

jobs:
  vps-operations:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync tar gzip mysql-client

      - name: Setup rclone configuration
        run: |
          echo "‚öôÔ∏è Setting up rclone configuration for full Drive access..."
          
          # Create rclone config directory
          mkdir -p ~/.config/rclone
          
          # Create rclone configuration with your credentials for regular Drive access
          cat > ~/.config/rclone/rclone.conf << 'EOF'
          [gdrivveed]
          type = drive
          client_id = 534417340383-f4b86oa9dffhjuhdh4ekd38b0l9llnum.apps.googleusercontent.com
          client_secret = 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
          scope = drive
          token = {"access_token":"ya29.A0AS3H6Ny6o1OvniaMus3wYXmmqBbanb_MNJmGTEfrQoBCbR_qTGcDCyGrObAOymSrxJ1Nq3g9Rd7JYyvPyD6L4vmgOwuJxEuePxz7--w3-Rl18LBNve5-1s8UVy0T_0VZOnn8TNqVdvScS9atFE8lUu4uPZxwb1ditSB3f9mqzZZOJAiKIXG31PHH9wu8XVdaLSq40pcaCgYKAbcSARQSFQHGX2MizZMgdAx4L1I4h9UJZKs6AQ0206","token_type":"Bearer","refresh_token":"1//0g1VFlKVUuwKlCgYIARAAGBASNwF-L9IrGhVBSYCiWVLzMiBL5VSP4_neIDcsmPELBjeHMIYSmA057I-AxPy2SAXr0nm-6vRRhUQ","expiry":"2025-08-31T15:42:32.953801261Z","expires_in":3599}
          team_drive = 
          EOF
          
          echo "‚úÖ rclone configuration created"

      - name: Verify rclone access
        run: |
          echo "üîç Verifying rclone access..."
          if rclone lsf $GDRIVE_REMOTE: >/dev/null 2>&1; then
            echo "‚úÖ rclone access verified successfully"
          else
            echo "‚ùå rclone access failed"
            echo "üîß Attempting to refresh token..."
            if rclone config reconnect $GDRIVE_REMOTE: --auto-confirm 2>/dev/null; then
              echo "‚úÖ Token refreshed, trying again..."
              rclone lsf $GDRIVE_REMOTE: >/dev/null 2>&1 && echo "‚úÖ Access verified" || exit 1
            else
              echo "‚ùå Token refresh failed"
              exit 1
            fi
          fi

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to install Tailscale"
            exit 1
          fi
          echo "‚úÖ Tailscale installed successfully"

      - name: Setup Tailscale with state restoration
        run: |
          echo "üîÑ Setting up Tailscale..."
          sudo mkdir -p /var/lib/tailscale
          
          # Try to restore previous Tailscale state
          if rclone lsf $GDRIVE_REMOTE:$BACKUP_PATH/system/tailscaled.state >/dev/null 2>&1; then
            echo "üì• Restoring Tailscale state..."
            if sudo rclone copy $GDRIVE_REMOTE:$BACKUP_PATH/system/tailscaled.state /var/lib/tailscale/ --progress; then
              sudo chown root:root /var/lib/tailscale/tailscaled.state
              sudo chmod 600 /var/lib/tailscale/tailscaled.state
              echo "‚úÖ Tailscale state restored successfully"
            else
              echo "‚ö†Ô∏è Failed to restore Tailscale state, will create new connection"
            fi
          else
            echo "‚ÑπÔ∏è No previous Tailscale state found, will create new connection"
          fi
          
          # Start Tailscale daemon
          sudo systemctl enable --now tailscaled
          
          # Connect to Tailscale network
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "üîå Starting with restored state..."
            sudo tailscale up --reset
          else
            echo "üîå Authenticating new connection..."
            sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname="github-runner-$(date +%s)"
          fi
          
          # Verify connection
          sleep 10
          if sudo tailscale status | grep -q "logged in"; then
            echo "‚úÖ Tailscale connected successfully"
            sudo tailscale status
          else
            echo "‚ùå Tailscale connection failed"
            exit 1
          fi

      - name: Create backup directories
        if: github.event.inputs.operation == 'backup'
        run: |
          mkdir -p backup/{websites,databases,aapanel,user-data,system,logs}
          echo "üìÅ Backup directories created"

      - name: Backup user data and home directories
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üë§ Backing up user data..."
          
          # Backup root user data (excluding system files)
          sudo tar -czf backup/user-data/root-data-$BACKUP_DATE.tar.gz \
            --exclude='/root/.cache' \
            --exclude='/root/.npm' \
            --exclude='/root/.docker' \
            --exclude='/root/snap' \
            -C /root . 2>/dev/null || echo "‚ö†Ô∏è Some root files skipped"
          
          # Backup other user home directories
          for user_home in /home/*; do
            if [ -d "$user_home" ]; then
              username=$(basename "$user_home")
              echo "üì¶ Backing up user: $username"
              sudo tar -czf backup/user-data/${username}-data-$BACKUP_DATE.tar.gz \
                --exclude="$user_home/.cache" \
                --exclude="$user_home/.npm" \
                --exclude="$user_home/.docker" \
                -C "$user_home" . 2>/dev/null || echo "‚ö†Ô∏è Some $username files skipped"
            fi
          done
          
          echo "‚úÖ User data backup completed"

      - name: Backup websites and web server data
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üåê Backing up websites..."
          
          # Common web directories
          WEB_DIRS="/var/www /usr/share/nginx/html /opt/lampp/htdocs"
          
          for dir in $WEB_DIRS; do
            if [ -d "$dir" ]; then
              dir_name=$(basename "$dir")
              parent_dir=$(dirname "$dir" | sed 's/\//_/g')
              echo "üì¶ Backing up: $dir"
              sudo tar -czf backup/websites/${parent_dir}_${dir_name}-$BACKUP_DATE.tar.gz -C "$dir" . 2>/dev/null || echo "‚ö†Ô∏è Directory $dir not accessible"
            fi
          done
          
          # Nginx configuration
          if [ -d "/etc/nginx" ]; then
            sudo tar -czf backup/websites/nginx-config-$BACKUP_DATE.tar.gz -C /etc/nginx . 2>/dev/null
          fi
          
          # Apache configuration
          if [ -d "/etc/apache2" ]; then
            sudo tar -czf backup/websites/apache2-config-$BACKUP_DATE.tar.gz -C /etc/apache2 . 2>/dev/null
          fi
          
          # SSL certificates
          if [ -d "/etc/letsencrypt" ]; then
            sudo tar -czf backup/websites/letsencrypt-$BACKUP_DATE.tar.gz -C /etc/letsencrypt . 2>/dev/null
          fi
          
          echo "‚úÖ Websites backup completed"

      - name: Backup MySQL/MariaDB databases
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üóÑÔ∏è Backing up MySQL databases..."
          
          # Check if MySQL/MariaDB is running
          if sudo systemctl is-active --quiet mysql || sudo systemctl is-active --quiet mariadb; then
            # Get all databases except system ones
            DATABASES=$(sudo mysql -e "SHOW DATABASES;" | grep -v -E "Database|information_schema|performance_schema|mysql|sys")
            
            for db in $DATABASES; do
              if [ -n "$db" ]; then
                echo "üíæ Backing up database: $db"
                sudo mysqldump --single-transaction --routines --triggers "$db" | gzip > backup/databases/${db}-$BACKUP_DATE.sql.gz
              fi
            done
            
            # Backup MySQL configuration
            if [ -f "/etc/mysql/my.cnf" ]; then
              sudo cp /etc/mysql/my.cnf backup/databases/my.cnf
            fi
            
            echo "‚úÖ MySQL backup completed"
          else
            echo "‚ÑπÔ∏è MySQL/MariaDB not running, skipping database backup"
          fi

      - name: Backup aaPanel data
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üéõÔ∏è Backing up aaPanel..."
          
          AAPANEL_DIRS="/www /usr/local/bt"
          
          for dir in $AAPANEL_DIRS; do
            if [ -d "$dir" ]; then
              dir_name=$(basename "$dir")
              parent_dir=$(dirname "$dir" | sed 's/\//_/g')
              echo "üì¶ Backing up aaPanel directory: $dir"
              sudo tar -czf backup/aapanel/${parent_dir}_${dir_name}-$BACKUP_DATE.tar.gz \
                --exclude="$dir/backup" \
                --exclude="$dir/wwwlogs" \
                --exclude="$dir/tmp" \
                -C "$dir" . 2>/dev/null || echo "‚ö†Ô∏è Directory $dir not fully accessible"
            fi
          done
          
          # aaPanel configuration
          if [ -d "/etc/bt" ]; then
            sudo tar -czf backup/aapanel/bt-config-$BACKUP_DATE.tar.gz -C /etc/bt . 2>/dev/null
          fi
          
          echo "‚úÖ aaPanel backup completed"

      - name: Backup PHP configurations
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üêò Backing up PHP configurations..."
          
          # Find all PHP versions
          PHP_DIRS="/etc/php*"
          for php_dir in $PHP_DIRS; do
            if [ -d "$php_dir" ]; then
              php_version=$(basename "$php_dir")
              echo "üì¶ Backing up $php_version"
              sudo tar -czf backup/websites/${php_version}-config-$BACKUP_DATE.tar.gz -C "$php_dir" . 2>/dev/null
            fi
          done
          
          echo "‚úÖ PHP configurations backup completed"

      - name: Backup Tailscale state
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üîó Backing up Tailscale state..."
          if [ -f "/var/lib/tailscale/tailscaled.state" ]; then
            sudo cp /var/lib/tailscale/tailscaled.state backup/system/tailscaled.state
            echo "‚úÖ Tailscale state backed up"
          else
            echo "‚ö†Ô∏è No Tailscale state found to backup"
          fi

      - name: Create backup summary
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üìã Creating backup summary..."
          {
            echo "=== VPS Backup Summary ==="
            echo "Date: $(date)"
            echo "Hostname: $(hostname)"
            echo "OS: $(lsb_release -d | cut -f2)"
            echo "Kernel: $(uname -r)"
            echo ""
            echo "=== Backup Contents ==="
            find backup/ -type f -name "*.tar.gz" -o -name "*.sql.gz" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "- $(basename "$file") ($size)"
            done
            echo ""
            echo "=== System Info ==="
            df -h | grep -E "/$|/var|/home" || true
            free -h
          } > backup/logs/backup-summary-$BACKUP_DATE.txt
          
          echo "‚úÖ Backup summary created"

      - name: Upload backup to Google Drive
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "‚òÅÔ∏è Uploading backup to Google Drive..."
          
          # Create dated backup folder
          BACKUP_FOLDER="$BACKUP_PATH/$(hostname)-$BACKUP_DATE"
          
          # Upload with progress and verification
          rclone copy backup/ $GDRIVE_REMOTE:$BACKUP_FOLDER/ \
            --progress \
            --transfers 4 \
            --checkers 8 \
            --retries 3 \
            --stats 30s \
            --stats-one-line
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Backup uploaded successfully to $BACKUP_FOLDER"
            
            # Create latest backup link
            rclone copy backup/ $GDRIVE_REMOTE:$BACKUP_PATH/latest/ \
              --progress
            
            echo "‚úÖ Latest backup link updated"
          else
            echo "‚ùå Backup upload failed"
            exit 1
          fi

      - name: Clean old backups
        if: github.event.inputs.operation == 'backup'
        run: |
          echo "üßπ Cleaning old backups (keeping last 5)..."
          
          # List and clean old backups
          rclone lsf $GDRIVE_REMOTE:$BACKUP_PATH/ | grep "$(hostname)-" | sort -r | tail -n +6 | while read old_backup; do
            if [ -n "$old_backup" ]; then
              echo "üóëÔ∏è Removing old backup: $old_backup"
              rclone purge $GDRIVE_REMOTE:$BACKUP_PATH/$old_backup
            fi
          done
          
          echo "‚úÖ Old backups cleaned"

      - name: Download and restore backup
        if: github.event.inputs.operation == 'restore'
        run: |
          echo "üì• Downloading backup from Google Drive..."
          
          # Download latest backup
          mkdir -p restore/
          rclone copy $GDRIVE_REMOTE:$BACKUP_PATH/latest/ restore/ \
            --progress \
            --transfers 4
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to download backup"
            exit 1
          fi
          
          echo "‚úÖ Backup downloaded successfully"
          
          # Show restore menu
          echo ""
          echo "=== Available Restore Options ==="
          echo "üìÅ Found backup files:"
          find restore/ -type f \( -name "*.tar.gz" -o -name "*.sql.gz" \) | sort
          
          echo ""
          echo "üîß Run the following commands manually on your VPS to restore:"
          echo ""
          echo "# Restore websites:"
          find restore/websites/ -name "*.tar.gz" -exec basename {} \; 2>/dev/null | while read file; do
            echo "sudo tar -xzf restore/websites/$file -C /target/directory/"
          done
          
          echo ""
          echo "# Restore databases:"
          find restore/databases/ -name "*.sql.gz" -exec basename {} .sql.gz \; 2>/dev/null | while read db; do
            echo "gunzip < restore/databases/${db}.sql.gz | mysql $db"
          done
          
          echo ""
          echo "# Restore user data:"
          find restore/user-data/ -name "*.tar.gz" -exec basename {} \; 2>/dev/null | while read file; do
            echo "sudo tar -xzf restore/user-data/$file -C /target/user/home/"
          done

      - name: Disconnect Tailscale
        if: always()
        run: |
          echo "üîå Disconnecting Tailscale..."
          sudo tailscale down || true
          echo "‚úÖ Tailscale disconnected"

      - name: Backup completion notification
        if: github.event.inputs.operation == 'backup'
        run: |
          echo ""
          echo "üéâ ================================="
          echo "‚úÖ VPS BACKUP COMPLETED SUCCESSFULLY"
          echo "üéâ ================================="
          echo ""
          echo "üìä Backup Statistics:"
          du -sh backup/ 2>/dev/null || echo "Backup size calculation failed"
          echo ""
          echo "‚òÅÔ∏è Uploaded to: $GDRIVE_REMOTE:$BACKUP_PATH/$(hostname)-$BACKUP_DATE"
          echo "üîó Latest backup link: $GDRIVE_REMOTE:$BACKUP_PATH/latest"
          echo ""
          echo "üìã Check backup logs for detailed information"
