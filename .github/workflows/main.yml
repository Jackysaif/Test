# .github/workflows/persistent-vps.yml

name: Persistent VPS with Backup & Restore

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs the workflow automatically every 6 hours
  schedule:
    - cron: '0 */6 * * *'

# Environment variables available to all jobs and steps
env:
  BACKUP_FILE_NAME: vps-backup.tar.gz
  MEGA_REMOTE: mega:vps-backup # IMPORTANT: Change 'mega:vps-backup' to your actual rclone remote name
  ARTIFACT_NAME: vps-backup-artifact

jobs:
  vps:
    runs-on: ubuntu-22.04
    # Total job timeout is 6 hours (360 minutes)
    timeout-minutes: 360

    # Grant permissions for the GITHUB_TOKEN to read actions and download artifacts
    permissions:
      actions: read
      contents: read

    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install Dependencies
        run: |
          echo "Installing essential tools: rclone, tmate, tailscale..."
          sudo apt-get update
          # Add Tailscale's repository
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.no-pub.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
          sudo apt-get update
          sudo apt-get install -y tmate rclone tailscale wget curl tar gzip gh
          echo "‚úÖ Dependencies installed."

      - name: üë§ Setup User and Hostname
        run: |
          echo "Configuring hostname to 'Spidey' and user 'jacky'..."
          sudo hostnamectl set-hostname Spidey
          sudo useradd -m -s /bin/bash jacky
          echo 'jacky:spidey' | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          echo "‚úÖ User and hostname setup complete."

      - name: üì¶ Configure Rclone for MEGA
        # This step only runs if the RCLONE_CONF_MEGA secret is provided
        if: ${{ secrets.RCLONE_CONF_MEGA != '' }}
        run: |
          echo "Configuring rclone for MEGA..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONF_MEGA }}" > ~/.config/rclone/rclone.conf
          echo "‚úÖ rclone configured."

      - name: üì• Attempt to Restore Backup
        id: restore
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Attempting to restore backup..."
          echo "1. Trying GitHub Artifacts from the last successful run..."
          
          # Use the GitHub CLI to find the last successful run and download its artifact
          LATEST_RUN_ID=$(gh run list --workflow "${{ github.workflow }}" --status success --json databaseId -q '.[0].databaseId' || echo "")
          
          if [ -n "$LATEST_RUN_ID" ]; then
            echo "Found previous successful run: $LATEST_RUN_ID. Attempting to download artifact."
            gh run download "$LATEST_RUN_ID" -n "${{ env.ARTIFACT_NAME }}"
            if [ -f "${{ env.BACKUP_FILE_NAME }}" ]; then
              echo "‚úÖ Successfully downloaded backup from GitHub Artifacts."
              sudo tar --warning=no-unknown-keyword -xzpf "${{ env.BACKUP_FILE_NAME }}" -C /
              echo "Backup restored. Setting status to 'success'."
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "‚ö†Ô∏è Artifact download failed or file was not found in run $LATEST_RUN_ID."
            fi
          else
            echo "No previous successful run found to fetch artifact from."
          fi
          
          echo "2. Trying MEGA as fallback..."
          if [ -f ~/.config/rclone/rclone.conf ]; then
            rclone copy "${{ env.MEGA_REMOTE }}/${{ env.BACKUP_FILE_NAME }}" . -P
            if [ -f "${{ env.BACKUP_FILE_NAME }}" ]; then
              echo "‚úÖ Successfully downloaded backup from MEGA."
              sudo tar --warning=no-unknown-keyword -xzpf "${{ env.BACKUP_FILE_NAME }}" -C /
              echo "Backup restored. Setting status to 'success'."
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "‚ö†Ô∏è Failed to download backup from MEGA."
            fi
          else
            echo "rclone not configured, skipping MEGA restore."
          fi
          
          echo "‚ùå No backup found. Proceeding with fresh setup."
          echo "status=fresh_setup" >> $GITHUB_OUTPUT

      - name: üöÄ Perform Fresh Setup (if no backup found)
        if: steps.restore.outputs.status == 'fresh_setup'
        run: |
          echo "üöÄ Performing a clean, fresh setup..."
          echo "Installing aapanel..."
          wget -O install.sh http://www.aapanel.com/script/install_6.0_en.sh
          sudo bash install.sh aapanel <<< "y"
          
          echo "aapanel installed. Setting credentials to jacky/spidey..."
          # Use a heredoc to pipe commands to the 'bt' utility
          sudo bt <<EOF
          5
          spidey
          6
          jacky
          EOF
          echo "‚úÖ aapanel credentials set."
          
          echo "Initializing Tailscale for the first time..."
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=spidey-vps --accept-routes
          echo "‚úÖ Tailscale is up."

      - name: üåê Re-initialize Services (if restored from backup)
        if: steps.restore.outputs.status == 'success'
        run: |
          echo "üîÑ Re-initializing services from restored state..."
          sudo /etc/init.d/bt start
          
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "Found Tailscale state file. Bringing Tailscale up..."
            sudo tailscale up --accept-routes
          else
            echo "‚ö†Ô∏è No Tailscale state file found after restore. Initializing fresh."
            sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=spidey-vps --accept-routes
          fi
          echo "‚úÖ Services re-initialized."

      - name: üíª Start tmate Session
        id: tmate
        run: |
          echo "Starting tmate session for remote access..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "‚úÖ tmate session is live. Connect with:"
          echo "SSH: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo "Web Shell: $(tmate -S /tmp/tmate.sock display -p '#{tmate_web}')"

      - name: ‚è≥ Keep Alive & Monitor for Shutdown
        run: |
          echo "Session is active. Will run for 5h 30m or until '/tmp/stop' is created."
          echo "The last 30 minutes are reserved for backup."
          
          # Timeout is 5.5 hours = 19800 seconds
          end_time=$(( $(date +%s) + 19800 ))
          
          while [ $(date +%s) -lt $end_time ]; do
            if [ -f /tmp/stop ]; then
              echo "üõë Shutdown signal '/tmp/stop' detected. Initiating graceful shutdown."
              break
            fi
            sleep 30
          done
          
          echo "Runtime finished. Proceeding to final backup."

      - name: üóÑÔ∏è Perform Final Backup
        # This step always runs to ensure data is saved, even if the job is cancelled.
        if: always()
        id: create_backup
        run: |
          echo "Starting final backup process..."
          # Define paths to back up. Add more if needed.
          BACKUP_PATHS=""
          [ -d /home/jacky ] && BACKUP_PATHS="$BACKUP_PATHS /home/jacky"
          [ -f /var/lib/tailscale/tailscaled.state ] && BACKUP_PATHS="$BACKUP_PATHS /var/lib/tailscale/tailscaled.state"
          [ -d /www/server/panel ] && BACKUP_PATHS="$BACKUP_PATHS /www/server/panel"
          [ -d /var/lib/mysql ] && BACKUP_PATHS="$BACKUP_PATHS /var/lib/mysql"
          
          if [ -z "$BACKUP_PATHS" ]; then
            echo "No data found to back up. Skipping archive creation."
            echo "backup_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Creating archive of essential data..."
          # Use --ignore-failed-read for ephemeral files that might disappear during tar
          sudo tar --ignore-failed-read -czpf "${{ env.BACKUP_FILE_NAME }}" $BACKUP_PATHS
          
          echo "‚úÖ Backup created: ${{ env.BACKUP_FILE_NAME }}"
          echo "backup_created=true" >> $GITHUB_OUTPUT

      - name: ‚¨ÜÔ∏è Upload to GitHub Artifact
        if: always() && steps.create_backup.outputs.backup_created == 'true'
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.BACKUP_FILE_NAME }}
          retention-days: 5
          if-no-files-found: warn

      - name: ‚òÅÔ∏è Upload to MEGA (Fallback)
        # Runs if the backup was created AND the primary artifact upload failed.
        if: always() && steps.create_backup.outputs.backup_created == 'true' && steps.upload_artifact.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è GitHub Artifact upload failed. Falling back to MEGA..."
          if [ -f ~/.config/rclone/rclone.conf ]; then
            rclone copy "${{ env.BACKUP_FILE_NAME }}" "${{ env.MEGA_REMOTE }}/" -P
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully uploaded backup to MEGA."
            else
              echo "‚ùå CRITICAL: Failed to upload backup to MEGA as well. Data may be lost."
              exit 1
            fi
          else
            echo "‚ùå CRITICAL: rclone not configured. Cannot upload backup to MEGA."
            exit 1
          fi
