
name: 🕷️ Spidey's VPS Adventure

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 400
    
    steps:
      - name: 🕸️ Spidey's Web Setup
        run: |
          echo "🕷️ Spidey is swinging into action!"
          echo "🌐 Setting up the web of connections..."
          
      - name: 🐍 Python Power-Up
        run: |
          echo "🐍 Giving Spidey some Python powers!"
          sudo apt-get update -qq
          sudo apt-get install -y python3-pip python3-psutil
          pip3 install psutil requests
          
      - name: 🏗️ Installing Essential Tools
        run: |
          echo "🛠️ Spidey's tool belt is getting loaded!"
          sudo apt-get install -y curl wget unzip jq
          
      - name: 🗄️ MariaDB Setup (Spidey's Data Vault)
        run: |
          echo "🗄️ Setting up Spidey's secret data vault..."
          sudo apt-get install -y mariadb-server mariadb-client
          sudo systemctl start mariadb
          sudo systemctl enable mariadb
          echo "🔐 Securing the vault with Spidey's password..."
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';"
          echo "✅ Data vault is secure!"

      - name: 🕸️ Tailscale Web Connection
        run: |
          echo "🕸️ Connecting to Spidey's web network..."
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --ssh
          echo "🌐 Spidey is now connected to the web!"

      - name: ☁️ RClone Setup (Spidey's Cloud Powers)
        run: |
          echo "☁️ Giving Spidey cloud-swinging abilities..."
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-current-linux-amd64.zip
          sudo cp rclone-*/rclone /usr/local/bin/
          sudo chmod +x /usr/local/bin/rclone
          
          echo "📝 Setting up Spidey's cloud config..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          echo "☁️ Cloud powers activated!"

      - name: 🔄 Restore Spidey's Previous Work
        run: |
          echo "🔄 Checking if Spidey has previous work to restore..."
          if rclone lsf mega:spidey-backup/ | grep -q "spidey-web-backup.tar.gz"; then
            echo "📥 Found Spidey's previous work! Restoring..."
            rclone copy mega:spidey-backup/spidey-web-backup.tar.gz ./
            sudo tar -xzf spidey-web-backup.tar.gz -C /
            echo "✅ Spidey's previous work restored!"
          else
            echo "🆕 No previous work found. This must be Spidey's first mission!"
          fi

      - name: 🎛️ Installing aaPanel (Spidey's Control Center)
        run: |
          echo "🎛️ Installing Spidey's web control center!"
          echo "🕷️ Downloading the latest aaPanel installer..."
          
          # Use expect to handle prompts automatically
          sudo apt-get install -y expect
          
          # Create expect script for aaPanel installation
          cat > install_aapanel.exp << 'EOF'
          #!/usr/bin/expect
          set timeout 300
          spawn bash -c "wget -O install.sh http://www.aapanel.com/script/install_7.0_en.sh && bash install.sh aapanel"
          
          # Handle first prompt (usually asking to confirm installation)
          expect {
            "*y/n*" { send "y\r"; exp_continue }
            "*Y/N*" { send "Y\r"; exp_continue }
            "*yes/no*" { send "yes\r"; exp_continue }
            "*continue*" { send "y\r"; exp_continue }
            eof
          }
          EOF
          
          chmod +x install_aapanel.exp
          echo "🚀 Starting automated aaPanel installation..."
          sudo ./install_aapanel.exp
          
          echo "✅ aaPanel installed! Spidey's control center is ready!"

      - name: 🏁 Starting All Spidey Services
        run: |
          echo "🏁 Starting all of Spidey's services..."
          sudo systemctl start mariadb
          sudo systemctl start bt-panel || echo "aaPanel will start automatically"
          echo "🕷️ All services are web-slinging!"

      - name: 🕷️ Spidey's Patrol Loop (6 hours of web-slinging)
        run: |
          echo "🕷️ Spidey is starting his 6-hour patrol!"
          echo "🌃 Watching over the city..."
          
          patrol_start=$(date +%s)
          patrol_duration=$((6 * 3600 - 1800))  # 6 hours minus 30 min for backup
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - patrol_start))
            
            if [ $elapsed -ge $patrol_duration ]; then
              echo "⏰ Patrol time is up! Time for backup..."
              break
            fi
            
            remaining=$((patrol_duration - elapsed))
            hours=$((remaining / 3600))
            minutes=$(((remaining % 3600) / 60))
            
            echo "🕸️ Spidey is on patrol... ${hours}h ${minutes}m remaining"
            sleep 300  # Check every 5 minutes
          done

      - name: 🎒 Creating Backup of Spidey's Web
        run: |
          echo "🎒 Spidey is packing up his work for safekeeping..."
          
          # Create comprehensive backup
          sudo tar -czf spidey-web-backup.tar.gz \
            --exclude='/proc' \
            --exclude='/tmp' \
            --exclude='/sys' \
            --exclude='/dev' \
            --exclude='/run' \
            --exclude='/mnt' \
            --exclude='/media' \
            /var/lib/mysql \
            /www \
            /root \
            /home \
            /etc/systemd/system/multi-user.target.wants/mariadb.service \
            /usr/local/btpanel 2>/dev/null || true
            
          echo "📦 Backup created! Size: $(du -h spidey-web-backup.tar.gz | cut -f1)"

      - name: ⬆️ Uploading to GitHub Artifacts (Primary backup)
        uses: actions/upload-artifact@v4
        with:
          name: spidey-backup-${{ github.run_number }}
          path: spidey-web-backup.tar.gz
          retention-days: 30

      - name: ☁️ Uploading to MEGA (Secondary backup)
        run: |
          echo "☁️ Spidey is storing backup in the cloud..."
          rclone copy spidey-web-backup.tar.gz mega:spidey-backup/
          echo "✅ Cloud backup complete!"

      - name: 🎯 Spidey's Mission Complete!
        run: |
          echo "🎯 Another successful mission for Spidey!"
          echo "🕷️ The web is safe for another day!"
          echo "📊 Mission Stats:"
          echo "   💾 Backup created: ✅"
          echo "   ☁️ Cloud storage: ✅"
          echo "   🌐 Network secure: ✅"
          echo "   🗄️ Database running: ✅"
          echo ""
          echo "🕸️ Until next time, true believers!"
