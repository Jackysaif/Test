name: Continuous Persistent VPS with Backup & Restore

on:
  schedule:
    - cron: '0 */6 * * *'   # Every 6 hours
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-22.04
    timeout-minutes: 350

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Display startup info
        run: |
          echo "Creating hostname root@notfleppy"
          echo "Creating username 'not' and password 'fleppy'"

      # === Hostname and User Setup ===
      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname root@notfleppy
          echo "127.0.0.1 root@notfleppy" | sudo tee -a /etc/hosts

      - name: Set root password
        run: echo "root:fleppy" | sudo chpasswd

      - name: Create user 'not' with password 'fleppy'
        run: |
          if ! id -u not >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash not
            echo "not:fleppy" | sudo chpasswd
            sudo usermod -aG sudo not
            echo "not ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/not
          else
            echo "ℹ️ User 'not' already exists"
          fi

      # === Install Dependencies ===
      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y tmate curl unzip sudo net-tools neofetch
          curl -Of https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip -a rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/
          sudo chown root:root /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          rclone version

      # === Setup rclone with MEGA ===
      - name: Configure MEGA remote
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [mega]
          type = mega
          user = rajeeshsksbx7@gmail.com
          pass = EfABK_S7bUsZtacq8JlaxYackzNv7KmZAQ1mpA
          EOF
          echo "✅ MEGA remote configured"
          rclone mkdir mega:/vps-backup || true
          rclone ls mega:/vps-backup || echo "ℹ️ MEGA remote empty"

      # === Restore Backup ===
      - name: Restore backup files
        run: |
          mkdir -p restore
          if rclone copy mega:/vps-backup/latest.tar.gz restore/; then
            echo "✅ Found latest backup, extracting..."
            sudo tar -xzf restore/latest.tar.gz -C /
          else
            echo "ℹ️ No previous backup found, starting fresh"
          fi

      # === Install & Restore Tailscale ===
      - name: Install Tailscale
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Restore Tailscale state
        run: |
          mkdir -p backup
          if rclone copy mega:/vps-backup/tailscale-initial.tar.gz backup/; then
            tar -xzf backup/tailscale-initial.tar.gz -C backup
            sudo mkdir -p /var/lib/tailscale
            sudo cp backup/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
            echo "✅ Restored Tailscale state"
          else
            echo "🆕 No previous Tailscale state found"
          fi

      - name: Start Tailscale
        run: |
          sudo tailscaled --state=/var/lib/tailscale/tailscaled.state &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --ssh --hostname root@notfleppy || echo "⚠️ Tailscale already up"
          echo "🌐 Tailscale IP: $(tailscale ip -4 || echo 'N/A')"

      # === Start Tmate Session ===
      - name: Start tmate session
        uses: mxschmitt/action-tmate@v3

      # === Keep VPS Alive ===
      - name: Keep VPS alive
        run: |
          echo "🕒 VPS will stay alive for 6 hours"
          sleep 21600

      # === Backup Section (only on dispatch or cancel) ===
      - name: Backup VPS data
        if: github.event_name == 'workflow_dispatch'
        run: |
          mkdir -p backup
          echo "📦 Backing up user 'not' home directory..."
          sudo tar --exclude='*.tar.gz' -czf backup/not-home.tar.gz /home/not

          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "📦 Backing up Tailscale state..."
            sudo cp /var/lib/tailscale/tailscaled.state backup/
          fi

          tar -czf latest.tar.gz -C backup .
          rclone copy latest.tar.gz mega:/vps-backup --progress
          echo "✅ Backup uploaded to MEGA"

      - name: Final backup on cancel
        if: cancelled()
        run: |
          mkdir -p backup
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo cp /var/lib/tailscale/tailscaled.state backup/
          fi
          BACKUP_FILE="cancelled-$(date +%s).tar.gz"
          tar -czf $BACKUP_FILE -C backup .
          rclone copy $BACKUP_FILE mega:/vps-backup --progress
          echo "⚠️ Workflow cancelled, backup saved"
