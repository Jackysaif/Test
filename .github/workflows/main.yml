Task: Generate a single GitHub Actions workflow YAML file that implements a persistent VPS session with robust backup/restore logic and automated first-time provisioning. The workflow must be production-ready shell commands (bash), use only GitHub Actions built-in steps and public actions, and obey these exact requirements and secrets.

Top-level behavior and constraints

Single YAML file only. Name the job vps and use runs-on: ubuntu-22.04.

Trigger: workflow_dispatch and a schedule that runs every 6 hours (cron).

Session run-time: a session should run for ~6 hours total. The backup step may take ~30 minutes inside that window. Use a job-level timeout-minutes long enough to cover 6 hours+overhead.

Use sudo for privileged work and ensure correct permissions on files created/restored.

Always install rclone before any rclone use.

Use GitHub secrets:

TAILSCALE_AUTHKEY — for Tailscale authkey

MEGA_RCLONE — base64 or rclone config text for MEGA remote (the workflow must decode and write rclone config)

DB_ROOT_PASSWORD — root password for MariaDB

(Any other secrets may be referenced as secrets.* if needed)


Primary backup destination: create a GitHub artifact of the backup first. After artifact creation, attempt to upload (a copy) to MEGA using rclone and write the MEGA direct-link or public share URL into a text file mega-backup-link.txt. If artifact creation or retrieval fails, fall back to MEGA-only backup/restore.

The workflow must implement the following fallback logic for restore at job start:

1. Try to download the most recent GitHub artifact named vps-backup.tar.gz from the repository that triggered the workflow (or from the default workflow run artifacts) and restore from it if present.


2. If artifact not found or restore fails, try to download the latest MEGA backup using rclone (MEGA remote created from MEGA_RCLONE).


3. If both fail or no backup found, perform a fresh install/provision.



Make backups not of the entire OS image. Back up only important persistent data and service state that is necessary to reproduce the VPS previous state: /home, /root, /etc (selected configs), /var/www, /opt, aaPanel data directory(s), Tailscale state (/var/lib/tailscale or equivalent), /var/lib/mysql (MariaDB data) — but do not back up the whole root filesystem. The workflow must build a tar.gz containing named directories and a small manifest backup-manifest.txt listing what was included.

Provide a graceful shutdown trigger: if a file /tmp/stop is created on the remote machine (i.e. the runner executes touch /tmp/stop), the script must detect it and run a final backup and exit cleanly.

Preserve the old public IP across sessions where possible: attempt to restore Tailscale state first (so Tailscale keeps the same IP/identity). If impossible, re-register Tailscale using TAILSCALE_AUTHKEY and back up the new state to MEGA immediately.

After a restore completes, ensure all restored services (aaPanel, MariaDB, web services, etc.) are started.

Create a sudo user jacky (if not exist) with password spidey and add to sudo group; create a super-user (if separate) per instruction — do everything with proper chown/chmod where needed.

Set the system hostname to Spidey.

Install aaPanel using the updated aaPanel v7.0 installer link (the workflow should fetch the latest official installer URL at runtime). Automate installer prompts:

When the installer asks to enter y to install panel, send y.

When the installer asks for force install, send yes.

After install, set aaPanel credentials using its CLI: set username Jacky and password spidey (use aaPanel bt CLI or equivalent steps; run with sudo).


Install MariaDB (directly, not via aaPanel). Configure root password to the value of DB_ROOT_PASSWORD. Create a test database named test. Ensure MariaDB server is running after restore or fresh install.

Use tailscale (install it), and if a Tailscale state snapshot is restored, restore it first; otherwise start tailscale with sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} and then upload the saved state to MEGA.

Keep the workflow file well-structured, logical, and easy to read. Keep comments that explain key blocks.

Use actions/upload-artifact@v4 and actions/download-artifact@v4 (or latest) for artifact steps.

Use rclone to upload/download to MEGA. The MEGA_RCLONE secret contains the rclone config (base64 or raw); decode/write it into ~/.config/rclone/rclone.conf prior to rclone use.

Use tmate or an equivalent keepalive session to allow debugging the remote steps while the job runs (optional improvement you may include).


Detailed step requirements (job steps)

1. Checkout repo.


2. Prepare environment:

Install rclone, jq, tar, gzip, expect (for automating interactive installers), mariadb-server packages, tailscale (official install), and tmate (optional).

Decode and write ~/.config/rclone/rclone.conf from MEGA_RCLONE secret.



3. Attempt restore-from-artifact:

Use actions/download-artifact or curl GitHub artifacts API to find the latest vps-backup.tar.gz.

If found, extract to a temp location and run a restore.sh that:

restores Tailscale state (copy files into correct locations with sudo, set ownership),

restore aaPanel files and configs,

restore MariaDB data files (stop mysql, copy files, chown to mysql:mysql, start mysql),

restore service unit files and run systemctl daemon-reload and systemctl restart <services> for restored services.




4. If artifact restore fails / not found, attempt restore-from-MEGA:

Use rclone to list remote and get the latest backup file; download and extract; run same restore.sh.



5. If both restores fail, run fresh provision:

Create sudo user jacky with password spidey (securely set with chpasswd), add to sudo group.

sudo hostnamectl set-hostname Spidey

Install aaPanel using an automated expect script or yes + CLI to answer y and yes prompts. After install, configure aaPanel account using bt 5 Jacky and bt 6 spidey or the official aaPanel CLI command to set username/password.

Install MariaDB, configure root password from DB_ROOT_PASSWORD, create database test.

Install and start tailscale using TAILSCALE_AUTHKEY.



6. During normal runtime, provide a backup step that:

Collects the selected directories into vps-backup-<timestamp>.tar.gz and creates backup-manifest.txt.

Uploads that file as a GitHub artifact using actions/upload-artifact.

Then attempts to upload to MEGA using rclone copy to a folder like vps-backups/.

After rclone upload, attempt to create/get a public share link or file link and write that URL into mega-backup-link.txt and to the artifact as well.



7. Graceful shutdown detection:

The runner process must periodically check for /tmp/stop. If found, run the final backup (same backup steps), then exit job cleanly.



8. After any restore, start/restart services: aaPanel, mariadb, web servers, docker (if present), and tailscale. Verify service health and log status for each.


9. Permissions & safety:

Ensure files restored have correct ownership (e.g., mysql: mysql for MariaDB data).

Use set -euo pipefail in shell blocks.




Output requirements

The YAML must be complete and copy/paste runnable (only requiring the secrets above to be set).

Include helpful inline comments explaining each major section.

Add a short top-of-file comment that lists the secrets required and their expected format.

Keep the YAML limited to a single file; do not split across multiple files.


Freedom for improvements

You may add reasonable extra logic to improve reliability (e.g., retry loops for network commands, simple checksums to validate backups, short health checks after service restarts).

Keep improvements sensible and documented within comments.


Do not ask clarifying questions. Produce the final single YAML workflow file that implements the behavior above. Name artifact vps-backup.tar.gz (or vps-backup-<timestamp>.tar.gz but ensure download step can find the latest by pattern). Ensure all interactive installers are automated. End.
