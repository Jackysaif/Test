name: VPS Backup and Restore

on:
  schedule:
    - cron: "0 */6 * * *"   # every 6 hours
  workflow_dispatch:

env:
  GDRIVE_REMOTE: gdrivveed
  BACKUP_PATH: vps-backup

jobs:
  vps-session:
    runs-on: ubuntu-22.04
    timeout-minutes: 380   # 6h20m to allow backup to finish

    steps:
      # ============================================================
      # 0) Checkout (optional, keeps structure like original)
      # ============================================================
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # ============================================================
      # 1) Install required packages
      # ============================================================
      - name: ‚öôÔ∏è Install dependencies
        run: |
          set -e
          echo "üîÑ Updating apt & installing packages..."
          sudo apt-get update
          sudo apt-get install -y curl unzip zip rclone tar gzip coreutils \
                                  tmate net-tools neofetch figlet toilet \
                                  jq lsb-release gnupg ca-certificates \
                                  apt-transport-https git build-essential \
                                  wget nano htop sudo

      # ============================================================
      # 2) Configure rclone (NO heredoc ‚Üí safe YAML)
      # ============================================================
      - name: ‚òÅÔ∏è Configure rclone (remote: ${{ env.GDRIVE_REMOTE }})
        run: |
          set -e
          echo "‚öôÔ∏è Writing rclone.conf..."
          mkdir -p ~/.config/rclone
          CFG="$HOME/.config/rclone/rclone.conf"
          : > "$CFG"
          printf '%s\n' "[${GDRIVE_REMOTE}]" >> "$CFG"
          printf '%s\n' 'type = drive' >> "$CFG"
          printf '%s\n' 'client_id = 534417340383-f4b86oa9dffhjuhdh4ekd38b0l9llnum.apps.googleusercontent.com' >> "$CFG"
          printf '%s\n' 'client_secret = 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' >> "$CFG"
          printf '%s\n' 'scope = drive' >> "$CFG"
          # Do NOT set root_folder_id=appDataFolder; that causes insufficientScopes for normal Drive access
          printf '%s\n' 'token = {"access_token":"ya29.A0AS3H6Ny6o1OvniaMus3wYXmmqBbanb_MNJmGTEfrQoBCbR_qTGcDCyGrObAOymSrxJ1Nq3g9Rd7JYyvPyD6L4vmgOwuJxEuePxz7--w3-Rl18LBNve5-1s8UVy0T_0VZOnn8TNqVdvScS9atFE8lUu4uPZxwb1ditSB3f9mqzZZOJAiKIXG31PHH9wu8XVdaLSq40pcaCgYKAbcSARQSFQHGX2MizZMgdAx4L1I4h9UJZKs6AQ0206","token_type":"Bearer","refresh_token":"1//0g1VFlKVUuwKlCgYIARAAGBASNwF-L9IrGhVBSYCiWVLzMiBL5VSP4_neIDcsmPELBjeHMIYSmA057I-AxPy2SAXr0nm-6vRRhUQ","expiry":"2025-08-31T15:42:32.953801261Z","expires_in":3599}' >> "$CFG"
          printf '%s\n' 'team_drive =' >> "$CFG"
          echo "‚úÖ rclone configured."
          echo "üîé Verifying Drive access..."
          rclone about ${GDRIVE_REMOTE}: || (echo "‚ùå rclone cannot access ${GDRIVE_REMOTE}"; exit 1)

      # ============================================================
      # 3) Set session timestamps and backup date
      # ============================================================
      - name: üïí Set timestamps
        run: |
          echo "START_TS=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          echo "BACKUP_DATE=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          echo "‚úÖ Timestamps prepared."

      # ============================================================
      # 4) Create user & password (jacky/root) + sudo
      # ============================================================
      - name: üë§ Create user 'jacky'
        run: |
          set -e
          if ! id jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
          fi
          echo "jacky:root" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "‚úÖ User jacky ready."

      # ============================================================
      # 5) Restore Tailscale state from Drive (before install)
      # ============================================================
      - name: üîÑ Restore Tailscale state (separate file)
        run: |
          set -e
          echo "üìÅ Checking for Tailscale state on Drive..."
          sudo mkdir -p /var/lib/tailscale
          if rclone ls ${GDRIVE_REMOTE}:${BACKUP_PATH}/system/tailscaled.state >/dev/null 2>&1; then
            echo "üî• Found state; restoring to /var/lib/tailscale/tailscaled.state"
            sudo rclone copy ${GDRIVE_REMOTE}:${BACKUP_PATH}/system/tailscaled.state /var/lib/tailscale/ --progress || true
            sudo chown root:root /var/lib/tailscale/tailscaled.state || true
            sudo chmod 600 /var/lib/tailscale/tailscaled.state || true
            echo "TS_STATE_RESTORED=true" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è No previous Tailscale state found."
            echo "TS_STATE_RESTORED=false" >> $GITHUB_ENV
          fi

      # ============================================================
      # 6) Install & connect Tailscale
      # ============================================================
      - name: üåê Install & Start Tailscale
        run: |
          set -e
          echo "‚¨áÔ∏è Installing Tailscale..."
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          if [ "${TS_STATE_RESTORED}" = "true" ]; then
            echo "üîÅ Using restored state..."
            sudo tailscale up --reset --accept-routes --accept-dns || true
          else
            echo "üÜï Authenticating new connection..."
            sudo tailscale up --authkey "${{ secrets.TAILSCALE_AUTH }}" --hostname "github-vps-$(date +%s)" --accept-routes --accept-dns || true
            echo "üíæ Backing up newly-created state..."
            sudo rclone copy /var/lib/tailscale/tailscaled.state ${GDRIVE_REMOTE}:${BACKUP_PATH}/system/ --progress || true
          fi
          echo "üåç Tailscale IPs:"
          sudo tailscale ip -4 || true
          sudo tailscale ip -6 || true

      # ============================================================
      # 7) Auto-restore VPS data (if Drive has it)
      # ============================================================
      - name: üì• Restore VPS data (home, etc, www)
        run: |
          set -e
          echo "üîé Checking for previous VPS data on Drive..."
          if rclone lsf ${GDRIVE_REMOTE}:${BACKUP_PATH}/home/ >/dev/null 2>&1; then
            echo "üì¶ Restoring /home/jacky ..."
            sudo rclone copy ${GDRIVE_REMOTE}:${BACKUP_PATH}/home/ /home/jacky/ --progress || true
            sudo chown -R jacky:jacky /home/jacky || true
          fi
          if rclone lsf ${GDRIVE_REMOTE}:${BACKUP_PATH}/etc/ >/dev/null 2>&1; then
            echo "üì¶ Restoring /etc ..."
            sudo rclone copy ${GDRIVE_REMOTE}:${BACKUP_PATH}/etc/ /etc/ --progress || true
          fi
          if rclone lsf ${GDRIVE_REMOTE}:${BACKUP_PATH}/www/ >/dev/null 2>&1; then
            echo "üì¶ Restoring /var/www ..."
            sudo rclone copy ${GDRIVE_REMOTE}:${BACKUP_PATH}/www/ /var/www/ --progress || true
          fi
          echo "‚úÖ Restore phase finished."

      # ============================================================
      # 8) Keep the session alive for ~6h
      # ============================================================
      - name: ‚è≥ Keep session alive (~6h)
        run: |
          set -e
          echo "üïí Session active from ${START_TS}; sleeping for 6 hours..."
          sleep 21600

      # ============================================================
      # 9) Backup: data + Tailscale (runs even if earlier steps fail)
      #    Note: GitHub cannot run steps *after* a manual cancel.
      # ============================================================
      - name: üíæ Backup VPS data to Drive
        if: always()
        run: |
          set -e
          echo "üì¶ Preparing backup at date ${BACKUP_DATE}..."
          HOST_TAG="$(hostname)"
          SNAP_DIR="/tmp/vps-snap-${BACKUP_DATE}"
          sudo mkdir -p "${SNAP_DIR}"
          echo "‚òÅÔ∏è Uploading /home/jacky ..."
          sudo rclone copy /home/jacky ${GDRIVE_REMOTE}:${BACKUP_PATH}/home/ --progress || true
          echo "‚òÅÔ∏è Uploading /etc ..."
          sudo rclone copy /etc ${GDRIVE_REMOTE}:${BACKUP_PATH}/etc/ --progress || true
          echo "‚òÅÔ∏è Uploading /var/www ..."
          sudo rclone copy /var/www ${GDRIVE_REMOTE}:${BACKUP_PATH}/www/ --progress || true

          echo "üîê Uploading Tailscale state..."
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo rclone copy /var/lib/tailscale/tailscaled.state ${GDRIVE_REMOTE}:${BACKUP_PATH}/system/ --progress || true
          fi

          echo "üè∑Ô∏è Creating dated marker folder for this run..."
          rclone mkdir ${GDRIVE_REMOTE}:${BACKUP_PATH}/${HOST_TAG}-${BACKUP_DATE} || true
          echo "‚úÖ Backup complete."

      # ============================================================
      # 10) Clean old dated markers (keep last 5)
      # ============================================================
      - name: üßπ Clean old dated markers on Drive
        if: always()
        run: |
          set -e
          HOST_TAG="$(hostname)"
          echo "üßæ Existing dated entries:"
          rclone lsf ${GDRIVE_REMOTE}:${BACKUP_PATH}/ | grep "^${HOST_TAG}-" | sort -r || true
          rclone lsf ${GDRIVE_REMOTE}:${BACKUP_PATH}/ | grep "^${HOST_TAG}-" | sort -r | tail -n +6 | while read -r old; do
            echo "üóëÔ∏è Removing ${old} ..."
            rclone purge ${GDRIVE_REMOTE}:${BACKUP_PATH}/${old} || true
          done
          echo "‚úÖ Cleanup complete."

      # ============================================================
      # 11) Disconnect Tailscale gracefully
      # ============================================================
      - name: üîå Disconnect Tailscale
        if: always()
        run: |
          sudo tailscale down || true
          echo "‚úÖ Tailscale disconnected."

      # ============================================================
      # 12) Final message
      # ============================================================
      - name: üéâ Backup completion notification
        if: always()
        run: |
          echo ""
          echo "üéâ ================================="
          echo "‚úÖ VPS SESSION COMPLETED"
          echo "üéâ ================================="
          echo "Start: ${START_TS}"
          echo "End  : $(date +%Y%m%d_%H%M%S)"
          echo "Drive: ${GDRIVE_REMOTE}:${BACKUP_PATH}"
