name: Persistent VPS

on:
  schedule:
    # Runs automatically every 6 hours to refresh the session.
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allows for manual triggering of the workflow from the Actions tab.

env:
  # Configuration for the backup archive.
  BACKUP_STORE: /var/backups/vps
  BACKUP_NAME: vps-backup-latest.tar.gz
  # Rclone remote and path for cloud storage.
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    # Set a generous timeout. GitHub Actions max is 6 hours (360 minutes).
    timeout-minutes: 350

    steps:
      - name: '🕸️ Checkout Code'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Initial Setup & Restore Logic
      # ------------------------------------------------------------------

      - name: '🔧 Install Core Tools (One-Time Setup)'
        run: |
          set -euo pipefail
          echo "🌐 Updating package list..."
          sudo apt-get update -qq

          echo "🐳 Installing Docker from official script..."
          curl -fsSL https://get.docker.com | sudo sh

          echo "☁️ Installing Rclone from official script..."
          curl -fsSL https://rclone.org/install.sh | sudo bash
          
          echo "📦 Installing other necessary system tools..."
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            tar gzip psmisc screen openssh-server mariadb-server \
            mariadb-client wget unzip htop nano vim git net-tools tmate
          
          echo "✅ All required tools are installed."

      - name: '🛠️ Configure Rclone'
        run: |
          set -euo pipefail
          echo "🔐 Setting up rclone configuration from secrets..."
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "❌ ERROR: RCLONE_CONFIG secret is missing or empty!" >&2
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "✅ Rclone configured successfully."

      - name: '♻️ Restore from Backup OR Initialize'
        id: restore
        run: |
          set -euo pipefail
          echo "🔎 Checking for existing backup on MEGA..."
          
          if rclone ls "${MEGA_REMOTE}/${BACKUP_NAME}" >/dev/null 2>&1; then
            echo "✅ Backup found! Preparing to download and restore..."
            mkdir -p /tmp/restore
            
            echo "📥 Downloading backup from ${MEGA_REMOTE}..."
            rclone copy "${MEGA_REMOTE}/${BACKUP_NAME}" /tmp/restore/ --progress --retries 5
            
            echo "📂 Restoring system state from backup..."
            sudo tar -xzpf "/tmp/restore/${BACKUP_NAME}" -C /
            
            rm -f "/tmp/restore/${BACKUP_NAME}"
            echo "✅ System restore complete."
            echo "is_new_install=false" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No backup found. The system will be set up as a fresh installation."
            echo "is_new_install=true" >> $GITHUB_OUTPUT
          fi

      # ------------------------------------------------------------------
      # Part 2: Fresh Installation Steps (Conditional)
      # ------------------------------------------------------------------

      - name: '🗄️ Configure MariaDB (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "🗄️ Performing fresh configuration of MariaDB..."
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          
          echo "🔒 Securing MariaDB installation..."
          if [[ -z "${{ secrets.DB_ROOT_PASSWORD || '' }}" ]]; then
             echo "❌ ERROR: DB_ROOT_PASSWORD secret is not set for fresh install!" >&2
             exit 1
          fi
          
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('${{ secrets.DB_ROOT_PASSWORD }}');"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "DELETE FROM mysql.user WHERE User='';"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "DROP DATABASE IF EXISTS test;"
          sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "FLUSH PRIVILEGES;"
          echo "✅ MariaDB security configuration complete."

      - name: '👤 Initial User & Hostname Setup (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "👤 Setting up user, password, and hostname..."
          sudo useradd -m -s /bin/bash jacky || echo "User 'jacky' already exists, skipping."
          echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
          sudo usermod -aG sudo jacky
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          sudo hostnamectl set-hostname github-vps
          echo "127.0.1.1 github-vps" | sudo tee -a /etc/hosts
          echo "✅ System user and hostname configured."

      - name: '📦 Install Aapanel (Fresh Install Only)'
        if: steps.restore.outputs.is_new_install == 'true'
        run: |
          set -euo pipefail
          echo "📥 Downloading and installing Aapanel..."
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
          timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || echo "⚠️ Aapanel installation timed out or failed. Check logs."
          
          if command -v bt >/dev/null 2>&1; then
            echo "✅ Aapanel installed. Setting default credentials..."
            sleep 5
            echo "Jacky" | sudo bt 6
            echo "spidey" | sudo bt 5
          fi

      # ------------------------------------------------------------------
      # Part 3: Service Start & Session (Runs on every execution)
      # ------------------------------------------------------------------

      - name: '🚀 Start All Services'
        run: |
          set -euo pipefail
          echo "🔄 Configuring and starting all system services..."
          
          echo "Reloading systemd manager configuration..."
          sudo systemctl daemon-reload
          
          sudo systemctl enable ssh mariadb docker
          sudo systemctl start ssh
          sudo systemctl start mariadb
          sudo systemctl start docker
          
          if command -v bt >/dev/null 2>&1; then
            echo "🎛️ Starting Aapanel..."
            sudo bt start
          fi
          
          echo "📊 Final Service Status Check:"
          for service in ssh mariadb docker; do
            if systemctl is-active --quiet $service; then
              echo "  ✅ $service is active."
            else
              echo "  ❌ $service is INACTIVE."
            fi
          done

      - name: '🔗 Configure Remote Access (Tailscale & tmate)'
        run: |
          set -euo pipefail
          echo "🕸️ Setting up Tailscale VPN for secure access..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "❌ ERROR: TAILSCALE_AUTHKEY secret is missing!" >&2
            exit 1
          fi
          
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes
          
          echo "💬 Starting tmate for emergency SSH access..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          
          echo "================================================"
          echo "🎉          VPS IS READY FOR CONNECTION         🎉"
          echo "================================================"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔑 tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if command -v bt >/dev/null 2>&1; then
            echo ""
            echo "🎛️ Aapanel Panel Details:"
            sudo bt default || true
          fi
          echo "================================================"

      - name: '⏳ Maintain VPS Session'
        run: |
          echo "🖥️ VPS session is running. This step will time out after ~5.5 hours."
          echo "To stop the session gracefully and trigger the backup early, create a file: touch /tmp/stop"
          
          end_time=$((SECONDS + 19800))
          
          while [ $SECONDS -lt $end_time ]; do
            if [ -f "/tmp/stop" ]; then
              echo "✅ Graceful shutdown signal detected. Exiting session."
              rm -f "/tmp/stop"
              exit 0
            fi
            sleep 60
          done
          
          echo "⏰ Session duration reached. Proceeding to backup."

      # ------------------------------------------------------------------
      # Part 4: Backup Creation (Always runs at the end)
      # ------------------------------------------------------------------
      - name: '📦 Create Full System Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "📦 Creating comprehensive system backup..."
          sudo mkdir -p "${{ env.BACKUP_STORE }}"
          
          echo "🛑 Stopping services for a clean, consistent backup..."
          if command -v bt >/dev/null 2>&1; then sudo bt stop; fi
          sudo systemctl stop ssh mariadb tailscaled docker
          sleep 5
          
          BACKUP_PATHS="
            /etc/
            /home/
            /root/
            /var/lib/docker/
            /var/lib/mysql/
            /var/www/
            /var/spool/cron/
            /var/lib/dpkg/
            /var/lib/tailscale/
            /opt/
            /srv/
            /www/
          "
          
          echo "Creating optimized backup archive..."
          # The '-v' flag provides a verbose output, showing files as they are added.
          sudo tar -czvpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --warning=no-file-changed \
            --exclude='*.log*' --exclude='*.pid' --exclude='*.sock' \
            $BACKUP_PATHS
          
          BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
          echo "✅ Optimized backup created successfully. Size: $BACKUP_SIZE"

      - name: '☁️ Upload Backup to Cloud'
        if: always()
        run: |
          set -euo pipefail
          echo "🚀 Uploading backup to MEGA..."
          if [[ ! -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" ]]; then
            echo "❌ No backup file found at ${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}. Skipping upload." >&2
            exit 1
          fi
          
          echo "🗑️ Removing old backup from MEGA..."
          rclone delete "${MEGA_REMOTE}/${BACKUP_NAME}" || echo "No old backup to remove, proceeding."

          echo "📤 Uploading new backup..."
          rclone copy "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" "${{ env.MEGA_REMOTE }}" --progress
          
          echo "✅ Upload complete."
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"

      - name: '📋 Final Status Report'
        if: always()
        run: |
          echo "============================================="
          echo "         ✅ VPS SESSION COMPLETE ✅"
          echo "============================================="
          echo "Job Status: ${{ job.status }}"
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "The session completed normally and the backup was successful."
          else
            echo "The session failed or was cancelled. A backup was still attempted."
          fi
          echo "============================================="
