name: VPS Session (Artifacts, Cancel-Safe)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"    # every 6 hours

jobs:
  vps-session:
    runs-on: ubuntu-22.04
    timeout-minutes: 370

    steps:
      # ------------------------------------------------------------
      # 0) Checkout (so artifact downloads have a workspace)
      # ------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------
      # 1) Prep environment & base tools
      # ------------------------------------------------------------
      - name: Install base packages
        run: |
          set -e
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            curl ca-certificates unzip zip tar gzip jq \
            neofetch net-tools tmate

          # timestamp variables
          TS="$(date +%Y%m%d_%H%M%S)"
          echo "STAMP=${TS}" >> "$GITHUB_ENV"
          echo "START_UNIX=$(date -u +%s)" >> "$GITHUB_ENV"

      # ------------------------------------------------------------
      # 2) Create host user FIRST
      # ------------------------------------------------------------
      - name: Create host user (jacky)
        run: |
          set -e
          sudo useradd -m -s /bin/bash jacky || true
          echo 'jacky:root' | sudo chpasswd
          sudo mkdir -p /home/jacky/{projects,downloads,scripts}
          sudo chown -R jacky:jacky /home/jacky
          echo "✅ User 'jacky' created and ready"

      # ------------------------------------------------------------
      # 3) Try to restore previous VPS backup from artifacts
      #    (these artifacts will contain tarballs we created earlier)
      # ------------------------------------------------------------
      - name: Download VPS backup artifact (if any)
        uses: actions/download-artifact@v4
        with:
          name: vps-backup-latest
          path: restore
        continue-on-error: true

      - name: Restore VPS from tarballs (if present)
        run: |
          set -e
          if [ -d restore ]; then
            echo "📦 Found artifact folder 'restore'. Checking tarballs..."
            sudo mkdir -p /tmp/restore
            # etc
            if ls restore/etc_*.tar.gz >/dev/null 2>&1; then
              echo "♻️ Restoring /etc ..."
              for f in restore/etc_*.tar.gz; do
                sudo tar -xzf "$f" -C /
              done
            fi
            # home/jacky only (avoid runner home)
            if ls restore/home-jacky_*.tar.gz >/dev/null 2>&1; then
              echo "♻️ Restoring /home/jacky ..."
              for f in restore/home-jacky_*.tar.gz; do
                sudo tar -xzf "$f" -C /
              done
              sudo chown -R jacky:jacky /home/jacky || true
            fi
            # web root
            if ls restore/www_*.tar.gz >/dev/null 2>&1; then
              echo "♻️ Restoring /var/www ..."
              sudo mkdir -p /var/www
              for f in restore/www_*.tar.gz; do
                sudo tar -xzf "$f" -C /
              done
            fi
            echo "✅ Restoration step completed"
          else
            echo "ℹ️ No previous 'vps-backup-latest' artifact found. Fresh session."
          fi

      # ------------------------------------------------------------
      # 4) Restore Tailscale state (if it exists)
      # ------------------------------------------------------------
      - name: Download Tailscale state (if any)
        uses: actions/download-artifact@v4
        with:
          name: tailscale-state
          path: ts-restore
        continue-on-error: true

      - name: Stage restored Tailscale state (do not fail if missing)
        run: |
          set -e
          sudo mkdir -p /var/lib/tailscale
          if [ -f ts-restore/tailscaled.state ]; then
            echo "♻️ Tailscale state found in artifact. Staging it..."
            # Put it in place with correct perms
            sudo cp ts-restore/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo chown root:root /var/lib/tailscale/tailscaled.state
            sudo chmod 600 /var/lib/tailscale/tailscaled.state
            echo "TS_STATE=restored" >> "$GITHUB_ENV"
          else
            echo "ℹ️ No previous Tailscale state found."
            echo "TS_STATE=absent" >> "$GITHUB_ENV"
          fi

      # ------------------------------------------------------------
      # 5) Install & start Tailscale (state will be used if present)
      # ------------------------------------------------------------
      - name: Install & connect Tailscale
        run: |
          set -e
          if [ -z "${{ secrets.TAILSCALE_AUTHKEY }}" ]; then
            echo "❌ Missing secrets.TAILSCALE_AUTHKEY"; exit 1
          fi

          # Install
          curl -fsSL https://tailscale.com/install.sh | sh

          # Ensure daemon is running (this also creates /var/lib/tailscale)
          sudo systemctl enable --now tailscaled
          sleep 4

          # Connect; if state exists, tailscale will reuse it
          HOST="gh-${{ github.run_id }}"
          sudo tailscale up \
            --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" \
            --hostname="${HOST}" \
            --ssh --accept-routes --accept-dns || true

          echo "Tailscale IPs:"
          sudo tailscale ip -4 || true
          sudo tailscale ip -6 || true
          # mark that daemon ran so the state file will exist later
          if sudo test -f /var/lib/tailscale/tailscaled.state; then
            echo "TS_READY=true" >> "$GITHUB_ENV"
          else
            echo "TS_READY=false" >> "$GITHUB_ENV"
          fi

      # ------------------------------------------------------------
      # 6) Show quick system info
      # ------------------------------------------------------------
      - name: System information
        run: |
          set -e
          echo "🖥️ System:"
          neofetch --stdout || true
          echo "🌐 Network:"
          ip -4 addr show | grep inet || true
          echo "💾 Disk:"
          df -h / || true

      # ------------------------------------------------------------
      # 7) Keep session alive (~6h) with a cancel-safe backup trap
      # ------------------------------------------------------------
      - name: Keep session alive (~6h)
        run: |
          set -Eeuo pipefail

          make_backup() {
            echo "⏳ Creating final backup (cancel-safe)..."
            sudo mkdir -p /tmp/backup /tmp/backup/tailscale

            # tar /etc (root-only)
            echo "🗜️  Packing /etc ..."
            sudo tar --numeric-owner -czf /tmp/backup/etc_${STAMP}.tar.gz -C / etc \
              --exclude=proc --exclude=sys --exclude=dev || true
            # tar /home/jacky only (avoid runner’s home)
            if [ -d /home/jacky ]; then
              echo "🗜️  Packing /home/jacky ..."
              sudo tar --numeric-owner -czf /tmp/backup/home-jacky_${STAMP}.tar.gz -C / home/jacky || true
            fi
            # tar /var/www if exists
            if [ -d /var/www ]; then
              echo "🗜️  Packing /var/www ..."
              sudo tar --numeric-owner -czf /tmp/backup/www_${STAMP}.tar.gz -C / var/www || true
            fi

            # Tailscale state (only if present)
            if sudo test -f /var/lib/tailscale/tailscaled.state; then
              echo "🧩 Saving Tailscale state..."
              sudo cp /var/lib/tailscale/tailscaled.state /tmp/backup/tailscale/tailscaled.state
              sudo tailscale status --json > /tmp/backup/tailscale/status.json 2>/dev/null || true
            else
              echo "ℹ️  No Tailscale state file to back up."
            fi

            # Session summary
            cat > /tmp/backup/session_summary.txt <<EOF
VPS Session Summary
===================
Start (UTC): $(date -u -d @${START_UNIX} +"%F %T")
End   (UTC): $(date -u +"%F %T")
Run ID     : ${{ github.run_id }}
Run Number : ${{ github.run_number }}
TS State   : ${{ env.TS_STATE }}
EOF

            # ensure uploadable by runner
            sudo chown -R $USER:$USER /tmp/backup
            echo "✅ Final backup prepared at /tmp/backup"
            ls -lh /tmp/backup || true
          }

          trap make_backup EXIT

          echo "🔗 Starting tmate (read-only + web)…"
          sudo tmate -F &
          # 6 hours sleep (21600s)
          sleep 21600

      # ------------------------------------------------------------
      # 8) Upload artifacts (always – works on cancel too)
      # ------------------------------------------------------------
      - name: Upload VPS backup (tarballs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup-latest
          path: /tmp/backup/*
          retention-days: 30
          if-no-files-found: warn
          compression-level: 6
          overwrite: true

      - name: Upload Tailscale state (separate)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-state
          path: /tmp/backup/tailscale/
          retention-days: 30
          if-no-files-found: ignore
          overwrite: true

      # ------------------------------------------------------------
      # 9) Final summary
      # ------------------------------------------------------------
      - name: Completion summary
        if: always()
        run: |
          echo ""
          echo "🎉 ================================================"
          echo "✅ VPS SESSION COMPLETED (or Cancelled — Backup Saved)"
          echo "🎉 ================================================"
          echo "📦 Artifacts uploaded:"
          echo "  • vps-backup-latest  (contains etc/home-jacky/www tarballs + summary)"
          echo "  • tailscale-state    (contains tailscaled.state + status.json if present)"
          echo ""
          echo "ℹ️ GitHub UI will provide a ZIP for each artifact; inside you’ll find the .tar.gz files."
