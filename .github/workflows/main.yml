# -----------------------------------------------------------------------------------
# Persistent VPS (Immortal Edition)
#
# v10.3 - Fixed backup path issues and improved error handling
# -----------------------------------------------------------------------------------

name: Persistent VPS (Immortal Edition)

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      force_fresh_install:
        description: 'Force fresh installation (ignore backups)'
        required: false
        default: 'false'
        type: boolean
      backup_retention_days:
        description: 'Backup retention days'
        required: false
        default: '7'
        type: string

env:
  BACKUP_STORE: /mnt/vps-backups
  INCREMENTAL_STORE: /mnt/vps-incremental
  FULL_BACKUP_NAME: vps-full-system-backup.tar.zst
  INCREMENTAL_BACKUP_NAME: vps-incremental-backup.tar.zst
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 235
    permissions:
      contents: read
      actions: write

    steps:
      - name: 'üöÄ Initialize Environment'
        uses: actions/checkout@v4

      - name: 'üîß Install Enhanced Toolchain'
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            zstd pv rsync jq curl wget psmisc screen tmate \
            htop fail2ban ufw python3-pip
          curl -fsSL https://rclone.org/install.sh | sudo bash
          pip3 install --user psutil requests
          echo "‚úÖ Enhanced toolchain installed."

      - name: 'üîê Configure Rclone'
        run: |
          set -euo pipefail
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "‚ùå CRITICAL: RCLONE_CONFIG secret is missing!" >&2; exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "‚úÖ Rclone configured."

      - name: 'üîç Advanced Backup Discovery'
        id: discover_backup
        run: |
          set -euo pipefail
          echo "üîé Performing advanced backup discovery..."
          BACKUP_FOUND=false; BACKUP_SOURCE="github_artifact"; BACKUP_URL=""; BACKUP_TYPE=""
          if [[ "${{ github.event.inputs.force_fresh_install || 'false' }}" == "true" ]]; then
            echo "üîÑ Fresh installation forced."; echo "backup_found=false" >> $GITHUB_OUTPUT; exit 0
          fi
          WORKFLOW_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
            | jq -r '.workflows[] | select(.name == "Persistent VPS (Immortal Edition)") | .id' | head -1)
          if [[ -n "$WORKFLOW_ID" && "$WORKFLOW_ID" != "null" ]]; then
            LATEST_RUN_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${WORKFLOW_ID}/runs?status=success&per_page=5" \
              | jq -r '.workflow_runs[] | select(.id != ${{ github.run_id }}) | .id' | head -1)
            if [[ -n "$LATEST_RUN_ID" && "$LATEST_RUN_ID" != "null" ]]; then
              ARTIFACTS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${LATEST_RUN_ID}/artifacts")
              FULL_ARTIFACT_ID=$(echo "$ARTIFACTS_JSON" | jq -r ".artifacts[] | select(.name == \"${{ env.FULL_BACKUP_NAME }}\") | .id")
              if [[ -n "$FULL_ARTIFACT_ID" && "$FULL_ARTIFACT_ID" != "null" ]]; then
                BACKUP_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${FULL_ARTIFACT_ID}/zip"; BACKUP_TYPE="full"; BACKUP_FOUND=true
              else
                INCR_ARTIFACT_ID=$(echo "$ARTIFACTS_JSON" | jq -r ".artifacts[] | select(.name == \"${{ env.INCREMENTAL_BACKUP_NAME }}\") | .id")
                if [[ -n "$INCR_ARTIFACT_ID" && "$INCR_ARTIFACT_ID" != "null" ]]; then
                  BACKUP_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${INCR_ARTIFACT_ID}/zip"; BACKUP_TYPE="incremental"; BACKUP_FOUND=true
                fi
              fi
            fi
          fi
          if [[ "$BACKUP_FOUND" == "false" ]]; then
            if rclone ls "${MEGA_REMOTE}/full_backup_link.txt" >/dev/null 2>&1; then
              BACKUP_URL=$(rclone cat "${MEGA_REMOTE}/full_backup_link.txt"); BACKUP_TYPE="full"; BACKUP_SOURCE="mega_link"; BACKUP_FOUND=true
            elif rclone ls "${MEGA_REMOTE}/incremental_backup_link.txt" >/dev/null 2>&1; then
              BACKUP_URL=$(rclone cat "${MEGA_REMOTE}/incremental_backup_link.txt"); BACKUP_TYPE="incremental"; BACKUP_SOURCE="mega_link"; BACKUP_FOUND=true
            fi
          fi
          echo "backup_found=$BACKUP_FOUND" >> $GITHUB_OUTPUT; echo "backup_source=$BACKUP_SOURCE" >> $GITHUB_OUTPUT
          echo "backup_url=$BACKUP_URL" >> $GITHUB_OUTPUT; echo "backup_type=$BACKUP_TYPE" >> $GITHUB_OUTPUT
          if [[ "$BACKUP_FOUND" == "true" ]]; then echo "‚úÖ Backup Found (Type: $BACKUP_TYPE, Source: $BACKUP_SOURCE)"; else echo "‚ÑπÔ∏è No backups found."; fi

      - name: 'üîÑ Advanced System Restoration'
        if: steps.discover_backup.outputs.backup_found == 'true'
        run: |
          set -euo pipefail
          echo "üöÄ Beginning system restoration..."
          sudo mkdir -p /mnt/restore; cd /mnt/restore
          timeout 600 curl --retry 5 -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ steps.discover_backup.outputs.backup_url }}" -o "backup.zip"
          sudo unzip -q backup.zip
          BACKUP_FILE=$(find . -name "*.tar.zst" -type f | head -1)
          if [[ ! -f "$BACKUP_FILE" ]]; then echo "‚ùå No backup file found!" >&2; exit 1; fi
          if ! zstd -t "$BACKUP_FILE"; then echo "‚ùå Backup file is corrupted!" >&2; exit 1; fi
          echo "‚úÖ Backup verified (Size: $(du -h "$BACKUP_FILE" | cut -f1)). Restoring..."
          pv "$BACKUP_FILE" | sudo tar -I zstd -xpf - -C /
          sudo rm -rf /mnt/restore
          echo "‚úÖ System restoration completed."

      - name: 'üõ†Ô∏è Post-Restoration System Repair'
        if: steps.discover_backup.outputs.backup_found == 'true'
        run: |
          set -euo pipefail
          echo "üîß Performing post-restoration system repair..."
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --reinstall docker-ce mariadb-server openssh-server ufw fail2ban
          if [[ -d "/var/lib/mysql" ]]; then sudo chown -R mysql:mysql /var/lib/mysql; fi
          sudo systemctl daemon-reload
          sudo systemctl restart docker mariadb ssh
          if [[ -f "/www/server/panel/init.sh" ]]; then sudo /www/server/panel/init.sh restart; fi
          echo "‚úÖ System repair completed."

      - name: 'üÜï Enhanced Fresh Installation'
        if: steps.discover_backup.outputs.backup_found == 'false'
        run: |
          set -euo pipefail
          echo "üöÄ Performing enhanced fresh installation..."
          curl -fsSL https://get.docker.com | sudo sh
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server fail2ban ufw openssh-server
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
          timeout 1200 bash -c "printf 'y\\nyes\\n' | sudo bash /tmp/install.sh" || echo "‚ö†Ô∏è Aapanel install timed out."
          echo "‚úÖ Fresh installation completed."

      - name: 'üîê Security & User Setup (Fresh Install)'
        if: steps.discover_backup.outputs.backup_found == 'false'
        run: |
          set -euo pipefail
          echo "üîê Setting up security and user credentials..."
          sudo useradd -m -s /bin/bash -G sudo,docker jacky 2>/dev/null || true
          echo "jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd
          echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('${{ secrets.DB_ROOT_PASSWORD }}'); FLUSH PRIVILEGES;"
          if [[ -f "/www/server/panel/init.sh" ]]; then
            echo "Jacky" | sudo bt 6; echo "spidey" | sudo bt 5
          fi
          sudo ufw --force reset; sudo ufw default deny incoming; sudo ufw default allow outgoing
          sudo ufw allow ssh; sudo ufw allow http; sudo ufw allow https; sudo ufw allow 8888/tcp
          sudo ufw --force enable
          sudo systemctl enable --now fail2ban ssh mariadb docker
          echo "‚úÖ Security setup complete."

      - name: 'üåê Configure Network Access'
        run: |
          set -euo pipefail
          echo "üåê Setting up network access..."
          curl -fsSL https://tailscale.com/install.sh | sh
          if [ -f "/var/lib/tailscale/tailscaled.state" ]; then
            sudo systemctl enable --now tailscaled; sudo tailscale up --accept-routes
          else
            sudo systemctl enable --now tailscaled
            sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps-immortal --reset --accept-routes
          fi
          tmate -S /tmp/tmate.sock new-session -d; tmate -S /tmp/tmate.sock wait tmate-ready
          echo "================================================="
          echo "üéâ      IMMORTAL VPS IS READY FOR CONNECTION      üéâ"
          echo "================================================="
          echo "üåê Tailscale IP: $(sudo tailscale ip -4)"
          echo "üîë tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          if [[ -f "/www/server/panel/init.sh" ]]; then sudo bt default; fi
          echo "================================================="

      - name: '‚è≥ Enhanced Session Maintenance'
        run: |
          set -euo pipefail
          echo "‚è≥ Starting enhanced session maintenance..."
          log_message() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          cat << 'EOF' > /tmp/session_keeper.sh
          #!/bin/bash
          log_message() { echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"; }
          while true; do
              for service in ssh docker mariadb tailscaled; do
                  if systemctl is-enabled --quiet "$service" 2>/dev/null && ! systemctl is-active --quiet "$service"; then
                      log_message "‚ö†Ô∏è $service service down, attempting restart..."
                      sudo systemctl restart "$service"
                  fi
              done
              if ! tmate -S /tmp/tmate.sock list-sessions >/dev/null 2>&1; then
                  log_message "‚ö†Ô∏è tmate session lost, attempting restart..."
                  tmate -S /tmp/tmate.sock new-session -d
              fi
              sleep 300
          done
          EOF
          chmod +x /tmp/session_keeper.sh
          nohup bash /tmp/session_keeper.sh > /tmp/session_keeper.log 2>&1 &
          
          END_TIME=$((SECONDS + 13800))
          log_message "üñ•Ô∏è Session active. To shut down early, run: touch /tmp/stop"
          
          while [ $SECONDS -lt $END_TIME ]; do
            if [ -f "/tmp/stop" ]; then
              log_message "‚úÖ Graceful shutdown signal detected. Proceeding to backup stage."
              sudo rm -f "/tmp/stop"
              break
            fi
            sleep 60
          done
          log_message "‚è∞ Session time concluded. Proceeding to backup."

      - name: 'üîÑ Create Intelligent Multi-Layer Backup'
        id: create_backup
        if: always()
        run: |
          set -euo pipefail
          echo "üì¶ Creating intelligent backup..."
          sudo mkdir -p "${{ env.BACKUP_STORE }}" "${{ env.INCREMENTAL_STORE }}"
          BACKUP_STRATEGY="full"
          if [[ "${{ steps.discover_backup.outputs.backup_found }}" == "true" ]]; then BACKUP_STRATEGY="incremental"; fi
          
          # Stop services for consistent backup
          if [[ -f "/www/server/panel/init.sh" ]]; then 
            sudo /www/server/panel/init.sh stop || echo "‚ö†Ô∏è Could not stop aaPanel (may already be stopped)"
          fi
          sudo systemctl stop mariadb docker tailscaled || echo "‚ö†Ô∏è Could not stop some services"
          
          if [[ "$BACKUP_STRATEGY" == "full" ]]; then
            BACKUP_FILE="${{ env.BACKUP_STORE }}/${{ env.FULL_BACKUP_NAME }}"
            ARTIFACT_NAME="${{ env.FULL_BACKUP_NAME }}"
            sudo tar -cf - --absolute-names --directory=/ --exclude=./proc --exclude=./sys --exclude=./dev --exclude=./run --exclude=./mnt --exclude=./tmp --exclude=./home/runner --exclude=${{ env.BACKUP_STORE }} . | zstd -T0 -3 > "$BACKUP_FILE"
          else
            BACKUP_FILE="${{ env.INCREMENTAL_STORE }}/${{ env.INCREMENTAL_BACKUP_NAME }}"
            ARTIFACT_NAME="${{ env.INCREMENTAL_BACKUP_NAME }}"
            sudo tar -cf - --absolute-names --directory=/ --exclude=./proc --exclude=./sys --exclude=./dev --exclude=./run --exclude=./mnt --exclude=./tmp --exclude=./home/runner --exclude=${{ env.BACKUP_STORE }} --newer-mtime='4 hours ago' . | zstd -T0 -3 > "$BACKUP_FILE"
          fi
          
          # Verify backup was created
          if [[ ! -f "$BACKUP_FILE" ]]; then
            echo "‚ùå Backup creation failed!" >&2
            # Create a minimal backup to avoid complete failure
            sudo tar -cf - /etc/hosts /etc/passwd /etc/group | zstd -T0 -3 > "$BACKUP_FILE" || \
            (echo "‚ùå Emergency backup also failed!" >&2; exit 1)
            echo "‚ö†Ô∏è Created emergency minimal backup"
          fi
          
          echo "‚úÖ Backup created (Size: $(du -h "$BACKUP_FILE" | cut -f1))"
          echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "backup_strategy=$BACKUP_STRATEGY" >> $GITHUB_OUTPUT

      - name: '‚¨ÜÔ∏è Upload Backup as Artifact'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_backup.outputs.artifact_name }}
          path: ${{ steps.create_backup.outputs.backup_file }}
          retention-days: ${{ github.event.inputs.backup_retention_days || '7' }}
          if-no-files-found: error

      - name: 'üîó Store Backup Link in MEGA'
        if: always()
        run: |
          set -euo pipefail
          echo "üîó Storing backup link in MEGA..."
          sleep 45
          ARTIFACT_NAME="${{ steps.create_backup.outputs.artifact_name }}"
          BACKUP_STRATEGY="${{ steps.create_backup.outputs.backup_strategy }}"
          ARTIFACT_ID=""
          
          # Try multiple times to get artifact ID
          for attempt in {1..15}; do
            echo "Attempt $attempt to retrieve artifact ID..."
            ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq -r ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .id")
            
            if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then 
              echo "‚úÖ Found artifact ID: $ARTIFACT_ID"
              break
            fi
            
            if [[ $attempt -eq 15 ]]; then
              echo "‚ùå Failed to retrieve artifact ID after 15 attempts!" >&2
              # Fallback: upload directly to MEGA
              echo "üîÑ Using fallback: uploading backup directly to MEGA..."
              BACKUP_FILE="${{ steps.create_backup.outputs.backup_file }}"
              rclone copy "$BACKUP_FILE" "${MEGA_REMOTE}/direct-backups/" || \
                (echo "‚ùå Direct upload to MEGA also failed!" >&2; exit 1)
              echo "‚úÖ Backup uploaded directly to MEGA as fallback."
              exit 0
            fi
            
            sleep 30
          done
          
          ARTIFACT_LINK="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
          
          if [[ "$BACKUP_STRATEGY" == "full" ]]; then
            REMOTE_LINK_FILE="full_backup_link.txt"
            rclone delete "${MEGA_REMOTE}/incremental_backup_link.txt" || true
          else
            REMOTE_LINK_FILE="incremental_backup_link.txt"
          fi
          
          echo "$ARTIFACT_LINK" | rclone rcat "${MEGA_REMOTE}/${REMOTE_LINK_FILE}"
          echo "‚úÖ New '$BACKUP_STRATEGY' backup link stored in MEGA."

      - name: 'üßπ Cleanup'
        if: always()
        run: |
          set -euo pipefail
          echo "üßπ Cleaning up temporary files..."
          sudo rm -rf /mnt/restore /tmp/session_keeper.sh /tmp/session_keeper.log /tmp/tmate.sock || true
          echo "‚úÖ Cleanup completed."
