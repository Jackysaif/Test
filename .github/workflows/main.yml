name: Persistent VPS with Backup & Restore

on:
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: "0 */6 * * *"  # every 6 hours

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y unzip curl tmate
          curl -Of https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip -a rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/
          sudo chown root:root /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          rclone version

      - name: Create restricted user
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            echo "✅ User jacky created with password 'root'"
          else
            echo "ℹ️ User jacky already exists"
          fi

      - name: Setup rclone with MEGA
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [mega]
          type = mega
          user = rajeeshsksbx7@gmail.com
          pass = EfABK_S7bUsZtacq8JlaxYackzNv7KmZAQ1mpA
          EOF

          echo "🔑 MEGA rclone configured successfully!"
          echo "📂 Listing MEGA remote root to confirm:"
          rclone ls mega:/ || echo "⚠️ Could not list MEGA (maybe empty?)"

      # === Restore Section ===
      - name: Download latest backup from MEGA
        run: |
          mkdir -p restore
          if rclone copy mega:/vps-backup/latest.tar.gz restore/ --progress; then
            echo "✅ Backup archive found"
          else
            echo "ℹ️ No previous backup found"
          fi

      - name: Restore backup if exists
        run: |
          if [ -f restore/latest.tar.gz ]; then
            echo "📦 Restoring backup..."
            sudo tar -xzf restore/latest.tar.gz -C /
            echo "✅ Restore complete."
          else
            echo "⚠️ No backup to restore."
          fi

      # === Tailscale Section ===
      - name: Setup Tailscale (restore state if available)
        run: |
          set -x
          curl -fsSL https://tailscale.com/install.sh | sh
          
          # Try to restore previous state from MEGA
          mkdir -p backup
          rclone copy mega:/vps-backup/tailscale-initial.tar.gz backup/ || true
          
          if [ -f backup/tailscale-initial.tar.gz ]; then
            echo "🔄 Found previous Tailscale state, restoring..."
            tar -xzf backup/tailscale-initial.tar.gz -C backup
            sudo mkdir -p /var/lib/tailscale
            sudo cp backup/tailscaled.state /var/lib/tailscale/tailscaled.state
            sudo tailscaled --state=/var/lib/tailscale/tailscaled.state &
            sleep 5
            sudo tailscale up --ssh --hostname github-vps
            echo "✅ Restored Tailscale state and started"
          else
            echo "🆕 No previous Tailscale state, setting up fresh..."
            sudo tailscaled --state=/var/lib/tailscale/tailscaled.state &
            sleep 5
            sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --ssh --hostname github-vps
            echo "✅ Fresh Tailscale setup complete"
            
            # Backup new state immediately
            sudo cp /var/lib/tailscale/tailscaled.state backup/
            sudo tar -czf backup/tailscale-initial.tar.gz -C backup tailscaled.state
            rclone copy backup/tailscale-initial.tar.gz mega:/vps-backup --progress
            echo "☁️ New Tailscale state backed up"
          fi
          
          echo "🌐 Tailscale IP: $(tailscale ip -4)"
          echo "👤 Username: jacky"
          echo "🔑 Password: root"

      # === Tmate Session ===
      - name: Start Tmate session (keep VPS alive)
        run: |
          echo "🔗 Starting tmate session..."
          tmate -F -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "🔑 SSH connection string:"
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
          echo "🕒 VPS will stay alive for 21600s (6 hours)"
          sleep 21600

      # === Backup Section (Only on dispatch or cancel) ===
      - name: Backup VPS data
        if: github.event_name == 'workflow_dispatch'
        run: |
          mkdir -p backup
          echo "📦 Backing up user jacky home directory..."
          sudo tar --exclude='*.tar.gz' -czf backup/jacky-home.tar.gz /home/jacky

          if [ -d /www/server ]; then
            echo "📦 Backing up aaPanel..."
            sudo tar -czf backup/aapanel.tar.gz /www/server
          fi

          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "📦 Backing up Tailscale state..."
            sudo cp /var/lib/tailscale/tailscaled.state backup/
          fi

          tar -czf latest.tar.gz -C backup .
          rclone copy latest.tar.gz mega:/vps-backup --progress
          echo "✅ Backup uploaded to MEGA"

      - name: Final backup on cancel
        if: cancelled()
        run: |
          echo "⚠️ Workflow cancelled, saving backup..."
          mkdir -p backup
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            sudo cp /var/lib/tailscale/tailscaled.state backup/
          fi
          BACKUP_FILE="cancelled-$(date +%s).tar.gz"
          tar -czf $BACKUP_FILE -C backup .
          rclone copy $BACKUP_FILE mega:/vps-backup --progress
