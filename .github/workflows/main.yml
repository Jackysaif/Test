# -----------------------------------------------------------------------------------
# Persistent VPS (Targeted Restore Edition)
#
# v4 - This version uses a more robust "re-install, then restore data" strategy.
# It installs core applications on every run and then overlays the user data and
# configurations from a targeted backup. This avoids OS-level conflicts and is
# the most reliable method for persistence in an ephemeral environment.
# -----------------------------------------------------------------------------------

name: Persistent VPS (Targeted Restore Edition)

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

env:
  # Using /mnt for more space
  BACKUP_STORE: /mnt/vps-backups
  # This is now a targeted data backup, not a full system one
  BACKUP_NAME: vps-data-backup.tar.gz
  MEGA_REMOTE: mega:vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write

    steps:
      - name: 'üï∏Ô∏è Checkout Code'
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # Part 1: Setup and Application Installation (Runs Every Time)
      # ------------------------------------------------------------------

      - name: 'üîß Install Core Tools & Rclone'
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          curl -fsSL https://rclone.org/install.sh | sudo bash
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            tar gzip openssh-server htop nano vim git net-tools tmate jq curl psmisc screen
          echo "‚úÖ Core tools installed."

      - name: 'üõ†Ô∏è Configure Rclone'
        run: |
          set -euo pipefail
          echo "üîê Setting up rclone configuration..."
          if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
            echo "‚ùå ERROR: RCLONE_CONFIG secret is missing!" >&2
            exit 1
          fi
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          echo "‚úÖ Rclone configured successfully."

      - name: 'üîç Check for Existing Backup'
        id: check_backup
        run: |
          set -euo pipefail
          echo "üîé Checking for existing data backup..."
          if rclone ls "${MEGA_REMOTE}/${BACKUP_NAME}" >/dev/null 2>&1; then
            echo "‚úÖ Backup found in MEGA. Proceeding to restore after installation."
            echo "has_backup=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No backup found. This will be a fresh session."
            echo "has_backup=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 'üì¶ Install All Applications'
        id: install_apps
        run: |
          set -euo pipefail
          echo "üöÄ Installing all necessary applications (Docker, MariaDB, Aapanel)..."
          
          echo "üê≥ Installing Docker..."
          curl -fsSL https://get.docker.com | sudo sh

          echo "üóÑÔ∏è Installing MariaDB..."
          sudo apt-get install -y mariadb-server mariadb-client
          sudo systemctl enable mariadb
          sudo systemctl start mariadb
          
          echo "üì• Installing Aapanel..."
          curl -fsSL -o /tmp/install.sh "http://www.aapanel.com/script/install-ubuntu_6.0_en.sh"
          # The install will fail if it detects an existing installation, which is fine.
          # We care about ensuring the binaries and services are set up correctly.
          timeout 900 bash -c "printf 'y\nyes\n' | sudo bash /tmp/install.sh" || echo "‚ÑπÔ∏è Aapanel installation script finished or timed out."

          echo "‚úÖ Application installation step complete."

      # ------------------------------------------------------------------
      # Part 2: Data Restore (Conditional)
      # ------------------------------------------------------------------

      - name: '‚ôªÔ∏è Restore Data & Configurations'
        if: steps.check_backup.outputs.has_backup == 'true'
        run: |
          set -euo pipefail
          echo "üì• Downloading backup from MEGA..."
          sudo mkdir -p /mnt/restore
          rclone copy "${MEGA_REMOTE}/${BACKUP_NAME}" /mnt/restore/ --progress
          
          echo "üìÇ Restoring data on top of the fresh installation..."
          # This overlays your saved data onto the new install
          sudo tar -xzpf "/mnt/restore/${BACKUP_NAME}" -C /
          
          sudo rm -f "/mnt/restore/${BACKUP_NAME}"
          echo "‚úÖ Data restoration complete."

      # ------------------------------------------------------------------
      # Part 3: Configuration & Service Start (Runs Every Time)
      # ------------------------------------------------------------------

      - name: '‚öôÔ∏è Final Configuration and Service Start'
        run: |
          set -euo pipefail
          echo "üîÑ Applying final configurations and starting services..."
          
          # If it was a fresh install (no backup), secure MariaDB and set Aapanel creds
          if [[ "${{ steps.check_backup.outputs.has_backup }}" == "false" ]]; then
            echo "üîí Performing first-time security setup..."
            if [[ -z "${{ secrets.DB_ROOT_PASSWORD || '' }}" ]]; then
              echo "‚ùå ERROR: DB_ROOT_PASSWORD secret is not set!" >&2; exit 1
            fi
            sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED VIA mysql_native_password USING PASSWORD('${{ secrets.DB_ROOT_PASSWORD }}');"
            sudo mysql -u root -p'${{ secrets.DB_ROOT_PASSWORD }}' -e "FLUSH PRIVILEGES;"
            echo "Jacky" | sudo bt 6
            echo "spidey" | sudo bt 5
          fi

          # Always ensure correct ownership and restart services
          sudo chown -R mysql:mysql /var/lib/mysql
          sudo systemctl daemon-reload
          sudo systemctl restart mariadb
          sudo systemctl restart docker
          
          echo "üéõÔ∏è Starting Aapanel panel and services..."
          sudo bt start
          sleep 5 # Give services time to spin up
          sudo bt 1 # Start all Aapanel-managed services (Apache, PHP, etc)

          echo "üìä Final Service Status Check:"
          sudo bt status
          
      - name: 'üîó Configure Remote Access'
        run: |
          set -euo pipefail
          echo "üï∏Ô∏è Setting up Tailscale VPN..."
          if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
            echo "‚ùå ERROR: TAILSCALE_AUTHKEY is missing!" >&2; exit 1
          fi
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable --now tailscaled
          sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" --hostname=github-vps --reset --accept-routes
          
          echo "üí¨ Starting tmate..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready

          echo "================================================"
          echo "üéâ          VPS IS READY FOR CONNECTION         üéâ"
          echo "================================================"
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          echo "üîë tmate SSH:    $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo ""
          echo "üéõÔ∏è Aapanel Panel Details:"
          sudo bt default || true
          echo "================================================"

      - name: '‚è≥ Maintain Session'
        run: |
          echo "üñ•Ô∏è VPS session running. Will time out after ~5.5 hours."
          end_time=$((SECONDS + 19800))
          while [ $SECONDS -lt $end_time ]; do
            sleep 60
          done

      # ------------------------------------------------------------------
      # Part 4: Targeted Data Backup
      # ------------------------------------------------------------------
      
      - name: 'üì¶ Create Targeted Data Backup'
        if: always()
        run: |
          set -euo pipefail
          echo "üì¶ Backing up critical data and configurations..."
          sudo mkdir -p "${{ env.BACKUP_STORE }}"

          echo "üõë Stopping services for a clean backup..."
          sudo bt stop
          sudo systemctl stop mariadb docker tailscaled || true
          
          # Define all critical paths to save
          BACKUP_PATHS="
          /www
          /home
          /root
          /var/lib/mysql
          /var/lib/docker/volumes
          /var/lib/tailscale
          /etc/ssh
          "
          
          sudo tar -czpf "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" \
            --absolute-names \
            --warning=no-file-changed \
            $BACKUP_PATHS
          
          BACKUP_SIZE=$(du -h "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" | cut -f1)
          echo "‚úÖ Targeted backup created successfully. Size: $BACKUP_SIZE"

      - name: '‚òÅÔ∏è Upload Backup to Cloud'
        if: always()
        run: |
          set -euo pipefail
          echo "üöÄ Uploading backup to MEGA..."
          
          # Delete old backup and upload the new one
          rclone delete "${MEGA_REMOTE}/${BACKUP_NAME}" || echo "No old backup to remove."
          rclone copy "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}" "${MEGA_REMOTE}/" --progress
          
          echo "‚úÖ Upload complete."
          sudo rm -f "${{ env.BACKUP_STORE }}/${{ env.BACKUP_NAME }}"
