name: Persistent VPS with GitHub Release Backup

on:
  workflow_dispatch:
  workflow_call:

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1. Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y curl tmate

      # 2. Create jacky:root WITH SUDO PRIVILEGES
      - name: Create restricted user with sudo access
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            # Add jacky to sudo group
            sudo usermod -aG sudo jacky
            echo "User jacky created with password root and sudo privileges"
          else
            echo "User jacky already exists, ensuring sudo privileges..."
            sudo usermod -aG sudo jacky
          fi

      # 3. Set hostname
      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname github-vps
          echo "Hostname set to $(hostname)"

            # 4. Download latest backup from GitHub Releases with authentication
      - name: Download latest backup
        run: |
          mkdir -p restore
          # Get the latest release with authentication
          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if [ -n "$LATEST_RELEASE" ] && [ "$LATEST_RELEASE" != "null" ]; then
            echo "üì¶ Downloading backup from release: $LATEST_RELEASE"
            
            # Get all assets from the release
            ASSETS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_RELEASE")
            
            # Download each asset
            echo "$ASSETS_JSON" | grep '"name":' | cut -d'"' -f4 | while read asset_name; do
              if [[ "$asset_name" == *.tar.gz || "$asset_name" == *.list ]]; then
                echo "Downloading $asset_name..."
                asset_id=$(echo "$ASSETS_JSON" | grep -A 1 "\"name\": \"$asset_name\"" | grep '"id":' | cut -d':' -f2 | tr -d ' ,')
                
                if [ -n "$asset_id" ]; then
                  curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/octet-stream" \
                    -o "restore/$asset_name" \
                    "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
                    && echo "‚úÖ Downloaded $asset_name" \
                    || echo "‚ö†Ô∏è Failed to download $asset_name"
                fi
              fi
            done
            
          else
            echo "‚ö†Ô∏è No releases found, starting fresh"
          fi

      # 5. Restore backup if exists
      - name: Restore backup if exists
        run: |
          echo "üîÑ Restoring backup..."
          
          # Restore jacky user data (all files including hidden)
          if [ -f "restore/jacky-home-full.tar.gz" ] && file restore/jacky-home-full.tar.gz | grep -q "gzip compressed data"; then
            echo "üì¶ Restoring jacky user data (all files)..."
            sudo tar -xzf restore/jacky-home-full.tar.gz -C /
          else
            echo "‚ö†Ô∏è No jacky user data found to restore"
          fi
          
          # Restore services if they were installed
          if [ -f "restore/services-backup.tar.gz" ] && file restore/services-backup.tar.gz | grep -q "gzip compressed data"; then
            echo "üîÑ Restoring system services (Apache, MySQL, etc)..."
            sudo tar -xzf restore/services-backup.tar.gz -C /
          else
            echo "‚ö†Ô∏è No system services found to restore"
          fi
          
          # Restore system configurations
          if [ -f "restore/system-config.tar.gz" ] && file restore/system-config.tar.gz | grep -q "gzip compressed data"; then
            echo "üîÑ Restoring system configurations..."
            sudo tar -xzf restore/system-config.tar.gz -C /
          else
            echo "‚ö†Ô∏è No system configurations found to restore"
          fi
          
          # Reinstall previously installed packages
          if [ -f "restore/installed-packages.list" ]; then
            echo "üì¶ Reinstalling previous packages..."
            sudo apt-get update
            sudo dpkg --set-selections < restore/installed-packages.list
            sudo apt-get upgrade -y
            sudo apt-get dselect-upgrade -y
          else
            echo "‚ö†Ô∏è No installed packages list found to restore"
          fi
          
          echo "‚úÖ Restoration completed"

            # 5. Restore backup if exists
      - name: Restore backup if exists
        run: |
          # Download each backup file individually
          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if [ -n "$LATEST_RELEASE" ] && [ "$LATEST_RELEASE" != "null" ]; then
            echo "üì¶ Downloading backup files from release: $LATEST_RELEASE"
            
            # Download each file individually
            for file in jacky-home-full.tar.gz services-backup.tar.gz system-config.tar.gz installed-packages.list; do
              echo "Downloading $file..."
              ASSET_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_RELEASE" | \
                grep -A 1 "\"name\": \"$file\"" | grep '"id":' | cut -d':' -f2 | tr -d ' ,')
              
              if [ -n "$ASSET_ID" ]; then
                curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/octet-stream" \
                  -o "restore/$file" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID" \
                  || echo "‚ö†Ô∏è Could not download $file"
              else
                echo "‚ö†Ô∏è $file not found in release"
              fi
            done
            
            echo "‚úÖ Backup files downloaded successfully"
          else
            echo "‚ö†Ô∏è No releases found, starting fresh"
          fi
          
          # Restore from individual files
          echo "üîÑ Restoring backup..."
          
          # Restore jacky user data (all files including hidden)
          if [ -f "restore/jacky-home-full.tar.gz" ] && file restore/jacky-home-full.tar.gz | grep -q "gzip compressed data"; then
            echo "üì¶ Restoring jacky user data (all files)..."
            sudo tar -xzf restore/jacky-home-full.tar.gz -C /
          else
            echo "‚ö†Ô∏è No jacky user data found to restore"
          fi
          
          # Restore services if they were installed
          if [ -f "restore/services-backup.tar.gz" ] && file restore/services-backup.tar.gz | grep -q "gzip compressed data"; then
            echo "üîÑ Restoring system services (Apache, MySQL, etc)..."
            sudo tar -xzf restore/services-backup.tar.gz -C /
          else
            echo "‚ö†Ô∏è No system services found to restore"
          fi
          
          # Restore system configurations
          if [ -f "restore/system-config.tar.gz" ] && file restore/system-config.tar.gz | grep -q "gzip compressed data"; then
            echo "üîÑ Restoring system configurations..."
            sudo tar -xzf restore/system-config.tar.gz -C /
          else
            echo "‚ö†Ô∏è No system configurations found to restore"
          fi
          
          # Reinstall previously installed packages
          if [ -f "restore/installed-packages.list" ]; then
            echo "üì¶ Reinstalling previous packages..."
            sudo apt-get update
            sudo dpkg --set-selections < restore/installed-packages.list
            sudo apt-get upgrade -y
            sudo apt-get dselect-upgrade -y
          else
            echo "‚ö†Ô∏è No installed packages list found to restore"
          fi
          
          echo "‚úÖ Restoration completed"

      # 6. Setup Tailscale
      - name: Setup Tailscale
        run: |
          # Install using official script
          curl -fsSL https://tailscale.com/install.sh | sh
          
          # Check if we have a restored state
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "üîÑ Using existing Tailscale state with existing IP"
            sudo systemctl start tailscaled
            # Wait a moment for tailscale to initialize
            sleep 3
            echo "üéâ Connected to Tailscale with existing state!"
          else
            echo "üÜï Setting up new Tailscale connection (new IP)"
            sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname github-vps --ssh
            echo "üéâ Connected to Tailscale with new IP!"
          fi
          
          echo "IP Address: $(tailscale ip -4 || echo 'Not available yet')"
          echo "üë§ Username: jacky"
          echo "üîë Password: root"
          echo "‚úÖ Sudo access: Enabled (use 'sudo su' to become root)"
          echo "Tailscale status:"
          tailscale status || echo "Status check failed - may need more time to initialize"

      # 7. Start tmate session
      - name: Start tmate session
        run: |
          echo "üîó Starting tmate session..."
          echo "‚úÖ User jacky has sudo privileges (password: root)"
          echo "Use 'sudo su' to become root user"
          echo "Connect with: ssh $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo "Session will remain active for up to 6 hours"
          # Start tmate in foreground mode to keep the workflow running
          tmate -F -S /tmp/tmate.sock

      # 8. Backup ALL user data when session ends
      - name: Backup VPS data on session end
        if: always() && !cancelled()
        run: |
          mkdir -p backup
          
          echo "üì¶ Backing up ALL jacky user data (including hidden files)..."
          # Use --warning=no-file-changed to ignore files that change during backup
          sudo tar -czf backup/jacky-home-full.tar.gz \
            -C /home jacky \
            --exclude='*.tar.gz' \
            --exclude='.cache' \
            --warning=no-file-changed \
            . 2>/dev/null || echo "Home directory backup completed (some files may have changed)"
          
          echo "üì¶ Backing up installed packages..."
          dpkg --get-selections > backup/installed-packages.list
          
          echo "üì¶ Backing up system services (Apache, MySQL, PHP, aapanel)..."
          # Backup common web service directories with ignore-failed-read
          sudo tar -czf backup/services-backup.tar.gz \
            --ignore-failed-read \
            /etc/apache2 /etc/nginx /etc/mysql /etc/php \
            /var/www /var/lib/mysql \
            /usr/local/aapanel /opt/aapanel \
            /root/.aapanel 2>/dev/null || echo "Services backup completed"
          
          echo "üì¶ Backing up system configurations..."
          sudo tar -czf backup/system-config.tar.gz \
            --ignore-failed-read \
            /etc/ssh /etc/ssl /etc/cron.d /etc/systemd \
            /root/.ssh /home/jacky/.ssh 2>/dev/null || echo "Config backup completed"
          
          echo "üì¶ Creating final backup archive for upload..."
          # Create a temporary directory for the final upload
          mkdir -p upload
          cp backup/*.tar.gz backup/*.list upload/ 2>/dev/null || true
          echo "Backup contents:"
          ls -lh upload/

      # 9. Create GitHub Release with backup
      - name: Create GitHub Release with backup
        if: always() && !cancelled()
        run: |
          # Install GitHub CLI
          type -p gh >/dev/null || {
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
          }
          
          # Create a new release with the backup
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          cd upload
          gh release create "vps-backup-$TIMESTAMP" \
            *.tar.gz *.list \
            --title "VPS Backup $TIMESTAMP" \
            --notes "Automated VPS backup created on $(date)" \
            --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10. Backup on workflow cancellation
      - name: Backup on workflow cancellation
        if: cancelled()
        run: |
          mkdir -p backup
          echo "‚ö†Ô∏è Workflow cancelled, backing up data..."
          
          echo "üì¶ Backing up ALL jacky user data (including hidden files)..."
          sudo tar -czf backup/jacky-home-full.tar.gz \
            -C /home jacky \
            --exclude='*.tar.gz' \
            --exclude='.cache' \
            --warning=no-file-changed \
            . 2>/dev/null || echo "Home directory backup completed (some files may have changed)"
          
          echo "üì¶ Backing up installed packages..."
          dpkg --get-selections > backup/installed-packages.list
          
          echo "üì¶ Backing up system services (Apache, MySQL, PHP, aapanel)..."
          sudo tar -czf backup/services-backup.tar.gz \
            --ignore-failed-read \
            /etc/apache2 /etc/nginx /etc/mysql /etc/php \
            /var/www /var/lib/mysql \
            /usr/local/aapanel /opt/aapanel \
            /root/.aapanel 2>/dev/null || echo "Services backup completed"
          
          echo "üì¶ Backing up system configurations..."
          sudo tar -czf backup/system-config.tar.gz \
            --ignore-failed-read \
            /etc/ssh /etc/ssl /etc/cron.d /etc/systemd \
            /root/.ssh /home/jacky/.ssh 2>/dev/null || echo "Config backup completed"
          
          echo "üì¶ Preparing backup for upload..."
          mkdir -p upload
          cp backup/*.tar.gz backup/*.list upload/ 2>/dev/null || true

      # 11. Create release for cancelled backup
      - name: Create release for cancelled backup
        if: cancelled()
        run: |
          # Install GitHub CLI if not already installed
          type -p gh >/dev/null || {
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
          }
          
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          cd upload
          gh release create "vps-backup-cancelled-$TIMESTAMP" \
            *.tar.gz *.list \
            --title "VPS Backup (Cancelled) $TIMESTAMP" \
            --notes "Automated VPS backup created after cancellation on $(date)" \
            --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 12. Display session results
      - name: Display session results
        if: always()
        run: |
          if [ "${{ job.status }}" = "cancelled" ]; then
            echo "üèÅ Session was cancelled - backup uploaded to GitHub Releases"
          else
            echo "üèÅ Session ended normally - backup uploaded to GitHub Releases"
          fi
          echo "üì¶ Next session will restore from the latest release"
