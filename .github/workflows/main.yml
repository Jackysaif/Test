name: Continuous Persistent VPS

on:
  schedule:
    - cron: '0 */6 * * *'   # Every 6 hours
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Display startup info
        run: |
          echo "üöÄ VPS starting with hostname 'notfleppy'"
          echo "üë§ User: jacky | Password: root"
          echo "üîë Root password = root"

      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname notfleppy
          echo "127.0.0.1 notfleppy" | sudo tee -a /etc/hosts

      - name: Set root password
        run: |
          echo "root:root" | sudo chpasswd

      - name: Create user 'jacky'
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            sudo usermod -aG sudo jacky
            echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
          fi

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y sudo curl unzip net-tools neofetch tmate rclone

      - name: Configure rclone (Google Drive + Mega)
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [gdrive]
          type = drive
          client_id = ${{ secrets.GDRIVE_CLIENT_ID }}
          client_secret = ${{ secrets.GDRIVE_CLIENT_SECRET }}
          scope = drive
          root_folder_id = ${{ secrets.GDRIVE_ROOT_ID }}
          token = ${{ secrets.GDRIVE_TOKEN }}

          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF
          rclone listremotes || true

      - name: Restore VPS backup if available
        id: restore
        run: |
          if rclone lsf mega:vps-backup/ >/dev/null 2>&1; then
            echo "üìÇ Backup found on Mega. Restoring..."
            sudo rclone copy mega:vps-backup/ / --exclude '*/.git/*' --exclude '/.rclone.conf' --progress
            echo "‚úÖ Backup restored successfully."
            echo "backup_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ö†Ô∏è No backup found. Starting with a fresh VPS."
            echo "backup_found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Start Tailscale (restore state if exists)
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=notfleppy || true
          echo "üîó Tailscale IPv4:"
          tailscale ip -4 || echo "No IP"
          if [ "${{ steps.restore.outputs.backup_found }}" = "true" ]; then
            echo "üìÇ Restoring Tailscale state..."
            sudo rclone copy mega:vps-backup/var/lib/tailscale/ /var/lib/tailscale/ --progress || true
          else
            echo "üìÇ Backing up new Tailscale state..."
            sudo chown -R $USER:$USER /var/lib/tailscale
            rclone copy /var/lib/tailscale/tailscaled.state mega:vps-backup/var/lib/tailscale/ --progress || true
          fi

      - name: Start Tmate session
        run: |
          echo "‚ö° Starting Tmate session..."
          tmate -F new-session -d
          tmate wait tmate-ready
          echo ""
          echo "================================="
          echo "üîë SSH:  $(tmate display -p '#{tmate_ssh}')"
          echo "üåê Web:  $(tmate display -p '#{tmate_web}')"
          echo "================================="
          echo "üë§ Username: jacky | Password: root"
          echo "Keep this session alive for 6 hours."
          sleep 21600

      - name: Backup VPS on completion
        if: always()
        run: |
          echo "üíæ Backing up VPS to Mega..."
          sudo chown -R $USER:$USER /var/lib/tailscale
          rclone copy / mega:vps-backup/ --exclude '*/.git/*' --exclude '/.rclone.conf' --progress || true
          echo "‚úÖ Backup completed."

      - name: Final Backup on Cancel
        if: ${{ cancelled() }}
        run: |
          echo "‚ö†Ô∏è Workflow canceled. Final backup..."
          sudo chown -R $USER:$USER /var/lib/tailscale
          rclone copy / mega:vps-backup/ --exclude '*/.git/*' --exclude '/.rclone.conf' --progress || true
          echo "‚úÖ Final backup done."
