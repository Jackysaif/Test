name: Persistent VPS with Backup & Restore (Lightweight)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # Run every 6 hours

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # === Restore Section ===
      - name: Download latest backup
        uses: actions/download-artifact@v4
        with:
          name: vps-backup
          path: backup
        continue-on-error: true

      - name: Restore VPS data & Tailscale state
        run: |
          if ls backup/vps-backup-*.tar.gz 1>/dev/null 2>&1; then
            echo "📦 Restoring VPS data..."
            sudo tar -xzf backup/vps-backup-*.tar.gz -C / || true

            # Ensure restored files are accessible
            if [ -d /home/jacky ]; then
              sudo chown -R jacky:jacky /home/jacky
            fi

            # If root SSH keys exist, copy them to jacky
            if [ -d /root/.ssh ]; then
              sudo mkdir -p /home/jacky/.ssh
              sudo cp -a /root/.ssh/* /home/jacky/.ssh/ || true
              sudo chown -R jacky:jacky /home/jacky/.ssh
              sudo chmod 700 /home/jacky/.ssh
              sudo chmod 600 /home/jacky/.ssh/* || true
              echo "🔑 SSH keys copied to jacky"
            fi

            # Restart tailscale if state was restored
            if [ -f /var/lib/tailscale/tailscaled.state ]; then
              echo "🔄 Restoring Tailscale state..."
              sudo systemctl restart tailscaled || sudo pkill -f tailscaled || true
              sleep 3
            fi
          else
            echo "ℹ️ No previous backup found, starting fresh."
          fi

      # === Setup User & Tailscale ===
      - name: Create restricted user
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            echo "jacky ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jacky
            echo "✅ User 'jacky' created with password 'root'"
          else
            echo "jacky:root" | sudo chpasswd
            echo "✅ Password updated for existing user 'jacky'"
          fi

      - name: Install & Start Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo systemctl enable tailscaled
          sudo tailscaled &
          sleep 5
          tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname github-vps --ssh

      - name: Show Tailscale Connection Info
        run: |
          echo "=== Tailscale Status ==="
          tailscale ip -4 || true
          tailscale ip -6 || true
          tailscale status || true
          echo ""
          echo "=== User Credentials ==="
          echo "Username: jacky"
          echo "Password: root"

      - name: System Info
        run: |
          echo "=== System Information ==="
          uname -a
          echo "User: $(whoami)"
          id
          df -h
          free -m

      # === Interactive Access ===
      - name: Keep VPS alive
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 300

      # === Backup Section ===
      - name: Backup VPS data and Tailscale state
        if: always()
        run: |
          mkdir -p backup
          TEMP_BACKUP=$(mktemp -d)

          BACKUP_ITEMS=(
            "/etc"
            "/home"
            "/var/lib/tailscale/tailscaled.state"
            "/root/.ssh"
            "/opt"
          )

          for item in "${BACKUP_ITEMS[@]}"; do
            if [ -e "$item" ]; then
              sudo mkdir -p "$TEMP_BACKUP$(dirname "$item")"
              sudo cp -a "$item" "$TEMP_BACKUP$(dirname "$item")/"
            fi
          done

          # Optional: backup aaPanel data if installed
          if [ -d "/www/server" ]; then
            echo "📦 Backing up aaPanel data..."
            sudo mkdir -p "$TEMP_BACKUP/www"
            sudo cp -a /www/server "$TEMP_BACKUP/www/"
          fi

          BACKUP_FILE="backup/vps-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
          sudo tar -czf "$BACKUP_FILE" -C "$TEMP_BACKUP" .

          # Ensure artifact is owned by runner so it's downloadable next session
          sudo chown runner:runner "$BACKUP_FILE"
          sudo rm -rf "$TEMP_BACKUP"

          echo "✅ Backup created: $BACKUP_FILE"
          du -sh "$BACKUP_FILE"

      - name: Upload VPS backup artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup
          path: backup/*.tar.gz
          retention-days: 7
          compression-level: 0

      - name: Completion Summary
        if: always()
        run: |
          echo "🎉 VPS Backup & Restore Workflow Completed"
          if compgen -G "backup/*.tar.gz" > /dev/null; then
            du -h backup/*.tar.gz
          fi
