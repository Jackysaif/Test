# Persistent VPS Session with Backup/Restore Logic
# Required secrets:
# - TAILSCALE_AUTHKEY: Tailscale authkey for VPN connection
# - RCLONE_CONFIG: base64-encoded or raw rclone config text for MEGA remote
# - DB_ROOT_PASSWORD: root password for MariaDB installation

name: Persistent VPS Session

on:
  workflow_dispatch:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'

jobs:
    vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 400  # 6+ hours with overhead
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Prepare environment and install dependencies
      shell: bash
      run: |
        set -euo pipefail
        
        # Update package list
        sudo apt-get update
        
        # Install required packages
        sudo apt-get install -y curl jq tar gzip expect mariadb-server tmate
        
        # Install rclone
        curl https://rclone.org/install.sh | sudo bash
        
        # Install Tailscale
        curl -fsSL https://tailscale.com/install.sh | sh
        
        # Create rclone config directory
        mkdir -p ~/.config/rclone
        
        # Decode and write rclone config from secret
        if [[ "${{ secrets.RCLONE_CONFIG }}" =~ ^[A-Za-z0-9+/]*={0,2}$ ]]; then
          # Looks like base64, decode it
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
        else
          # Assume it's raw config text
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
        fi
        
        echo "Environment preparation completed"

    - name: Attempt restore from GitHub artifact
      id: artifact-restore
      shell: bash
      continue-on-error: true
      run: |
        set -euo pipefail
        
        echo "Attempting to restore from GitHub artifact..."
        
        # Try to download the most recent artifact
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        
        # Get the latest workflow run with artifacts
        LATEST_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs?status=completed&per_page=10" | \
          jq -r '.workflow_runs[] | select(.conclusion == "success") | .id' | head -1)
        
        if [ -n "$LATEST_RUN" ]; then
          # Get artifacts from the latest run
          ARTIFACT_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/actions/runs/${LATEST_RUN}/artifacts" | \
            jq -r '.artifacts[] | select(.name | startswith("vps-backup")) | .archive_download_url' | head -1)
          
          if [ "$ARTIFACT_URL" != "null" ] && [ -n "$ARTIFACT_URL" ]; then
            echo "Found artifact, downloading..."
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "$ARTIFACT_URL" -o artifact.zip
            unzip artifact.zip
            
            if [ -f vps-backup*.tar.gz ]; then
              echo "Extracting backup..."
              sudo mkdir -p /tmp/restore
              sudo tar -xzf vps-backup*.tar.gz -C /tmp/restore
              
              # Run restore process
              sudo bash -c "$(cat << 'EOF'
        set -euo pipefail
        
        echo "Starting restore from artifact..."
        
        # Restore Tailscale state if present
        if [ -d "/tmp/restore/tailscale-state" ]; then
          echo "Restoring Tailscale state..."
          sudo mkdir -p /var/lib/tailscale
          sudo cp -r /tmp/restore/tailscale-state/* /var/lib/tailscale/ 2>/dev/null || true
          sudo chown -R root:root /var/lib/tailscale
        fi
        
        # Restore home directories
        if [ -d "/tmp/restore/home" ]; then
          echo "Restoring home directories..."
          sudo cp -r /tmp/restore/home/* /home/ 2>/dev/null || true
        fi
        
        # Restore root directory
        if [ -d "/tmp/restore/root" ]; then
          echo "Restoring root directory..."
          sudo cp -r /tmp/restore/root/. /root/ 2>/dev/null || true
        fi
        
        # Restore selected etc configs
        if [ -d "/tmp/restore/etc" ]; then
          echo "Restoring etc configs..."
          sudo cp -r /tmp/restore/etc/* /etc/ 2>/dev/null || true
        fi
        
        # Restore web content
        if [ -d "/tmp/restore/var-www" ]; then
          echo "Restoring web content..."
          sudo mkdir -p /var/www
          sudo cp -r /tmp/restore/var-www/* /var/www/ 2>/dev/null || true
          sudo chown -R www-data:www-data /var/www 2>/dev/null || true
        fi
        
        # Restore opt directory
        if [ -d "/tmp/restore/opt" ]; then
          echo "Restoring opt directory..."
          sudo cp -r /tmp/restore/opt/* /opt/ 2>/dev/null || true
        fi
        
        # Restore aaPanel data
        if [ -d "/tmp/restore/aapanel-data" ]; then
          echo "Restoring aaPanel data..."
          sudo mkdir -p /www
          sudo cp -r /tmp/restore/aapanel-data/* /www/ 2>/dev/null || true
        fi
        
        # Restore MariaDB data
        if [ -d "/tmp/restore/mysql" ]; then
          echo "Restoring MariaDB data..."
          sudo systemctl stop mariadb 2>/dev/null || true
          sudo mkdir -p /var/lib/mysql
          sudo cp -r /tmp/restore/mysql/* /var/lib/mysql/ 2>/dev/null || true
          sudo chown -R mysql:mysql /var/lib/mysql
          sudo systemctl start mariadb 2>/dev/null || true
        fi
        
        echo "Restore from artifact completed"
        EOF
        )"
              
              echo "RESTORE_SUCCESS=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
        fi
        
        echo "No suitable artifact found"
        echo "RESTORE_SUCCESS=false" >> $GITHUB_OUTPUT
        exit 1

    - name: Attempt restore from MEGA
      id: mega-restore
      if: steps.artifact-restore.outputs.RESTORE_SUCCESS != 'true'
      shell: bash
      continue-on-error: true
      run: |
        set -euo pipefail
        
        echo "Attempting to restore from MEGA..."
        
        # List files in MEGA backup directory
        LATEST_BACKUP=$(rclone lsf mega:vps-backups/ --include "vps-backup-*.tar.gz" 2>/dev/null | sort -r | head -1 || echo "")
        
        if [ -n "$LATEST_BACKUP" ]; then
          echo "Found backup: $LATEST_BACKUP"
          rclone copy "mega:vps-backups/$LATEST_BACKUP" . 
          
          if [ -f "$LATEST_BACKUP" ]; then
            echo "Extracting backup..."
            sudo mkdir -p /tmp/restore
            sudo tar -xzf "$LATEST_BACKUP" -C /tmp/restore
            
            # Run same restore process as artifact restore
            sudo bash -c "$(cat << 'EOF'
        set -euo pipefail
        
        echo "Starting restore from MEGA..."
        
        # Restore Tailscale state if present
        if [ -d "/tmp/restore/tailscale-state" ]; then
          echo "Restoring Tailscale state..."
          sudo mkdir -p /var/lib/tailscale
          sudo cp -r /tmp/restore/tailscale-state/* /var/lib/tailscale/ 2>/dev/null || true
          sudo chown -R root:root /var/lib/tailscale
        fi
        
        # Restore home directories
        if [ -d "/tmp/restore/home" ]; then
          echo "Restoring home directories..."
          sudo cp -r /tmp/restore/home/* /home/ 2>/dev/null || true
        fi
        
        # Restore root directory
        if [ -d "/tmp/restore/root" ]; then
          echo "Restoring root directory..."
          sudo cp -r /tmp/restore/root/. /root/ 2>/dev/null || true
        fi
        
        # Restore selected etc configs
        if [ -d "/tmp/restore/etc" ]; then
          echo "Restoring etc configs..."
          sudo cp -r /tmp/restore/etc/* /etc/ 2>/dev/null || true
        fi
        
        # Restore web content
        if [ -d "/tmp/restore/var-www" ]; then
          echo "Restoring web content..."
          sudo mkdir -p /var/www
          sudo cp -r /tmp/restore/var-www/* /var/www/ 2>/dev/null || true
          sudo chown -R www-data:www-data /var/www 2>/dev/null || true
        fi
        
        # Restore opt directory
        if [ -d "/tmp/restore/opt" ]; then
          echo "Restoring opt directory..."
          sudo cp -r /tmp/restore/opt/* /opt/ 2>/dev/null || true
        fi
        
        # Restore aaPanel data
        if [ -d "/tmp/restore/aapanel-data" ]; then
          echo "Restoring aaPanel data..."
          sudo mkdir -p /www
          sudo cp -r /tmp/restore/aapanel-data/* /www/ 2>/dev/null || true
        fi
        
        # Restore MariaDB data
        if [ -d "/tmp/restore/mysql" ]; then
          echo "Restoring MariaDB data..."
          sudo systemctl stop mariadb 2>/dev/null || true
          sudo mkdir -p /var/lib/mysql
          sudo cp -r /tmp/restore/mysql/* /var/lib/mysql/ 2>/dev/null || true
          sudo chown -R mysql:mysql /var/lib/mysql
          sudo systemctl start mariadb 2>/dev/null || true
        fi
        
        echo "Restore from MEGA completed"
        EOF
        )"
            
            echo "RESTORE_SUCCESS=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        echo "No suitable backup found in MEGA"
        echo "RESTORE_SUCCESS=false" >> $GITHUB_OUTPUT
        exit 1

    - name: Fresh provision if no restore succeeded
      if: steps.artifact-restore.outputs.RESTORE_SUCCESS != 'true' && steps.mega-restore.outputs.RESTORE_SUCCESS != 'true'
      shell: bash
      run: |
        set -euo pipefail
        
        echo "No backup found, performing fresh provision..."
        
        # Set hostname
        sudo hostnamectl set-hostname Spidey
        
        # Create user jacky with password spidey
        sudo useradd -m -s /bin/bash jacky 2>/dev/null || echo "User jacky already exists"
        echo "jacky:spidey" | sudo chpasswd
        sudo usermod -aG sudo jacky
        


        echo "Installing latest aaPanel version 7.0..."

        # Install expect if not already installed
        if ! command -v expect &> /dev/null; then
        echo "Installing expect package..."
        sudo apt-get update
        sudo apt-get install -y expect
        fi

        # Download and install latest aaPanel 7.0
         echo "Downloading and installing aaPanel 7.0..."
         URL="https://www.aapanel.com/script/install_7.0_en.sh"

          if [ -f /usr/bin/curl ]; then
          curl -ksSO "$URL"
          else
          wget --no-check-certificate -O install_7.0_en.sh "$URL"
          fi

          # Create expect script for automation
          cat > aapanel_install.exp << 'EXPECT_EOF'
          #!/usr/bin/expect -f

            set timeout 600

            spawn bash install_7.0_en.sh aapanel

            expect {
            "*Do you want to install aaPanel to the /www directory now*" {
        send "y\r"
        exp_continue
        }
        "*Please Input 1-2*" {
        send "y\r"
        exp_continue
        }
        "*Force install*" {
        send "yes\r"
        exp_continue
    }
    "*Press any key to start*" {
        send "\r"
        exp_continue
    }
    eof
}
EXPECT_EOF

chmod +x aapanel_install.exp
./aapanel_install.exp

# Wait for installation to complete
echo "Waiting for installation to complete..."
sleep 60

# Check if bt command exists and set username/password
if [ -f "/usr/bin/bt" ]; then
    echo "Setting aaPanel username and password using bt command..."
    
    # Wait a bit more for panel to fully initialize
    sleep 30
    
    # Set username (bt 5)
    echo "Setting username..."
    expect << EOF
set timeout 30
spawn sudo bt 5
expect "*Please enter a new panel username*"
send "Jacky\r"
expect eof
EOF
    
    # Set password (bt 6)
    echo "Setting password..."
    expect << EOF
set timeout 30
spawn sudo bt 6
expect "*Please enter a new panel password*"
send "spidey\r"
expect eof
EOF
    
    echo "================================================"
    echo "aaPanel 7.0 installation and configuration completed successfully!"
    echo ""
    echo "Panel URL: https://YOUR_SERVER_IP:7800"
    echo "Username: Jacky"
    echo "Password: spidey"
    echo ""
    echo "Security reminder:"
    echo "1. Change the default port (7800) if needed"
    echo "2. Configure firewall rules"
    echo "3. Consider changing SSH port"
    echo "================================================"
    
else
    echo "Error: bt command not found. Installation may have failed."
    echo "Checking installation status..."
    
    # Check if panel files exist
    if [ -d "/www/server/panel" ]; then
        echo "Panel files found but bt command missing. Trying alternative approach..."
        # Try using python tools as fallback
        if [ -f "/www/server/panel/pyenv/bin/python" ]; then
            /www/server/panel/pyenv/bin/python /www/server/panel/tools.py username Jacky
            /www/server/panel/pyenv/bin/python /www/server/panel/tools.py password spidey
            echo "Credentials set using fallback method."
        else
            echo "Installation appears to have failed. Please check logs."
            exit 1
        fi
    else
        echo "Installation failed completely. Please check the installation logs."
        exit 1
    fi
fi

# Cleanup
echo "Cleaning up temporary files..."
rm -f install.sh install_7.0_en.sh aapanel_install.exp

# Display final panel information
if [ -f "/usr/bin/bt" ]; then
    echo ""
    echo "Final panel information:"
    sudo bt 11  # Show panel info
    sudo bt 12  # Show panel login URL
fi
        
        # Configure MariaDB
        echo "Configuring MariaDB..."
        sudo systemctl start mariadb
        sudo systemctl enable mariadb
        
        # Set MariaDB root password and create test database
        sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';"
        sudo mysql -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS test;"
        
        # Install and configure Tailscale
        echo "Configuring Tailscale..."
        sudo tailscale up --authkey "${{ secrets.TAILSCALE_AUTHKEY }}"
        
        echo "Fresh provision completed"

    - name: Start tmate session for debugging (optional)
      shell: bash
      run: |
        # Start tmate session in background for debugging access
        tmate -S /tmp/tmate.sock new-session -d
        sleep 5
        tmate -S /tmp/tmate.sock wait tmate-ready
        echo "Tmate session started:"
        tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
        echo "Web session:"
        tmate -S /tmp/tmate.sock display -p '#{tmate_web}'

    - name: Start/restart all services
      shell: bash
      run: |
        set -euo pipefail
        
        echo "Starting/restarting services..."
        
        # Reload systemd daemon
        sudo systemctl daemon-reload
        
        # Start MariaDB
        sudo systemctl start mariadb || echo "MariaDB start failed"
        sudo systemctl status mariadb --no-pager || true
        
        # Start aaPanel if installed
        sudo systemctl start bt || echo "aaPanel service not found"
        
        # Start Tailscale
        sudo systemctl start tailscaled
        sudo tailscale status || echo "Tailscale status check failed"
        
        # Start other common services
        sudo systemctl start nginx 2>/dev/null || echo "Nginx not installed"
        sudo systemctl start apache2 2>/dev/null || echo "Apache not installed"
        sudo systemctl start docker 2>/dev/null || echo "Docker not installed"
        
        echo "Service startup completed"

    - name: Main runtime loop with periodic backup and shutdown detection
      shell: bash
      run: |
        set -euo pipefail
        
        echo "Starting main runtime loop..."
        
        # Function to create backup
        create_backup() {
          echo "Creating backup..."
          
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          BACKUP_NAME="vps-backup-${TIMESTAMP}.tar.gz"
          BACKUP_DIR="/tmp/backup-staging"
          
          sudo mkdir -p "$BACKUP_DIR"
          
          # Create backup manifest
          cat > "$BACKUP_DIR/backup-manifest.txt" << EOF
          Backup created: $(date)
          Contents:
          - /home (user directories)
          - /root (root directory)
          - /etc/passwd, /etc/group, /etc/shadow (user configs)
          - /var/www (web content)
          - /opt (optional software)
          - /www (aaPanel data)
          - /var/lib/tailscale (Tailscale state)
          - /var/lib/mysql (MariaDB data)
          EOF
          
          # Backup important directories
          echo "Backing up directories..."
          
          # Home directories
          sudo cp -r /home "$BACKUP_DIR/" 2>/dev/null || mkdir -p "$BACKUP_DIR/home"
          
          # Root directory (selective)
          sudo mkdir -p "$BACKUP_DIR/root"
          sudo cp -r /root/. "$BACKUP_DIR/root/" 2>/dev/null || true
          
          # Selected etc configs
          sudo mkdir -p "$BACKUP_DIR/etc"
          sudo cp /etc/passwd /etc/group /etc/shadow "$BACKUP_DIR/etc/" 2>/dev/null || true
          
          # Web content
          if [ -d /var/www ]; then
            sudo cp -r /var/www "$BACKUP_DIR/var-www" 2>/dev/null || true
          fi
          
          # Opt directory
          if [ -d /opt ]; then
            sudo cp -r /opt "$BACKUP_DIR/" 2>/dev/null || true
          fi
          
          # aaPanel data
          if [ -d /www ]; then
            sudo cp -r /www "$BACKUP_DIR/aapanel-data" 2>/dev/null || true
          fi
          
          # Tailscale state
          if [ -d /var/lib/tailscale ]; then
            sudo cp -r /var/lib/tailscale "$BACKUP_DIR/tailscale-state" 2>/dev/null || true
          fi
          
          # MariaDB data
          if [ -d /var/lib/mysql ]; then
            sudo systemctl stop mariadb 2>/dev/null || true
            sudo cp -r /var/lib/mysql "$BACKUP_DIR/" 2>/dev/null || true
            sudo systemctl start mariadb 2>/dev/null || true
          fi
          
          # Create tar.gz archive
          echo "Creating archive..."
          cd /tmp/backup-staging
          sudo tar -czf "../$BACKUP_NAME" .
          sudo chown runner:runner "/tmp/$BACKUP_NAME"
          
          echo "Backup created: $BACKUP_NAME"
          echo "$BACKUP_NAME"
        }
        
        # Runtime variables
        LAST_BACKUP_TIME=$(date +%s)
        BACKUP_INTERVAL=$((30 * 60))  # 30 minutes
        
        # Main loop - run for approximately 6 hours
        START_TIME=$(date +%s)
        RUNTIME_DURATION=$((6 * 60 * 60))  # 6 hours
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          
          # Check if runtime duration exceeded
          if [ $ELAPSED_TIME -ge $RUNTIME_DURATION ]; then
            echo "Runtime duration reached, performing final backup..."
            BACKUP_FILE=$(create_backup)
            break
          fi
          
          # Check for graceful shutdown signal
          if [ -f /tmp/stop ]; then
            echo "Shutdown signal detected, performing final backup..."
            BACKUP_FILE=$(create_backup)
            break
          fi
          
          # Check if it's time for a periodic backup
          TIME_SINCE_BACKUP=$((CURRENT_TIME - LAST_BACKUP_TIME))
          if [ $TIME_SINCE_BACKUP -ge $BACKUP_INTERVAL ]; then
            echo "Performing periodic backup..."
            BACKUP_FILE=$(create_backup)
            LAST_BACKUP_TIME=$CURRENT_TIME
            
            # Upload backup immediately after creation
            if [ -n "${BACKUP_FILE:-}" ]; then
              echo "Uploading backup to MEGA..."
              rclone copy "/tmp/$BACKUP_FILE" mega:vps-backups/ || echo "MEGA upload failed"
              
              # Attempt to create public link
              rclone link "mega:vps-backups/$BACKUP_FILE" 2>/dev/null > mega-backup-link.txt || \
                echo "Direct link unavailable" > mega-backup-link.txt
            fi
          fi
          
          # Sleep for 1 minute before next check
          sleep 60
        done
        
        echo "Main loop completed"

    - name: Upload final backup as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vps-backup.tar.gz
        path: /tmp/vps-backup-*.tar.gz
        retention-days: 30

    - name: Upload backup link info
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mega-backup-info
        path: |
          mega-backup-link.txt
          /tmp/backup-staging/backup-manifest.txt
        retention-days: 30

    - name: Final service status check
      if: always()
      shell: bash
      run: |
        echo "=== Final service status ==="
        sudo systemctl status mariadb --no-pager || echo "MariaDB not running"
        sudo systemctl status bt --no-pager || echo "aaPanel not running"  
        sudo tailscale status || echo "Tailscale not connected"
        echo "=== End status check ==="
