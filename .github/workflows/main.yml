# üõ∏ OMNITRIX VPS SESSION - BEN 10 ALIEN FORCE EDITION üëΩ
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
#                    üîã POWERED BY ALIEN TECHNOLOGY üîã
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# 
# üåü REQUIRED PLUMBER SECRETS:
# ‚î£‚îÅ üîó TAILSCALE_AUTHKEY: Plumber communication network key
# ‚î£‚îÅ ‚òÅÔ∏è RCLONE_CONFIG: Galvan Prime cloud storage configuration  
# ‚î£‚îÅ üîê USER_PASSWORD: Hero access credentials
# ‚îó‚îÅ üóÑÔ∏è DB_ROOT_PASSWORD: Database vault master key (optional)
#
# üéØ ALIEN POWERS ACTIVATED:
# ‚î£‚îÅ üõ∏ 6-hour persistent universe session
# ‚î£‚îÅ ‚ö° Lightning-fast selective data backup/restore
# ‚î£‚îÅ üîÑ Multi-dimensional fallback systems
# ‚î£‚îÅ üåê Galactic network integration (Tailscale VPN)
# ‚î£‚îÅ üéõÔ∏è Command center deployment (aaPanel)
# ‚î£‚îÅ üóÑÔ∏è Database fortress (MariaDB)
# ‚î£‚îÅ üë§ Hero account management
# ‚îó‚îÅ üõ°Ô∏è Self-healing error recovery
#
# Ben Tennyson says: "It's Hero Time!" üí•

name: "üõ∏ OMNITRIX VPS - Ben 10 Alien Force Edition üëΩ"

on:
  workflow_dispatch:
    inputs:
      alien_mode:
        description: 'üëΩ Select Alien Form'
        required: false
        default: 'humungousaur'
        type: choice
        options:
          - humungousaur  # Standard power mode
          - brainstorm    # Debug mode with extended analysis
          - jetray        # Speed mode (faster execution)
          - chromastone   # Shield mode (extra error handling)
      debug_session:
        description: 'üîç Enable Brainstorm Debug Mode'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Every 6 hours - Ben's patrol schedule! üåü
    - cron: '0 */6 * * *'

env:
  # üõ∏ Alien Technology Configuration
  BACKUP_NEXUS: /mnt/omnitrix/backups
  BACKUP_ARTIFACT: omnitrix-data-core.tar.gz
  GALVAN_CLOUD: mega:omnitrix-vault
  HERO_SESSION_DURATION: 19800  # 5.5 hours in seconds
  PLUMBER_NETWORK: Plumbers-HQ
  
jobs:
  omnitrix_session:
    name: "üõ∏ OMNITRIX UNIVERSE SESSION üëΩ"
    runs-on: ubuntu-22.04
    timeout-minutes: 350
    permissions:
      contents: read
      actions: write
    
    steps:
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üåü PHASE 1: OMNITRIX INITIALIZATION & ALIEN TECH DEPLOYMENT
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    - name: "üõ∏ Scanning Universe Repository"
      uses: actions/checkout@v4
      
    - name: "‚ö° DEPLOYING ALIEN TECHNOLOGY SUITE"
      run: |
        set -euo pipefail
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üõ∏            OMNITRIX SYSTEM ACTIVATION               üëΩ"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üîã Alien Form Selected: ${{ github.event.inputs.alien_mode || 'humungousaur' }}"
        echo "üåü Hero: Ben Tennyson | Session: Alien Force"
        echo "‚è∞ Mission Start: $(date)"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        # Update galactic package registry
        echo "üõ∏ Updating Galactic Package Registry..."
        sudo apt-get update -qq || {
          echo "‚ö†Ô∏è Primary registry failed, trying backup mirrors..."
          sleep 5
          sudo apt-get update -qq || echo "‚ö†Ô∏è Registry update incomplete, proceeding..."
        }
        
        # Install Plumber communication tools
        echo "üîó Installing Plumber Communication Suite..."
        curl -fsSL https://rclone.org/install.sh | sudo bash || {
          echo "‚ö†Ô∏è Rclone installation failed, trying alternative..."
          wget https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-current-linux-amd64.zip
          sudo cp rclone-*/rclone /usr/bin/
          sudo chmod +x /usr/bin/rclone
        }
        
        # Deploy alien technology toolkit
        echo "üëΩ Deploying Alien Technology Toolkit..."
        ALIEN_TOOLS=(
          tar gzip unzip curl wget jq
          openssh-server htop nano vim git net-tools 
          software-properties-common apt-transport-https 
          ca-certificates gnupg lsb-release psmisc screen
          expect tmate mariadb-server mariadb-client
          build-essential python3-pip
        )
        
        for tool in "${ALIEN_TOOLS[@]}"; do
          if ! dpkg -l | grep -q "^ii  $tool "; then
            echo "üì¶ Installing $tool..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y $tool || {
              echo "‚ö†Ô∏è $tool installation failed, adding to retry list..."
            }
          fi
        done
        
        # Verify critical tools
        CRITICAL_TOOLS=("rclone" "jq" "curl" "tar")
        for tool in "${CRITICAL_TOOLS[@]}"; do
          if ! command -v $tool &> /dev/null; then
            echo "‚ùå CRITICAL: $tool not available!"
            exit 1
          fi
        done
        
        echo "‚úÖ ALIEN TECHNOLOGY DEPLOYMENT COMPLETE! üõ∏"

    - name: "‚òÅÔ∏è GALVAN PRIME CLOUD CONFIGURATION"
      run: |
        set -euo pipefail
        echo "‚òÅÔ∏è Establishing connection to Galvan Prime Cloud Storage..."
        
        # Validate Galvan configuration
        if [[ -z "${{ secrets.RCLONE_CONFIG || '' }}" ]]; then
          echo "‚ùå CRITICAL ERROR: Galvan Prime access credentials missing!"
          echo "üõ∏ The Omnitrix requires RCLONE_CONFIG for cloud connectivity!"
          exit 1
        fi
        
        # Create secure configuration directory
        sudo mkdir -p ~/.config/rclone
        sudo chmod 700 ~/.config/rclone
        
        # Deploy Galvan Prime credentials with fallback detection
        echo "üîê Decoding Galvan Prime credentials..."
        if echo "${{ secrets.RCLONE_CONFIG }}" | sudo base64 -d &>/dev/null; then
          # Base64 encoded configuration
          echo "${{ secrets.RCLONE_CONFIG }}" | sudo base64 -d > ~/.config/rclone/rclone.conf
          echo "‚úÖ Base64 encoded credentials decoded successfully!"
        else
          # Plain text configuration  
          echo "${{ secrets.RCLONE_CONFIG }}" > ~/.config/rclone/rclone.conf
          echo "‚úÖ Plain text credentials configured successfully!"
        fi
        
        sudo chmod 600 ~/.config/rclone/rclone.conf
        
        # Test Galvan Prime connectivity
        echo "üß™ Testing Galvan Prime connectivity..."
        if rclone lsd mega: &>/dev/null; then
          echo "‚úÖ Galvan Prime cloud connection established! üåå"
        else
          echo "‚ö†Ô∏è Galvan Prime connectivity test failed, but proceeding..."
          echo "üí° Cloud features may be limited during this session"
        fi

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üåü PHASE 2: TEMPORAL DATA CORE RECOVERY PROTOCOLS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    - name: "üîç SCANNING FOR TEMPORAL DATA CORES"
      id: data_core_scan
      run: |
        set -euo pipefail
        echo "üîç Initiating temporal data core scan across dimensions..."
        
        RECOVERY_SUCCESS=false
        
        # Priority 1: Scan Galvan Prime vault for backup links
        echo "üõ∏ Scanning Galvan Prime vault for data cores..."
        if rclone ls "${GALVAN_CLOUD}/temporal_backup_link.txt" &>/dev/null; then
            BACKUP_LINK=$(rclone cat "${GALVAN_CLOUD}/temporal_backup_link.txt" 2>/dev/null || echo "")
            if [[ -n "$BACKUP_LINK" ]]; then
              echo "‚úÖ TEMPORAL DATA CORE LINK FOUND IN GALVAN PRIME! üåå"
              echo "üîó Link: ${BACKUP_LINK:0:50}..."
              echo "has_backup=true" >> $GITHUB_OUTPUT
              echo "backup_source=galvan_prime" >> $GITHUB_OUTPUT  
              echo "artifact_url=${BACKUP_LINK}" >> $GITHUB_OUTPUT
              RECOVERY_SUCCESS=true
            fi
        fi
        
        # Priority 2: Scan recent GitHub artifacts if Galvan Prime fails
        if [[ "$RECOVERY_SUCCESS" == "false" ]]; then
          echo "üîç Galvan Prime scan failed, scanning recent GitHub artifacts..."
          
          # Find workflow ID with retry logic
          for attempt in {1..3}; do
            WORKFLOW_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
              | jq -r '.workflows[] | select(.name | contains("OMNITRIX") or contains("Ben 10") or contains("Persistent")) | .id' \
              | head -1 2>/dev/null || echo "")
            
            if [[ -n "$WORKFLOW_ID" && "$WORKFLOW_ID" != "null" ]]; then
              break
            fi
            
            echo "‚ö†Ô∏è Workflow scan attempt $attempt failed, retrying..."
            sleep 5
          done
          
          if [[ -n "$WORKFLOW_ID" && "$WORKFLOW_ID" != "null" ]]; then
            echo "üîç Found workflow ID: $WORKFLOW_ID"
            
            # Find recent successful runs
            RECENT_RUN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${WORKFLOW_ID}/runs?status=success&per_page=5" \
              | jq -r '.workflow_runs[] | select(.id != ${{ github.run_id }}) | .id' \
              | head -1 2>/dev/null || echo "")
              
            if [[ -n "$RECENT_RUN" && "$RECENT_RUN" != "null" ]]; then
              echo "üîç Scanning run: $RECENT_RUN"
              
              # Find backup artifact
              ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/runs/${RECENT_RUN}/artifacts" \
                | jq -r --arg name "$BACKUP_ARTIFACT" '.artifacts[] | select(.name | contains($name) or contains("backup") or contains("omnitrix")) | .id' \
                | head -1 2>/dev/null || echo "")
                
              if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
                ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
                echo "‚úÖ TEMPORAL DATA CORE FOUND IN GITHUB DIMENSION! üì¶"
                echo "üÜî Artifact ID: $ARTIFACT_ID"
                echo "has_backup=true" >> $GITHUB_OUTPUT
                echo "backup_source=github_artifact" >> $GITHUB_OUTPUT
                echo "artifact_url=${ARTIFACT_URL}" >> $GITHUB_OUTPUT
                RECOVERY_SUCCESS=true
              fi
            fi
          fi
        fi
        
        # Priority 3: Direct Galvan Prime backup scan
        if [[ "$RECOVERY_SUCCESS" == "false" ]]; then
          echo "üõ∏ Performing direct Galvan Prime backup scan..."
          LATEST_BACKUP=$(rclone lsf "${GALVAN_CLOUD}/" | grep -E "(backup|omnitrix).*\.tar\.gz" | sort -r | head -1 2>/dev/null || echo "")
          
          if [[ -n "$LATEST_BACKUP" ]]; then
            echo "‚úÖ DIRECT GALVAN BACKUP FOUND! üåå"  
            echo "üìÅ File: $LATEST_BACKUP"
            echo "has_backup=true" >> $GITHUB_OUTPUT
            echo "backup_source=galvan_direct" >> $GITHUB_OUTPUT
            echo "backup_file=${LATEST_BACKUP}" >> $GITHUB_OUTPUT
            RECOVERY_SUCCESS=true
          fi
        fi
        
        # Final result
        if [[ "$RECOVERY_SUCCESS" == "false" ]]; then
          echo "‚ÑπÔ∏è No temporal data cores found across all dimensions"
          echo "üõ∏ Initiating fresh universe creation protocol..."
          echo "has_backup=false" >> $GITHUB_OUTPUT
          echo "backup_source=none" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ TEMPORAL DATA CORE RECOVERY PROTOCOL SUCCESSFUL! üéØ"
        fi

    - name: "üì• TEMPORAL DATA CORE RESTORATION"
      if: steps.data_core_scan.outputs.has_backup == 'true'
      run: |
        set -euo pipefail
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üì•        TEMPORAL DATA CORE RESTORATION PROTOCOL        üëΩ"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üîã Source: ${{ steps.data_core_scan.outputs.backup_source }}"
        echo "‚ö° Initiating quantum data reconstruction..."
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        # Create secure restoration chamber
        RESTORE_CHAMBER="/mnt/omnitrix/restore"
        sudo mkdir -p "$RESTORE_CHAMBER"
        cd "$RESTORE_CHAMBER"
        
        # Execute restoration based on source
        case "${{ steps.data_core_scan.outputs.backup_source }}" in
          "galvan_prime"|"github_artifact")
            echo "üåå Downloading from ${{ steps.data_core_scan.outputs.backup_source }}..."
            
            # Download with retry mechanism
            for attempt in {1..3}; do
              if curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "${{ steps.data_core_scan.outputs.artifact_url }}" \
                     -o "data_core.zip"; then
                echo "‚úÖ Download successful on attempt $attempt!"
                break
              else
                echo "‚ö†Ô∏è Download attempt $attempt failed, retrying..."
                sleep $((attempt * 5))
              fi
            done
            
            # Extract and verify
            echo "üì¶ Extracting temporal data core..."
            sudo unzip -q data_core.zip 2>/dev/null || unzip data_core.zip
            
            # Find the actual backup file
            BACKUP_FILE=$(find . -name "*.tar.gz" -type f | head -1)
            if [[ -z "$BACKUP_FILE" ]]; then
              echo "‚ùå No backup file found in extracted data!"
              ls -la
              exit 1
            fi
            ;;
            
          "galvan_direct")
            echo "üõ∏ Direct download from Galvan Prime..."
            BACKUP_FILE="${{ steps.data_core_scan.outputs.backup_file }}"
            
            for attempt in {1..3}; do
              if rclone copy "${GALVAN_CLOUD}/${BACKUP_FILE}" .; then
                echo "‚úÖ Direct download successful on attempt $attempt!"
                break
              else
                echo "‚ö†Ô∏è Direct download attempt $attempt failed, retrying..."
                sleep $((attempt * 5))
              fi
            done
            ;;
        esac
        
        # Validate data core integrity
        echo "üß™ Validating temporal data core integrity..."
        if [[ -f "$BACKUP_FILE" ]]; then
          CORE_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
          echo "üìã Data Core Size: $CORE_SIZE"
          
          if tar -tzf "$BACKUP_FILE" &>/dev/null; then
            echo "‚úÖ Data core integrity verified! üõ°Ô∏è"
          else
            echo "‚ùå Data core corruption detected!"
            echo "üîÑ Attempting repair protocols..."
            # Try to extract anyway - sometimes works
          fi
        else
          echo "‚ùå Data core file not found!"
          exit 1
        fi
        
        echo "üîÑ Initiating quantum data restoration sequence..."
        
        # Create restoration staging area
        STAGING_AREA="/tmp/omnitrix_restore"
        sudo mkdir -p "$STAGING_AREA"
        
        # Extract data core
        echo "üìÇ Extracting temporal data core..."
        tar -xzf "$BACKUP_FILE" -C "$STAGING_AREA" 2>/dev/null || {
          echo "‚ö†Ô∏è Standard extraction failed, trying alternative method..."
          tar -xf "$BACKUP_FILE" -C "$STAGING_AREA"
        }
        
        # Execute restoration protocols with error handling
        echo "üîß Executing restoration protocols..."
        
        # Restore Hero Base (home directories)
        if [ -d "$STAGING_AREA/selective_backup/home" ]; then
          echo "üè† Restoring Hero Base (home directories)..."
          sudo cp -rf "$STAGING_AREA/selective_backup/home"/* /home/ 2>/dev/null || {
            echo "‚ö†Ô∏è Some home files failed to restore, continuing..."
          }
        fi
        
        # Restore Command Center (root)
        if [ -d "$STAGING_AREA/selective_backup/root" ]; then
          echo "üëë Restoring Command Center (root directory)..."
          sudo cp -rf "$STAGING_AREA/selective_backup/root/." /root/ 2>/dev/null || {
            echo "‚ö†Ô∏è Some root files failed to restore, continuing..."
          }
          sudo chown -R root:root /root 2>/dev/null || true
        fi
        
        # Restore Plumber Network State (Tailscale)
        if [ -d "$STAGING_AREA/selective_backup/tailscale" ]; then
          echo "üîó Restoring Plumber Network State..."
          sudo mkdir -p /var/lib/tailscale
          sudo cp -rf "$STAGING_AREA/selective_backup/tailscale"/* /var/lib/tailscale/ 2>/dev/null || {
            echo "‚ö†Ô∏è Tailscale state restoration failed, will reconnect fresh..."
          }
          sudo chown -R root:root /var/lib/tailscale 2>/dev/null || true
        fi
        
        # Restore Database Fortress (MariaDB)
        if [ -d "$STAGING_AREA/selective_backup/mysql" ]; then
          echo "üóÑÔ∏è Restoring Database Fortress..."
          sudo systemctl stop mariadb 2>/dev/null || true
          sleep 3
          sudo mkdir -p /var/lib/mysql
          sudo cp -rf "$STAGING_AREA/selective_backup/mysql"/* /var/lib/mysql/ 2>/dev/null || {
            echo "‚ö†Ô∏è Database restoration failed, will recreate fresh..."
          }
          sudo chown -R mysql:mysql /var/lib/mysql 2>/dev/null || true
          sudo systemctl start mariadb 2>/dev/null || true
        fi
        
        # Restore Web Arsenal (/var/www)
        if [ -d "$STAGING_AREA/selective_backup/www" ]; then
          echo "üåê Restoring Web Arsenal..."
          sudo mkdir -p /var/www
          sudo cp -rf "$STAGING_AREA/selective_backup/www"/* /var/www/ 2>/dev/null || {
            echo "‚ö†Ô∏è Some web files failed to restore, continuing..."
          }
          sudo chown -R www-data:www-data /var/www 2>/dev/null || true
        fi
        
        # Restore Control Panel (aaPanel)
        if [ -d "$STAGING_AREA/selective_backup/aapanel" ]; then
          echo "üéõÔ∏è Restoring Alien Control Panel..."
          sudo mkdir -p /www
          sudo cp -rf "$STAGING_AREA/selective_backup/aapanel"/* /www/ 2>/dev/null || {
            echo "‚ö†Ô∏è Some control panel files failed to restore, continuing..."
          }
          sudo chown -R root:root /www 2>/dev/null || true
        fi
        
        # Restore System Configurations
        if [ -d "$STAGING_AREA/selective_backup/etc_configs" ]; then
          echo "‚öôÔ∏è Restoring System Configurations..."
          sudo cp -rf "$STAGING_AREA/selective_backup/etc_configs"/* /etc/ 2>/dev/null || {
            echo "‚ö†Ô∏è Some config files failed to restore, continuing..."
          }
        fi
        
        # Restore Alien Applications (/opt)
        if [ -d "$STAGING_AREA/selective_backup/opt" ]; then
          echo "üëΩ Restoring Alien Applications..."
          sudo mkdir -p /opt
          sudo cp -rf "$STAGING_AREA/selective_backup/opt"/* /opt/ 2>/dev/null || {
            echo "‚ö†Ô∏è Some applications failed to restore, continuing..."
          }
        fi
        
        # Cleanup restoration chamber
        sudo rm -rf "$STAGING_AREA" "$RESTORE_CHAMBER"
        
        echo "‚úÖ TEMPORAL DATA CORE RESTORATION COMPLETE! üéâ"
        echo "üõ∏ Previous universe state successfully reconstructed!"

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üåü PHASE 3: UNIVERSE CONFIGURATION & ALIEN DEPLOYMENT
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    - name: "üë§ HERO ACCOUNT CONFIGURATION"
      run: |
        set -euo pipefail
        
        echo "üë§ Configuring Hero Account - Ben Tennyson Access Protocol..."
        
        # Validate hero credentials
        if [[ -z "${{ secrets.USER_PASSWORD || '' }}" ]]; then
          echo "‚ùå CRITICAL: Hero access credentials missing!"
          echo "üõ∏ The Omnitrix requires USER_PASSWORD for hero authentication!"
          exit 1
        fi
        
        # Create hero account with fallback handling
        echo "üîê Creating hero account: jacky..."
        if ! id jacky &>/dev/null; then
          sudo useradd -m -s /bin/bash jacky || {
            echo "‚ö†Ô∏è Standard user creation failed, trying alternative..."
            sudo adduser --disabled-password --gecos "" jacky
          }
          echo "‚úÖ Hero account created successfully!"
        else
          echo "‚úÖ Hero account already exists!"
        fi
        
        # Set hero credentials
        echo "üîë Configuring hero authentication..."
        echo "Jacky:${{ secrets.USER_PASSWORD }}" | sudo chpasswd || {
          echo "‚ùå Password configuration failed!"
          exit 1
        }
        
        # Grant hero powers (sudo access)
        echo "‚ö° Granting hero powers..."
        sudo usermod -aG sudo jacky 2>/dev/null || {
          sudo usermod -aG admin jacky 2>/dev/null || {
            echo "‚ö†Ô∏è Sudo group assignment failed, creating manual entry..."
          }
        }
        
        # Create heroes sudoers file
        echo "jacky ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/hero > /dev/null
        sudo chmod 440 /etc/sudoers.d/hero
        
        # Configure Docker access if available
        if getent group docker &>/dev/null; then
          sudo usermod -aG docker jacky 2>/dev/null || true
        fi
        
        # Set universe identifier
        echo "üåç Setting universe identifier..."
        sudo hostnamectl set-hostname "$PLUMBER_NETWORK" 2>/dev/null || {
          echo "$PLUMBER_NETWORK" | sudo tee /etc/hostname > /dev/null
        }
        echo "127.0.1.1 $PLUMBER_NETWORK" | sudo tee -a /etc/hosts > /dev/null
        
        echo "‚úÖ Hero account configuration complete! ü¶∏‚Äç‚ôÇÔ∏è"
        echo "üéØ Hero: jacky | Powers: sudo, docker | Universe: $PLUMBER_NETWORK"

    - name: "üéõÔ∏è ALIEN CONTROL PANEL DEPLOYMENT"
      run: |
        set -euo pipefail
        
        echo "üéõÔ∏è Deploying Alien Control Panel (aaPanel) - Galvan Tech Integration..."
        
        # Check if control panel already exists
        if command -v bt &>/dev/null && [ -d /www/server ]; then
          echo "‚úÖ Alien Control Panel already deployed (restored from backup)!"
          PANEL_EXISTS=true
        else
          echo "üöÄ Initiating fresh control panel deployment..."
          PANEL_EXISTS=false
        fi
        
        if [[ "$PANEL_EXISTS" == "false" ]]; then
          # Download latest Galvan installer
          echo "üì• Downloading Galvan installer..."
          INSTALLER_URLS=(
            "http://www.aapanel.com/script/install_6.0_en.sh"
            "http://download.bt.cn/install/install_6.0_en.sh"
            "https://raw.githubusercontent.com/aaPanel/aaPanel/main/install/install_6.0_en.sh"
          )
          
          INSTALLER_SUCCESS=false
          for url in "${INSTALLER_URLS[@]}"; do
            if curl -fsSL -o /tmp/aapanel_install.sh "$url"; then
              echo "‚úÖ Installer downloaded from: $url"
              INSTALLER_SUCCESS=true
              break
            else
              echo "‚ö†Ô∏è Failed to download from: $url"
            fi
          done
          
          if [[ "$INSTALLER_SUCCESS" == "false" ]]; then
            echo "‚ùå All installer URLs failed!"
            echo "üí° Control panel will be available for manual installation"
          else
            chmod +x /tmp/aapanel_install.sh
            
            # Create automated installation script
            echo "ü§ñ Creating automated installation protocol..."
            cat > /tmp/auto_install_aapanel.exp << 'EOF'
            #!/usr/bin/expect -f
            set timeout 600
            spawn bash /tmp/aapanel_install.sh
            expect {
            "*Do you want to install*" { send "y\r"; exp_continue }
            "*install now*" { send "y\r"; exp_continue }
            "*force install*" { send "yes\r"; exp_continue }
             "*confirm*" { send "y\r"; exp_continue }
                eof
              }
          EOF
            chmod +x /tmp/auto_install_aapanel.exp
            
            # Execute installation with timeout protection
            echo "‚ö° Executing Galvan installation protocol..."
            timeout 900 /tmp/auto_install_aapanel.exp || {
              echo "‚ö†Ô∏è Automated installation timeout, trying alternative method..."
              timeout 600 bash -c "printf 'y\ny\nyes\ny\n' | sudo bash /tmp/aapanel_install.sh" || {
                echo "‚ö†Ô∏è Alternative installation failed, control panel may need manual setup"
              }
            }
          fi
        fi
        
        # Configure control panel credentials
        echo "üîß Configuring control panel access credentials..."
        sleep 10  # Allow full initialization
        
        # Multiple credential setting attempts
        CRED_SUCCESS=false
        
        # Method 1: bt command
        if command -v bt &>/dev/null; then
          echo "üéØ Using bt command for credential configuration..."
          if echo "Ben10" | sudo bt 6 2>/dev/null && echo "omnitrix" | sudo bt 5 2>/dev/null; then
            CRED_SUCCESS=true
            echo "‚úÖ Credentials set via bt command!"
          fi
        fi
        
        # Method 2: Direct Python tools
        if [[ "$CRED_SUCCESS" == "false" ]] && [ -f /www/server/panel/tools.py ]; then
          echo "üêç Using Python tools for credential configuration..."
          cd /www/server/panel
          if sudo python3 tools.py username Ben10 2>/dev/null && sudo python3 tools.py password omnitrix 2>/dev/null; then
            CRED_SUCCESS=true
            echo "‚úÖ Credentials set via Python tools!"
          fi
        fi
        
        # Method 3: PyEnv method
        if [[ "$CRED_SUCCESS" == "false" ]] && [ -f /www/server/panel/pyenv/bin/python ]; then
          echo "üî¨ Using PyEnv for credential configuration..."
          if sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py username Ben10 2>/dev/null && \
             sudo /www/server/panel/pyenv/bin/python /www/server/panel/tools.py password omnitrix 2>/dev/null; then
            CRED_SUCCESS=true
            echo "‚úÖ Credentials set via PyEnv!"
          fi
        fi
        
        if [[ "$CRED_SUCCESS" == "true" ]]; then
          echo "üéâ ALIEN CONTROL PANEL DEPLOYED SUCCESSFULLY! üéõÔ∏è"
          echo "üîê Access: Username=Ben10, Password=omnitrix"
        else
          echo "‚ö†Ô∏è Credential configuration incomplete - manual setup may be required"
          echo "üí° Default access will be available via web interface"
        fi

    - name: "üóÑÔ∏è DATABASE FORTRESS INITIALIZATION"  
      run: |
        set -euo pipefail
        
        echo "üóÑÔ∏è Initializing Database Fortress (MariaDB) - Plumber Archive System..."
        
        # Enable and start database service
        echo "‚ö° Powering up database fortress..."
        sudo systemctl enable mariadb || echo "‚ö†Ô∏è MariaDB enable failed"
        sudo systemctl start mariadb || {
          echo "‚ö†Ô∏è MariaDB start failed, attempting repair..."
          sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
          sudo systemctl start mariadb || echo "‚ö†Ô∏è MariaDB requires manual intervention"
        }
        
        # Verify database service
        sleep 5
        if sudo systemctl is-active mariadb &>/dev/null; then
          echo "‚úÖ Database fortress online! üè∞"
        else
          echo "‚ö†Ô∏è Database fortress may need manual activation"
        fi
        
        # Configure database security
        echo "üõ°Ô∏è Configuring database fortress security..."
        
        # Set root password if provided
        if [[ -n "${{ secrets.DB_ROOT_PASSWORD || '' }}" ]]; then
          echo "üîê Setting master vault password..."
          
          # Try multiple methods for setting root password
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${{ secrets.DB_ROOT_PASSWORD }}';" 2>/dev/null || \
          sudo mysqladmin -u root password '${{ secrets.DB_ROOT_PASSWORD }}' 2>/dev/null || \
          echo "‚ö†Ô∏è Root password configuration failed - using default security"
          
          # Create hero database
          sudo mysql -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS omnitrix_data;" 2>/dev/null || \
          sudo mysql -u root -p"${{ secrets.DB_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS test;" 2>/dev/null || \
          echo "‚ö†Ô∏è Hero database creation failed"
        else
          echo "üîì Using default database security..."
          # Create databases with default access
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS omnitrix_data;" 2>/dev/null || \
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS test;" 2>/dev/null || \
          echo "‚ö†Ô∏è Database creation failed"
        fi
        
        echo "‚úÖ Database fortress initialization complete! üóÑÔ∏è"

    - name: "‚ö° ALIEN POWER SYSTEMS ACTIVATION"
      run: |
        set -euo pipefail
        
        echo "‚ö° Activating all alien power systems across the universe..."
        
        # Reload system configurations
        echo "üîÑ Reloading system configurations..."
        sudo systemctl daemon-reload
        
        # Essential power systems
        POWER_SYSTEMS=("ssh" "mariadb")
        
        echo "üåü Activating essential power systems..."
        for system in "${POWER_SYSTEMS[@]}"; do
          echo "‚ö° Powering up $system..."
          
          # Enable with fallback
          sudo systemctl enable "$system" 2>/dev/null || {
            echo "‚ö†Ô∏è $system enable failed, trying alternative..."
            sudo systemctl enable "$system.service" 2>/dev/null || true
          }
          
          # Start with fallback  
          sudo systemctl start "$system" 2>/dev/null || {
            echo "‚ö†Ô∏è $system start failed, attempting restart..."
            sudo systemctl restart "$system" 2>/dev/null || {
              echo "‚ö†Ô∏è $system requires manual intervention"
            }
          }
        done
        
        # Optional power systems
        OPTIONAL_SYSTEMS=("docker" "nginx" "apache2")
        
        echo "üîã Activating optional power systems..."
        for system in "${OPTIONAL_SYSTEMS[@]}"; do
          if systemctl list-units --all | grep -q "$system"; then
            echo "‚ö° Found $system, activating..."
            sudo systemctl enable --now "$system" 2>/dev/null || {
              echo "‚ö†Ô∏è $system activation failed, but continuing..."
            }
          fi
        done
        
        # Activate Alien Control Panel
        if command -v bt &>/dev/null; then
          echo "üéõÔ∏è Activating Alien Control Panel..."
          sudo bt start 2>/dev/null || {
            sudo systemctl start bt 2>/dev/null || {
              sudo /etc/init.d/bt start 2>/dev/null || {
                echo "‚ö†Ô∏è Control panel activation may require manual intervention"
              }
            }
          }
          sleep 3
        fi
        
        # Power system diagnostics
        echo "üîç Running power system diagnostics..."
        sleep 5
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üîã            POWER SYSTEM STATUS REPORT              ‚ö°"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        for system in ssh mariadb docker nginx apache2 bt; do
          if systemctl is-active "$system" &>/dev/null; then
            echo "  ‚úÖ $system - ONLINE AND OPERATIONAL"
          else
            echo "  ‚ö†Ô∏è $system - OFFLINE OR UNAVAILABLE"
          fi
        done
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "‚úÖ ALIEN POWER SYSTEMS ACTIVATION COMPLETE! ‚ö°"

    - name: "üîó PLUMBER NETWORK INTEGRATION"
      run: |
        set -euo pipefail
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üîó        PLUMBER NETWORK INTEGRATION PROTOCOL         üåå" 
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        # Validate Plumber credentials
        if [[ -z "${{ secrets.TAILSCALE_AUTHKEY || '' }}" ]]; then
          echo "‚ùå CRITICAL: Plumber network authentication key missing!"
          echo "üõ∏ The Omnitrix requires TAILSCALE_AUTHKEY for network integration!"
          exit 1
        fi
        
        # Install Plumber network client
        echo "üì° Installing Plumber network client (Tailscale)..."
        
        TAILSCALE_SUCCESS=false
        # Method 1: Official installer
        if curl -fsSL https://tailscale.com/install.sh | sh; then
          TAILSCALE_SUCCESS=true
          echo "‚úÖ Plumber client installed via official installer!"
        else
          echo "‚ö†Ô∏è Official installer failed, trying package manager..."
          
          # Method 2: Package manager
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
          
          if sudo apt-get update && sudo apt-get install -y tailscale; then
            TAILSCALE_SUCCESS=true
            echo "‚úÖ Plumber client installed via package manager!"
          fi
        fi
        
        if [[ "$TAILSCALE_SUCCESS" == "false" ]]; then
          echo "‚ùå All Plumber network installation methods failed!"
          echo "üõ∏ Network integration will be unavailable this session"
          exit 1
        fi
        
        # Activate Plumber network service
        echo "‚ö° Activating Plumber network service..."
        sudo systemctl enable --now tailscaled || {
          echo "‚ö†Ô∏è Service activation failed, attempting manual start..."
          sudo tailscaled --state=/var/lib/tailscale/tailscaled.state --socket=/run/tailscale/tailscaled.sock &
          sleep 3
        }
        
        # Establish network connection
        echo "üåå Establishing connection to Plumber headquarters..."
        
        CONNECTION_SUCCESS=false
        for attempt in {1..3}; do
          echo "üîó Connection attempt $attempt/3..."
          
          if sudo tailscale up --authkey="${{ secrets.TAILSCALE_AUTHKEY }}" \
                             --hostname="$PLUMBER_NETWORK" \
                             --reset \
                             --accept-routes \
                             --timeout=60s; then
            CONNECTION_SUCCESS=true
            echo "‚úÖ Plumber network connection established!"
            break
          else
            echo "‚ö†Ô∏è Connection attempt $attempt failed, retrying..."
            sleep 10
          fi
        done
        
        if [[ "$CONNECTION_SUCCESS" == "false" ]]; then
          echo "‚ùå All connection attempts failed!"
          echo "üõ∏ Continuing without network integration..."
        fi
        
        # Deploy emergency communication system
        echo "üì° Deploying emergency communication system (tmate)..."
        if command -v tmate &>/dev/null; then
          tmate -S /tmp/emergency_comms.sock new-session -d 2>/dev/null || true
          tmate -S /tmp/emergency_comms.sock wait tmate-ready 2>/dev/null || true
        fi
        
        # Network status report
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üåå           PLUMBER NETWORK STATUS REPORT             üîó"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        if [[ "$CONNECTION_SUCCESS" == "true" ]]; then
          PLUMBER_IP=$(sudo tailscale ip -4 2>/dev/null || echo "Acquiring...")
          echo "üåê Plumber Network IP: $PLUMBER_IP"
          echo "üè¢ Network Status: CONNECTED TO HEADQUARTERS"
          
          # Show network devices
          echo "üë• Connected Plumber Devices:"
          sudo tailscale status 2>/dev/null | head -5 || echo "   Getting device list..."
        else
          echo "üåê Plumber Network: OFFLINE"
          echo "üì° Emergency Systems: STANDBY"
        fi
        
        # Emergency access information
        if command -v tmate &>/dev/null; then
          EMERGENCY_SSH=$(tmate -S /tmp/emergency_comms.sock display -p '#{tmate_ssh}' 2>/dev/null || echo "Initializing...")
          echo "üö® Emergency SSH: $EMERGENCY_SSH"
        fi
        
        echo "üîê Hero SSH Access: ssh jacky@$PLUMBER_IP"
        echo "üóùÔ∏è Hero Password: [CONFIGURED]"
        
        if command -v bt &>/dev/null; then
          echo ""
          echo "üéõÔ∏è Alien Control Panel Access:"
          sudo bt default 2>/dev/null || {
            echo "   üìç URL: http://$PLUMBER_IP:7800"  
            echo "   üë§ Username: Ben10"
            echo "   üîë Password: omnitrix"
          }
        fi
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "‚úÖ PLUMBER NETWORK INTEGRATION COMPLETE! üåå"

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üåü PHASE 4: ALIEN FORCE OPERATIONAL MODE
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    - name: "üëΩ BRAINSTORM DEBUG SESSION"
      if: github.event.inputs.debug_session == 'true' || github.event.inputs.alien_mode == 'brainstorm'
      run: |
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üß†        BRAINSTORM DEBUG SESSION ACTIVATED           üëΩ"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "‚ö° Galvan intellect engaged for system analysis!"
        echo "üîç Extended debugging session: 15 minutes"
        echo "üí° Use emergency SSH for direct system access"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        # Enhanced system analysis
        echo "üî¨ Running comprehensive system analysis..."
        
        echo "üìä System Resources:"
        df -h | head -10
        free -h
        
        echo "üì° Network Configuration:"
        ip addr show | grep -E "inet |UP"
        
        echo "üîç Active Services:"
        systemctl list-units --state=active --type=service | head -10
        
        echo "üê≥ Docker Status:"
        docker version 2>/dev/null || echo "Docker not available"
        
        echo "‚è∞ Debug session active for 15 minutes..."
        echo "üß† Brainstorm says: Use this time wisely, Ben!"
        
        sleep 900  # 15 minutes
        
        echo "‚úÖ Brainstorm debug session complete! üß†"

    - name: "üõ∏ OMNITRIX OPERATIONAL SESSION"
      run: |
        set -euo pipefail
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üõ∏           OMNITRIX OPERATIONAL SESSION              üëΩ"  
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "‚ö° Alien Form: ${{ github.event.inputs.alien_mode || 'humungousaur' }}"
        echo "‚è∞ Session Duration: $((HERO_SESSION_DURATION / 3600)) hours $((HERO_SESSION_DURATION % 3600 / 60)) minutes"
        echo "üïê Mission Start: $(date)"
        echo "üõ°Ô∏è Hero on patrol! Universe protection active!"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        # Initialize session variables
        MISSION_START=$(date +%s)
        LAST_STATUS_UPDATE=0
        BACKUP_INTERVAL=$((30 * 60))  # 30 minutes
        LAST_BACKUP=0
        STATUS_INTERVAL=$((10 * 60))  # 10 minutes
        
        # Operational mode selection
        case "${{ github.event.inputs.alien_mode || 'humungousaur' }}" in
          "humungousaur")
            echo "ü¶ï HUMUNGOUSAUR MODE: Maximum power and durability!"
            CHECK_INTERVAL=60  # 1 minute checks
            ;;
          "brainstorm")
            echo "üß† BRAINSTORM MODE: Enhanced monitoring and analysis!"
            CHECK_INTERVAL=30  # 30 second checks
            ;;
          "jetray")
            echo "‚ö° JETRAY MODE: High-speed operations!"
            CHECK_INTERVAL=15  # 15 second checks
            STATUS_INTERVAL=$((5 * 60))  # 5 minute status
            ;;
          "chromastone")
            echo "üíé CHROMASTONE MODE: Maximum protection and error handling!"
            CHECK_INTERVAL=45  # 45 second checks
            ;;
          *)
            echo "üõ∏ DEFAULT MODE: Standard alien operations!"
            CHECK_INTERVAL=60
            ;;
        esac
        
        # Main operational loop
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - MISSION_START))
          
          # Check for mission completion
          if [ $ELAPSED -gt $HERO_SESSION_DURATION ]; then
            echo "‚è∞ Mission duration completed! Time for universe backup..."
            break
          fi
          
          # Check for emergency shutdown signal
          if [ -f /tmp/stop ] || [ -f /tmp/emergency_shutdown ]; then
            echo "üö® EMERGENCY SHUTDOWN SIGNAL DETECTED!"
            echo "üõ°Ô∏è Initiating emergency protocols..."
            rm -f /tmp/stop /tmp/emergency_shutdown 2>/dev/null || true
            break
          fi
          
          # Periodic system backup
          if [ $((CURRENT_TIME - LAST_BACKUP)) -gt $BACKUP_INTERVAL ]; then
            echo "üíæ Initiating periodic universe backup..."
            
            # Quick backup of critical data
            QUICK_BACKUP_DIR="/tmp/omnitrix_quick_backup"
            sudo mkdir -p "$QUICK_BACKUP_DIR"
            
            # Backup critical alien data
            echo "‚ö° Backing up critical alien technology..."
            sudo cp -r /var/lib/tailscale "$QUICK_BACKUP_DIR/" 2>/dev/null || true
            sudo cp -r /home/jacky "$QUICK_BACKUP_DIR/" 2>/dev/null || true
            
            # Create quick backup archive
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            sudo tar -czf "/tmp/omnitrix-quick-$TIMESTAMP.tar.gz" -C /tmp omnitrix_quick_backup 2>/dev/null || true
            
            # Upload to Galvan Prime if possible
            rclone copy "/tmp/omnitrix-quick-$TIMESTAMP.tar.gz" "${GALVAN_CLOUD}/" 2>/dev/null || {
              echo "‚ö†Ô∏è Galvan Prime upload failed, backup stored locally"
            }
            
            # Cleanup
            sudo rm -rf "$QUICK_BACKUP_DIR" "/tmp/omnitrix-quick-$TIMESTAMP.tar.gz"
            
            LAST_BACKUP=$CURRENT_TIME
            echo "‚úÖ Periodic backup complete!"
          fi
          
          # Status update
          if [ $((CURRENT_TIME - LAST_STATUS_UPDATE)) -gt $STATUS_INTERVAL ]; then
            REMAINING=$((HERO_SESSION_DURATION - ELAPSED))
            HOURS=$((REMAINING / 3600))
            MINUTES=$(((REMAINING % 3600) / 60))
            
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            echo "üõ∏ OMNITRIX STATUS REPORT - $(date)"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            echo "‚è∞ Time Remaining: ${HOURS}h ${MINUTES}m"
            echo "üëΩ Alien Mode: ${{ github.event.inputs.alien_mode || 'humungousaur' }}"
            echo "üåê Universe: $PLUMBER_NETWORK"
            
            # System health check
            echo "üîç System Health:"
            echo "  üîó Network: $(sudo tailscale status --json 2>/dev/null | jq -r '.BackendState' 2>/dev/null || echo 'Unknown')"
            echo "  üóÑÔ∏è Database: $(systemctl is-active mariadb 2>/dev/null || echo 'Unknown')" 
            echo "  üéõÔ∏è Control Panel: $(systemctl is-active bt 2>/dev/null || command -v bt &>/dev/null && echo 'Active' || echo 'Unknown')"
            echo "  üíæ Disk Usage: $(df -h / | awk 'NR==2 {print $5}')"
            echo "  üß† Memory: $(free | awk 'NR==2{printf "%.1f%%", $3*100/$2}')"
            
            echo "üõ°Ô∏è Hero Patrol: ACTIVE"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            
            LAST_STATUS_UPDATE=$CURRENT_TIME
          fi
          
          # Alien-specific monitoring
          case "${{ github.event.inputs.alien_mode || 'humungousaur' }}" in
            "brainstorm")
              # Enhanced monitoring for Brainstorm mode
              if [ $((ELAPSED % 300)) -eq 0 ]; then  # Every 5 minutes
                echo "üß† Brainstorm Analysis: Monitoring $(($(ps aux | wc -l) - 1)) processes, $(ss -tuln | wc -l) network connections"
              fi
              ;;
            "chromastone")
              # Error detection for Chromastone mode
              if journalctl --since="1 minute ago" --priority=err --quiet --no-pager | grep -q .; then
                echo "üíé Chromastone Shield: Error patterns detected, increasing monitoring"
              fi
              ;;
          esac
          
          # Sleep based on alien mode
          sleep $CHECK_INTERVAL
        done
        
        echo "üé¨ OMNITRIX OPERATIONAL SESSION COMPLETE!"
        echo "üõ∏ Preparing for universe preservation protocols..."

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
    # üåü PHASE 5: UNIVERSE PRESERVATION & TEMPORAL BACKUP PROTOCOLS
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    - name: "üíæ UNIVERSE PRESERVATION PROTOCOL"
      if: always()
      run: |
        set -euo pipefail
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üíæ      UNIVERSE PRESERVATION PROTOCOL INITIATED       üåå"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üõ∏ Creating temporal data core for universe continuity..."
        echo "‚ö° Initiating selective alien technology backup..."
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        # Create preservation chamber
        sudo mkdir -p "$BACKUP_NEXUS"
        
        # Graceful service shutdown for consistent backup
        echo "üõë Initiating graceful alien system shutdown..."
        
        SERVICES_TO_STOP=("bt" "mariadb" "nginx" "apache2")
        for service in "${SERVICES_TO_STOP[@]}"; do
          if systemctl is-active "$service" &>/dev/null; then
            echo "‚ö° Gracefully shutting down $service..."
            sudo systemctl stop "$service" 2>/dev/null || {
              echo "‚ö†Ô∏è $service shutdown failed, force stopping..."
              sudo pkill -f "$service" 2>/dev/null || true
            }
          fi
        done
        
        # Wait for clean shutdown
        sleep 10
        
        # Create preservation staging area
        PRESERVATION_CHAMBER="/tmp/universe_preservation"
        sudo mkdir -p "$PRESERVATION_CHAMBER"
        
        echo "üì¶ Collecting alien technology and hero data..."
        
        # Hero Base Data (home directories)
        echo "üè† Preserving Hero Base data..."
        if [ -d /home ] && [ "$(sudo ls -A /home 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/home"
          sudo cp -rf /home/* "$PRESERVATION_CHAMBER/home/" 2>/dev/null || {
            echo "‚ö†Ô∏è Some hero base files failed to preserve"
          }
        fi
        
        # Command Center (root directory)  
        echo "üëë Preserving Command Center..."
        if [ -d /root ] && [ "$(sudo ls -A /root 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/root"
          sudo cp -rf /root/. "$PRESERVATION_CHAMBER/root/" 2>/dev/null || {
            echo "‚ö†Ô∏è Some command center files failed to preserve"
          }
        fi
        
        # Plumber Network State (Tailscale)
        echo "üîó Preserving Plumber Network quantum state..."
        if [ -d /var/lib/tailscale ] && [ "$(sudo ls -A /var/lib/tailscale 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/tailscale"
          sudo cp -rf /var/lib/tailscale/* "$PRESERVATION_CHAMBER/tailscale/" 2>/dev/null || {
            echo "‚ö†Ô∏è Plumber network state preservation incomplete"
          }
        fi
        
        # Database Fortress (MariaDB)
        echo "üóÑÔ∏è Preserving Database Fortress..."
        if [ -d /var/lib/mysql ] && [ "$(sudo ls -A /var/lib/mysql 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/mysql"
          sudo cp -rf /var/lib/mysql/* "$PRESERVATION_CHAMBER/mysql/" 2>/dev/null || {
            echo "‚ö†Ô∏è Database fortress preservation incomplete"
          }
        fi
        
        # Web Arsenal (/var/www)
        echo "üåê Preserving Web Arsenal..."
        if [ -d /var/www ] && [ "$(sudo ls -A /var/www 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/www"
          sudo cp -rf /var/www/* "$PRESERVATION_CHAMBER/www/" 2>/dev/null || {
            echo "‚ö†Ô∏è Web arsenal preservation incomplete"
          }
        fi
        
        # Alien Control Panel (aaPanel)
        echo "üéõÔ∏è Preserving Alien Control Panel..."
        if [ -d /www ] && [ "$(sudo ls -A /www 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/aapanel"
          sudo cp -rf /www/* "$PRESERVATION_CHAMBER/aapanel/" 2>/dev/null || {
            echo "‚ö†Ô∏è Control panel preservation incomplete"
          }
        fi
        
        # System Configuration Matrix
        echo "‚öôÔ∏è Preserving System Configuration Matrix..."
        sudo mkdir -p "$PRESERVATION_CHAMBER/etc_configs"
        
        # Critical configuration preservation
        CRITICAL_CONFIGS=(
          "hostname" "hosts" "ssh" "nginx" "apache2" 
          "mysql" "sudoers.d" "crontab" "systemd/system"
          "network" "resolv.conf"
        )
        
        for config in "${CRITICAL_CONFIGS[@]}"; do
          if [ -e "/etc/$config" ]; then
            echo "üìÑ Preserving /etc/$config..."
            sudo cp -rf "/etc/$config" "$PRESERVATION_CHAMBER/etc_configs/" 2>/dev/null || true
          fi
        done
        
        # Alien Applications (/opt)
        echo "üëΩ Preserving Alien Applications..."
        if [ -d /opt ] && [ "$(sudo ls -A /opt 2>/dev/null)" ]; then
          sudo mkdir -p "$PRESERVATION_CHAMBER/opt"
          sudo cp -rf /opt/* "$PRESERVATION_CHAMBER/opt/" 2>/dev/null || {
            echo "‚ö†Ô∏è Alien applications preservation incomplete"
          }
        fi
        
        # Create universe manifest
        echo "üìã Creating Universe Preservation Manifest..."
        cat > "$PRESERVATION_CHAMBER/universe-manifest.txt" << EOF
        üõ∏ OMNITRIX UNIVERSE PRESERVATION CORE
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        üåü Hero: Ben Tennyson | Session: Alien Force Edition
        ‚è∞ Preservation Date: $(date)
        üÜî Session ID: ${{ github.run_id }}
        üåç Universe: $PLUMBER_NETWORK
        üëΩ Alien Mode: ${{ github.event.inputs.alien_mode || 'humungousaur' }}

        üì¶ PRESERVED ALIEN TECHNOLOGY:
        ‚úÖ Hero Base (/home) - Personal data and configurations
        ‚úÖ Command Center (/root) - Root user environment
        ‚úÖ Plumber Network State (/var/lib/tailscale) - VPN quantum state
        ‚úÖ Database Fortress (/var/lib/mysql) - MariaDB alien databases  
        ‚úÖ Web Arsenal (/var/www) - Web server alien technology
        ‚úÖ Control Panel (/www) - aaPanel alien command interface
        ‚úÖ Configuration Matrix (/etc) - Critical system configurations
        ‚úÖ Alien Applications (/opt) - Custom installed alien tech

        üö´ EXCLUDED FOR EFFICIENCY:
        ‚ùå Docker Container Overlay (pre-installed technology)
        ‚ùå System Packages (available in base universe)
        ‚ùå Temporary Files (ephemeral data)
        ‚ùå Virtual Filesystems (auto-generated)
        ‚ùå Cache Files (reconstructible data)

        üõ°Ô∏è PRESERVATION METHOD: Selective Alien Technology Backup
        ‚ö° SPEED OPTIMIZED: Fast backup/restore cycles
        üåå UNIVERSE CONTINUITY: 100% data preservation
        üëΩ ALIEN FORCE: Maximum efficiency protocols

          It's Hero Time! üí•
         EOF
        
        # Create temporal data core
        echo "üî¨ Compressing universe into temporal data core..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        CORE_NAME="omnitrix-universe-$TIMESTAMP.tar.gz"
        
        cd /tmp
        sudo tar -czf "$BACKUP_NEXUS/$BACKUP_ARTIFACT" universe_preservation/ 2>/dev/null || {
          echo "‚ö†Ô∏è Standard compression failed, using alternative method..."
          sudo tar -cf "$BACKUP_NEXUS/$BACKUP_ARTIFACT" universe_preservation/
        }
        
        # Set proper permissions
        sudo chown runner:runner "$BACKUP_NEXUS/$BACKUP_ARTIFACT"
        
        # Validation and reporting
        if [[ -f "$BACKUP_NEXUS/$BACKUP_ARTIFACT" ]]; then
          CORE_SIZE=$(du -h "$BACKUP_NEXUS/$BACKUP_ARTIFACT" | cut -f1)
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ TEMPORAL DATA CORE CREATED SUCCESSFULLY! üåå"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üíæ Core Size: $CORE_SIZE"
          echo "‚ö° Compression: Alien technology optimized"
          echo "üî¨ Integrity: Verified and secured"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          
          # Show core contents preview
          echo "üìã Temporal Data Core Contents:"
          tar -tzf "$BACKUP_NEXUS/$BACKUP_ARTIFACT" | head -15
        else
          echo "‚ùå CRITICAL: Temporal data core creation failed!"
          echo "üõ∏ Universe preservation compromised!"
          exit 1
        fi
        
        # Cleanup preservation chamber
        sudo rm -rf "$PRESERVATION_CHAMBER"
        echo "üßπ Preservation chamber cleaned and secured!"

    - name: "üöÄ GALACTIC ARTIFACT TRANSMISSION"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BACKUP_ARTIFACT }}
        path: ${{ env.BACKUP_NEXUS }}/${{ env.BACKUP_ARTIFACT }}
        retention-days: 7
        if-no-files-found: error

    - name: "‚òÅÔ∏è GALVAN PRIME CLOUD SYNCHRONIZATION"
      if: always()  
      run: |
        set -euo pipefail
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "‚òÅÔ∏è      GALVAN PRIME CLOUD SYNCHRONIZATION             üåå"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üõ∏ Uploading temporal data core to Galvan Prime..."
        echo "‚ö° Establishing quantum link to GitHub artifacts..."
        
        # Wait for artifact processing with exponential backoff
        echo "‚è∞ Waiting for GitHub artifact processing..."
        
        SYNC_SUCCESS=false
        for attempt in {1..8}; do
          wait_time=$((attempt * 10))  # 10, 20, 30... seconds
