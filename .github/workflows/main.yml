name: Persistent VPS with Robust Backup & Restore

on:
  workflow_dispatch:
  workflow_call:

env:
  BACKUP_DIR: /tmp/vps-backup
  RESTORE_DIR: /tmp/vps-restore
  MEGA_BACKUP_DIR: vps-backup

jobs:
  vps:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      # 1. Checkout and setup
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Install required tools
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y unzip curl tmate pv pigz rsync
          curl -Of https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip -a rclone-current-linux-amd64.zip
          cd rclone-*-linux-amd64
          sudo cp rclone /usr/bin/
          sudo chown root:root /usr/bin/rclone
          sudo chmod 755 /usr/bin/rclone
          rclone version

      # 3. Configure MEGA
      - name: Setup rclone with MEGA
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          [mega]
          type = mega
          user = ${{ secrets.MEGA_USER }}
          pass = ${{ secrets.MEGA_PASS }}
          EOF
          echo "üîë MEGA configured successfully!"
          rclone ls mega:/ || echo "‚ö†Ô∏è Could not list MEGA (maybe empty?)"

      # 4. Create user with sudo
      - name: Create user with sudo access
        run: |
          if ! id -u jacky >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash jacky
            echo "jacky:root" | sudo chpasswd
            sudo usermod -aG sudo jacky
            echo "‚úÖ User jacky created with password root and sudo privileges"
          else
            echo "‚ÑπÔ∏è User jacky already exists, ensuring sudo privileges..."
            sudo usermod -aG sudo jacky
          fi

      # 5. Set hostname
      - name: Set hostname
        run: |
          sudo hostnamectl set-hostname github-vps
          echo "‚úÖ Hostname set to $(hostname)"

      # 6. RESTORE PHASE - Comprehensive restoration (excluding snapd)
      - name: Restore system from backup
        run: |
          set -e
          mkdir -p $RESTORE_DIR
          
          # Download backup files with retries
          echo "üì• Downloading backup files from MEGA..."
          for retry in {1..3}; do
            if rclone copy mega:$MEGA_BACKUP_DIR/ $RESTORE_DIR/ --progress --include "*.tar.gz" --include "*.list"; then
              echo "‚úÖ Backup files downloaded successfully"
              break
            else
              echo "‚ö†Ô∏è Download attempt $retry failed, retrying..."
              sleep 5
            fi
            if [ $retry -eq 3 ]; then
              echo "‚ùå Failed to download backup after 3 attempts, starting fresh"
              exit 0
            fi
          done

          # Restore packages first (excluding snapd)
          if [ -f "$RESTORE_DIR/installed-packages.list" ]; then
            echo "üì¶ Restoring installed packages (excluding snapd)..."
            # Filter out snapd packages before restoring
            grep -v "snapd" "$RESTORE_DIR/installed-packages.list" > "$RESTORE_DIR/filtered-packages.list"
            sudo apt-get update
            sudo dpkg --set-selections < "$RESTORE_DIR/filtered-packages.list"
            sudo apt-get upgrade -y
            sudo apt-get dselect-upgrade -y
          fi

          # Restore system services and configurations (excluding snapd)
          for backup_file in "$RESTORE_DIR"/*.tar.gz; do
            case $(basename "$backup_file") in
              *system*|*services*|*aapanel*)
                echo "üîÑ Restoring system files from $(basename "$backup_file") (excluding snapd)..."
                sudo tar -xzf "$backup_file" -C / --keep-newer-files --exclude="snap" --exclude="var/lib/snapd" --exclude="var/snap"
                ;;
              *tailscale*)
                echo "üîÑ Restoring Tailscale state..."
                sudo systemctl stop tailscaled 2>/dev/null || true
                sudo tar -xzf "$backup_file" -C / --keep-newer-files
                sudo systemctl start tailscaled 2>/dev/null || true
                ;;
              *jacky*|*home*)
                echo "üîÑ Restoring user data..."
                sudo tar -xzf "$backup_file" -C / --skip-old-files --exclude="snap" --exclude=".snap"
                ;;
            esac
          done

          # Fix permissions
          echo "üîß Fixing file permissions..."
          sudo chown -R jacky:jacky /home/jacky 2>/dev/null || true
          sudo chmod 700 /home/jacky/.ssh 2>/dev/null || true
          sudo chmod 600 /home/jacky/.ssh/* 2>/dev/null || true

          # Clean up old backups from MEGA after successful restoration
          echo "üóëÔ∏è Cleaning up old backups from MEGA..."
          rclone delete mega:$MEGA_BACKUP_DIR/ --include "*.tar.gz" --include "*.list" || \
          echo "‚ö†Ô∏è Could not delete old backups (maybe they don't exist)"

          echo "‚úÖ Restoration and cleanup completed successfully"

      # 7. Setup Tailscale
      - name: Setup Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          
          if [ -f /var/lib/tailscale/tailscaled.state ]; then
            echo "üîÑ Using restored Tailscale state"
            sudo systemctl start tailscaled
            sleep 5
          else
            echo "üÜï Creating new Tailscale connection"
            sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname github-vps --ssh
          fi
          
          echo "üéâ Tailscale Status:"
          tailscale status || echo "‚è≥ Tailscale still initializing..."
          echo "IP: $(tailscale ip -4 || echo 'Getting IP...')"

      # 8. Start tmate session
      - name: Start tmate session
        run: |
          echo "üîó Starting tmate session..."
          echo "üë§ Username: jacky | Password: root"
          echo "üíª Use 'sudo su' to become root"
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          echo "üåê Connect with: $(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')"
          echo "‚è∞ Session will remain active for 6 hours"
          # Keep session alive
          sleep 21600

      # 9. BACKUP PHASE - Optimized for large files (excluding snapd)
      - name: Backup complete system
        if: always()
        run: |
          set -e
          mkdir -p $BACKUP_DIR
          cd $BACKUP_DIR
          
          echo "üì¶ Starting optimized system backup (excluding snapd)..."
          
          # 1. Backup installed packages (excluding snapd)
          echo "üì¶ Backing up installed packages (excluding snapd)..."
          dpkg --get-selections | grep -v "snapd" > installed-packages.list

          # 2. Backup user data with efficient compression and exclusions (including snap exclusion)
          echo "üì¶ Backing up user data (optimized compression, excluding snap)..."
          sudo tar -cf - \
            -C /home jacky \
            --exclude='./backup' \
            --exclude='*.tar.gz' \
            --exclude='.cache' \
            --exclude='tmp' \
            --exclude='temp' \
            --exclude='node_modules' \
            --exclude='.npm' \
            --exclude='Downloads' \
            --exclude='Videos' \
            --exclude='Music' \
            --exclude='Pictures' \
            --exclude='snap' \
            --exclude='.snap' \
            . | pigz -6 > jacky-home.tar.gz

          # 3. Backup system services and configurations (excluding snapd)
          echo "üì¶ Backing up system services (excluding snapd)..."
          services=(
            "/etc/apache2" "/etc/nginx" "/etc/mysql" "/etc/php"
            "/var/www" "/var/lib/mysql"
            "/usr/local/aapanel" "/opt/aapanel" "/root/.aapanel"
            "/etc/ssh" "/etc/ssl" "/etc/cron.d" "/etc/systemd"
            "/root/.ssh" "/home/jacky/.ssh"
          )
          
          for service in "${services[@]}"; do
            if [ -d "$service" ] || [ -f "$service" ]; then
              echo "üíæ Backing up $service"
              sudo tar -czf "system-$(basename "$service").tar.gz" -C / "$service" \
                --exclude="snap" --exclude="var/lib/snapd" --exclude="var/snap" 2>/dev/null || true
            fi
          done

          # 4. Backup Tailscale state
          echo "üì¶ Backing up Tailscale state..."
          sudo systemctl stop tailscaled 2>/dev/null || true
          sudo tar -czf tailscale-state.tar.gz -C /var/lib tailscale/ 2>/dev/null || true
          sudo systemctl start tailscaled 2>/dev/null || true

          # Create backup manifest
          echo "üìã Creating backup manifest..."
          ls -la *.tar.gz *.list > backup-manifest.txt
          du -sh * >> backup-manifest.txt

          echo "‚úÖ Backup completed: $(du -sh $BACKUP_DIR)"

      # 10. Upload backup with chunking and timeout handling
      - name: Upload backup to MEGA
        if: always()
        run: |
          set -e
          echo "‚òÅÔ∏è Uploading backup to MEGA..."
          
          # Create backup directory
          rclone mkdir mega:$MEGA_BACKUP_DIR || true
          
          # Upload strategy: Small files first, large files with chunking
          echo "‚¨ÜÔ∏è Uploading small files first..."
          for file in $BACKUP_DIR/*.list $BACKUP_DIR/*manifest* $BACKUP_DIR/*system-* $BACKUP_DIR/*tailscale*; do
            if [ -f "$file" ] && [ $(stat -c%s "$file") -lt 100000000 ]; then  # Files < 100MB
              echo "Uploading $(basename "$file")..."
              rclone copy "$file" mega:$MEGA_BACKUP_DIR/ --progress --timeout 300s
            fi
          done

          # Upload large home directory with optimized settings
          echo "‚¨ÜÔ∏è Uploading large home directory (this may take time)..."
          if [ -f "$BACKUP_DIR/jacky-home.tar.gz" ]; then
            # Use chunked upload with timeout and retries
            timeout 600 rclone copy "$BACKUP_DIR/jacky-home.tar.gz" mega:$MEGA_BACKUP_DIR/ \
              --progress \
              --transfers 2 \
              --checkers 4 \
              --timeout 300s \
              --retries 3 \
              --low-level-retries 10 \
              --contimeout 60s \
              --bwlimit 10M || \
            echo "‚ö†Ô∏è Home directory upload timed out or failed, but continuing..."
          fi

          # Upload any remaining files
          echo "‚¨ÜÔ∏è Uploading remaining files..."
          for file in $BACKUP_DIR/*.tar.gz; do
            if [ -f "$file" ] && [ ! -f "$BACKUP_DIR/jacky-home.tar.gz" ] || [ "$file" != "$BACKUP_DIR/jacky-home.tar.gz" ]; then
              echo "Uploading $(basename "$file")..."
              rclone copy "$file" mega:$MEGA_BACKUP_DIR/ --progress --timeout 180s
            fi
          done

          echo "üéâ Backup upload process completed"

      # 11. Final cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          sudo rm -rf $BACKUP_DIR $RESTORE_DIR 2>/dev/null || true
          echo "‚úÖ Cleanup completed"
