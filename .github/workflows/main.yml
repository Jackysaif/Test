# Persistent VPS Session Management Workflow
name: Persistent VPS Manager

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_restore:
        description: 'Force restore from backup'
        required: false
        default: 'false'
      session_duration:
        description: 'Session duration in hours'
        required: false
        default: '6'

env:
  VPS_USER: jacky
  VPS_PASSWORD: spidey
  HOSTNAME: spidey
  AAPANEL_USER: jacky
  AAPANEL_PASS: spidey
  TAILSCALE_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
  MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
  SESSION_DURATION: 330 # 5.5 hours (330 minutes)

jobs:
  persistent-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 400 # 6 hours 40 minutes total timeout

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget jq expect rclone
        
        # Install MEGAcmd
        wget https://mega.nz/linux/MEGAsync/xUbuntu_20.04/amd64/megacmd-xUbuntu_20.04_amd64.deb
        sudo dpkg -i megacmd-xUbuntu_20.04_amd64.deb || sudo apt-get install -f -y

    - name: Check for Previous Backup
      id: check_backup
      run: |
        echo "Checking for previous backup..."
        
        # Try to find latest backup artifact first
        BACKUP_FOUND="false"
        BACKUP_SOURCE=""
        
        # Check GitHub artifacts from previous runs
        gh run list --limit 10 --json databaseId,conclusion | jq -r '.[] | select(.conclusion=="success") | .databaseId' > run_ids.txt || echo "No previous runs found"
        
        if [ -s run_ids.txt ]; then
          while read -r run_id; do
            if gh run download "$run_id" --name "vps-backup" 2>/dev/null; then
              echo "Found backup in GitHub artifacts"
              BACKUP_FOUND="true"
              BACKUP_SOURCE="artifact"
              break
            fi
          done < run_ids.txt
        fi
        
        # If artifact backup not found, try MEGA
        if [ "$BACKUP_FOUND" = "false" ]; then
          echo "Artifact backup not found, checking MEGA..."
          mega-login "$MEGA_USERNAME" "$MEGA_PASSWORD" 2>/dev/null || echo "MEGA login failed"
          
          if mega-ls /vps-backups/ 2>/dev/null | grep -q "vps-backup-latest.tar.gz"; then
            echo "Found backup in MEGA"
            BACKUP_FOUND="true"
            BACKUP_SOURCE="mega"
            mega-get /vps-backups/vps-backup-latest.tar.gz ./
          fi
        fi
        
        echo "backup_found=$BACKUP_FOUND" >> $GITHUB_OUTPUT
        echo "backup_source=$BACKUP_SOURCE" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup VPS User and Hostname
      run: |
        echo "Setting up VPS environment..."
        
        # Create sudo user jacky
        sudo useradd -m -s /bin/bash -G sudo "$VPS_USER" || echo "User already exists"
        echo "$VPS_USER:$VPS_PASSWORD" | sudo chpasswd
        
        # Grant passwordless sudo
        echo "$VPS_USER ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$VPS_USER
        
        # Set hostname
        sudo hostnamectl set-hostname "$HOSTNAME"
        echo "127.0.0.1 $HOSTNAME" | sudo tee -a /etc/hosts
        
        # Switch to jacky user for remaining operations
        sudo -u "$VPS_USER" -i bash << 'USEREOF'
        cd /home/jacky
        mkdir -p /home/jacky/{backup,scripts,data}
        USEREOF

    - name: Restore Previous State
      if: steps.check_backup.outputs.backup_found == 'true'
      run: |
        echo "Restoring from backup (source: ${{ steps.check_backup.outputs.backup_source }})"
        
        sudo -u "$VPS_USER" -i bash << 'RESTOREEOF'
        cd /home/jacky
        
        if [ -f "/home/runner/work/*/*/vps-backup-latest.tar.gz" ]; then
          cp /home/runner/work/*/*/vps-backup-latest.tar.gz ./
        elif [ -f "./vps-backup-latest.tar.gz" ]; then
          echo "Backup file found"
        else
          echo "Backup file not found!"
          exit 1
        fi
        
        # Extract backup
        tar -xzf vps-backup-latest.tar.gz
        
        # Restore user data
        if [ -d "backup/home" ]; then
          cp -r backup/home/* /home/jacky/ 2>/dev/null || echo "No home data to restore"
        fi
        
        # Restore application configs
        if [ -d "backup/configs" ]; then
          sudo cp -r backup/configs/etc/* /etc/ 2>/dev/null || echo "No system configs to restore"
        fi
        
        # Restore installed packages list
        if [ -f "backup/installed_packages.txt" ]; then
          echo "Restoring packages..."
          sudo apt-get update
          sudo apt-get install -y $(cat backup/installed_packages.txt | tr '\n' ' ') || echo "Some packages failed to install"
        fi
        
        echo "Restore completed"
        RESTOREEOF

    - name: Install Tailscale
      run: |
        echo "Installing and configuring Tailscale..."
        
        # Install Tailscale
        curl -fsSL https://tailscale.com/install.sh | sh
        
        # Start Tailscale
        if [ -n "$TAILSCALE_KEY" ]; then
          sudo tailscale up --authkey="$TAILSCALE_KEY" --hostname="$HOSTNAME-$(date +%s)"
          
          # Get Tailscale IP
          sleep 10
          TAILSCALE_IP=$(tailscale ip -4 2>/dev/null || echo "")
          if [ -n "$TAILSCALE_IP" ]; then
            echo "Tailscale IP: $TAILSCALE_IP"
            echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          fi
        else
          echo "No Tailscale auth key provided"
        fi

    - name: Install and Configure aaPanel
      run: |
        echo "Installing aaPanel..."
        
        sudo -u "$VPS_USER" -i bash << 'AAPANELEOF'
        cd /home/jacky
        
        # Check if aaPanel is already installed
        if [ ! -f "/www/server/panel/BT-Panel" ]; then
          echo "Installing aaPanel..."
          wget -O install.sh https://www.aapanel.com/script/install_6.0_en.sh
          
          # Create expect script for automated installation
          cat > install_aapanel.exp << 'EXPECTEOF'
        #!/usr/bin/expect -f
        set timeout 300
        spawn sudo bash install.sh aapanel
        expect {
        "Do you want to install aaPanel to the /www directory now?(y/n):" {
        send "y\r"
        exp_continue
        }
        "Please choose your SSL type:" {
        send "1\r"
        exp_continue
        }
        eof {
        exit 0
        }
        }
        EXPECTEOF
          
          chmod +x install_aapanel.exp
          ./install_aapanel.exp || echo "aaPanel installation completed with possible warnings"
          
          sleep 30
          
          # Configure aaPanel with bt command
          if [ -f "/usr/bin/bt" ]; then
            echo "Configuring aaPanel..."
            echo "5" | sudo bt  # Set panel username
            sleep 2
            echo "$AAPANEL_USER" | sudo bt
            sleep 2
            echo "6" | sudo bt  # Set panel password  
            sleep 2
            echo "$AAPANEL_PASS" | sudo bt
            sleep 2
            
            # Get panel info
            sudo bt default > aapanel_info.txt 2>&1 || echo "Could not get panel info"
          fi
        else
          echo "aaPanel already installed"
        fi
        AAPANELEOF

    - name: Create Monitoring and Shutdown Scripts
      run: |
        sudo -u "$VPS_USER" -i bash << 'SCRIPTSEOF'
        cd /home/jacky/scripts
        
        # Create graceful shutdown monitor
        cat > shutdown_monitor.sh << 'SHUTDOWNEOF'
        #!/bin/bash
        echo "Starting shutdown monitor..."
        while true; do
        if [ -f "/tmp/stop" ]; then
        echo "Stop signal detected. Initiating graceful shutdown..."
        /home/jacky/scripts/create_backup.sh
        echo "Backup completed. Session will end."
        exit 0
        fi
        sleep 30
        done
        SHUTDOWNEOF
        
        # Create backup script
        cat > create_backup.sh << 'BACKUPEOF'
        #!/bin/bash
        echo "Creating backup at $(date)"
        cd /home/jacky
        mkdir -p backup/{home,configs,data}

        # Backup user data
        cp -r /home/jacky/{data,scripts,.*} backup/home/ 2>/dev/null || echo "Some home files skipped"

        # Backup important system configs
        sudo cp -r /etc/{nginx,apache2,mysql,php,ssl} backup/configs/etc/ 2>/dev/null || echo "Some configs not found"

        # Backup aaPanel data
        if [ -d "/www" ]; then
        sudo cp -r /www/server/panel/data backup/aapanel_data/ 2>/dev/null || echo "aaPanel data backup skipped"
        fi

        # Save installed packages
        dpkg --get-selections | grep -v deinstall | awk '{print $1}' > backup/installed_packages.txt

        # Save Tailscale state
        tailscale status > backup/tailscale_status.txt 2>/dev/null || echo "No Tailscale status"
 
        # Create compressed backup
        tar -czf vps-backup-latest.tar.gz backup/
        echo "Backup created: $(du -sh vps-backup-latest.tar.gz)"
        BACKUPEOF
        
        chmod +x *.sh
        SCRIPTSEOF

    - name: Start Session Monitoring
      run: |
        echo "Starting VPS session monitoring..."
        
        # Start shutdown monitor in background
        sudo -u "$VPS_USER" nohup /home/jacky/scripts/shutdown_monitor.sh > /tmp/shutdown_monitor.log 2>&1 &
        
        # Start session timer
        sudo -u "$VPS_USER" -i bash << 'SESSIONEOF' &
        echo "Session started at $(date)"
        echo "Session will run for $SESSION_DURATION minutes"
        
        # Wait for session duration or stop signal
        for ((i=1; i<=$SESSION_DURATION; i++)); do
            if [ -f "/tmp/stop" ]; then
                echo "Stop signal detected at minute $i"
                break
            fi
            
            # Log status every 30 minutes
            if [ $((i % 30)) -eq 0 ]; then
                echo "Session running: $i/$SESSION_DURATION minutes"
                echo "System load: $(uptime)"
                if command -v tailscale &> /dev/null; then
                    echo "Tailscale status: $(tailscale status --self=false --peers=false 2>/dev/null | head -1 || echo 'Not connected')"
                fi
            fi
            
            sleep 60
        done
        
        echo "Session time completed. Creating final backup..."
        /home/jacky/scripts/create_backup.sh
        SESSIONEOF

    - name: Keep Session Alive
      run: |
        echo "VPS session is now running..."
        echo "Session details:"
        echo "- User: $VPS_USER"
        echo "- Hostname: $HOSTNAME"
        echo "- Session duration: $SESSION_DURATION minutes"
        
        if [ -n "$TAILSCALE_IP" ]; then
          echo "- Tailscale IP: $TAILSCALE_IP"
        fi
        
        echo "- aaPanel should be accessible on port 7800"
        echo "- To stop session early: touch /tmp/stop"
        
        # Wait for session to complete or stop signal
        tail -f /tmp/shutdown_monitor.log &
        
        for ((i=1; i<=330; i++)); do
            if [ -f "/tmp/stop" ]; then
                echo "Session stopped by user command"
                break
            fi
            sleep 60
        done
        
        echo "Session completed at $(date)"

    - name: Create Final Backup
      if: always()
      run: |
        echo "Creating final backup..."
        sudo -u "$VPS_USER" /home/jacky/scripts/create_backup.sh || echo "Backup script failed"
        
        # Copy backup to workspace
        sudo cp /home/jacky/vps-backup-latest.tar.gz ./ 2>/dev/null || echo "No backup file found"

    - name: Upload Backup to GitHub Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vps-backup
        path: vps-backup-latest.tar.gz
        retention-days: 30
      continue-on-error: true

    - name: Upload Backup to MEGA
      if: always()
      run: |
        if [ -f "vps-backup-latest.tar.gz" ]; then
          echo "Uploading backup to MEGA..."
          
          mega-login "$MEGA_USERNAME" "$MEGA_PASSWORD" 2>/dev/null || echo "MEGA login failed"
          mega-mkdir /vps-backups 2>/dev/null || echo "Directory might already exist"
          
          # Upload with timestamp
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          mega-put vps-backup-latest.tar.gz /vps-backups/vps-backup-$TIMESTAMP.tar.gz || echo "MEGA upload failed"
          mega-put vps-backup-latest.tar.gz /vps-backups/vps-backup-latest.tar.gz || echo "MEGA latest backup update failed"
          
          # Create backup info file with direct link
          MEGA_LINK=$(mega-export /vps-backups/vps-backup-latest.tar.gz 2>/dev/null | grep -o 'https://mega.nz/[^"]*' || echo "Link generation failed")
          echo "MEGA Backup Link: $MEGA_LINK" > backup_info.txt
          echo "Backup Date: $(date)" >> backup_info.txt
          echo "Backup Size: $(du -sh vps-backup-latest.tar.gz)" >> backup_info.txt
          
          # Save backup info
          mega-put backup_info.txt /vps-backups/latest_backup_info.txt 2>/dev/null || echo "Backup info upload failed"
          
          echo "Backup uploaded to MEGA successfully"
          echo "Direct link: $MEGA_LINK"
        else
          echo "No backup file found to upload"
        fi
      continue-on-error: true

    - name: Session Summary
      if: always()
      run: |
        echo "=== VPS Session Summary ==="
        echo "Session completed at: $(date)"
        echo "Hostname: $HOSTNAME"
        echo "User: $VPS_USER"
        
        if [ -n "$TAILSCALE_IP" ]; then
          echo "Tailscale IP: $TAILSCALE_IP"
        fi
        
        if [ -f "/home/jacky/aapanel_info.txt" ]; then
          echo "aaPanel Info:"
          cat /home/jacky/aapanel_info.txt || echo "aaPanel info not available"
        fi
        
        if [ -f "backup_info.txt" ]; then
          echo "Backup Info:"
          cat backup_info.txt
        fi
        
        echo "Next session will start in 6 hours (scheduled)"
        echo "=========================="
